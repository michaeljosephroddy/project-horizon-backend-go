SCRIPT  /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim
Sourced 18 times
Total time:   0.040725
 Self time:   0.035580

count  total (s)   self (s)
                            " Copyright 2009 The Go Authors. All rights reserved.
                            " Use of this source code is governed by a BSD-style
                            " license that can be found in the LICENSE file.
                            "
                            " go.vim: Vim syntax file for Go.
                            " Language:             Go
                            " Maintainer:           Billie Cleek <bhcleek@gmail.com>
                            " Latest Revision:      2024-04-13
                            "  2024-03-17:          - fix goPackageComment highlight (by Vim Project)
                            " License:              BSD-style. See LICENSE file in source repository.
                            " Repository:           https://github.com/fatih/vim-go
                            
                            " Quit when a (custom) syntax file was already loaded
   18              0.000269 if exists("b:current_syntax")
                              finish
   18              0.000027 endif
                            
   18              0.000178 let s:keepcpo = &cpo
   18   0.000416   0.000310 set cpo&vim
                            
   18              0.000143 function! s:FoldEnable(...) abort
                              if a:0 > 0
                                return index(s:FoldEnable(), a:1) > -1
                              endif
                              return get(g:, 'go_fold_enable', ['block', 'import', 'varconst', 'package_comment'])
                            endfunction
                            
   18              0.000053 function! s:HighlightArrayWhitespaceError() abort
                              return get(g:, 'go_highlight_array_whitespace_error', 0)
                            endfunction
                            
   18              0.000044 function! s:HighlightChanWhitespaceError() abort
                              return get(g:, 'go_highlight_chan_whitespace_error', 0)
                            endfunction
                            
   18              0.000040 function! s:HighlightExtraTypes() abort
                              return get(g:, 'go_highlight_extra_types', 0)
                            endfunction
                            
   18              0.000039 function! s:HighlightSpaceTabError() abort
                              return get(g:, 'go_highlight_space_tab_error', 0)
                            endfunction
                            
   18              0.000041 function! s:HighlightTrailingWhitespaceError() abort
                              return get(g:, 'go_highlight_trailing_whitespace_error', 0)
                            endfunction
                            
   18              0.000053 function! s:HighlightOperators() abort
                              return get(g:, 'go_highlight_operators', 0)
                            endfunction
                            
   18              0.000036 function! s:HighlightFunctions() abort
                              return get(g:, 'go_highlight_functions', 0)
                            endfunction
                            
   18              0.000037 function! s:HighlightFunctionParameters() abort
                              return get(g:, 'go_highlight_function_parameters', 0)
                            endfunction
                            
   18              0.000036 function! s:HighlightFunctionCalls() abort
                              return get(g:, 'go_highlight_function_calls', 0)
                            endfunction
                            
   18              0.000035 function! s:HighlightFields() abort
                              return get(g:, 'go_highlight_fields', 0)
                            endfunction
                            
   18              0.000034 function! s:HighlightTypes() abort
                              return get(g:, 'go_highlight_types', 0)
                            endfunction
                            
   18              0.000036 function! s:HighlightBuildConstraints() abort
                              return get(g:, 'go_highlight_build_constraints', 0)
                            endfunction
                            
   18              0.000036 function! s:HighlightStringSpellcheck() abort
                              return get(g:, 'go_highlight_string_spellcheck', 1)
                            endfunction
                            
   18              0.000036 function! s:HighlightFormatStrings() abort
                              return get(g:, 'go_highlight_format_strings', 1)
                            endfunction
                            
   18              0.000035 function! s:HighlightGenerateTags() abort
                              return get(g:, 'go_highlight_generate_tags', 0)
                            endfunction
                            
   18              0.000037 function! s:HighlightVariableAssignments() abort
                              return get(g:, 'go_highlight_variable_assignments', 0)
                            endfunction
                            
   18              0.000037 function! s:HighlightVariableDeclarations() abort
                              return get(g:, 'go_highlight_variable_declarations', 0)
                            endfunction
                            
   18              0.000033 syn case match
                            
   18              0.000111 syn keyword     goPackage           package
   18              0.000061 syn keyword     goImport            import    contained
   18              0.000057 syn keyword     goVar               var       contained
   18              0.000060 syn keyword     goConst             const     contained
                            
   18              0.000074 hi def link     goPackage           Statement
   18              0.000059 hi def link     goImport            Statement
   18              0.000043 hi def link     goVar               Keyword
   18              0.000036 hi def link     goConst             Keyword
   18              0.000051 hi def link     goDeclaration       Keyword
                            
                            " Keywords within functions
   18              0.000114 syn keyword     goStatement         defer go goto return break continue fallthrough
   18              0.000153 syn keyword     goConditional       if else switch select
   18              0.000064 syn keyword     goLabel             case default
   18              0.000081 syn keyword     goRepeat            for range
                            
   18              0.000056 hi def link     goStatement         Statement
   18              0.000039 hi def link     goConditional       Conditional
   18              0.000037 hi def link     goLabel             Label
   18              0.000039 hi def link     goRepeat            Repeat
                            
                            " Predefined types
   18              0.000097 syn keyword     goType              chan map bool string error any comparable
   18              0.000078 syn keyword     goSignedInts        int int8 int16 int32 int64 rune
   18              0.000082 syn keyword     goUnsignedInts      byte uint uint8 uint16 uint32 uint64 uintptr
   18              0.000061 syn keyword     goFloats            float32 float64
   18              0.000101 syn keyword     goComplexes         complex64 complex128
                            
   18              0.000044 hi def link     goType              Type
   18              0.000039 hi def link     goSignedInts        Type
   18              0.000115 hi def link     goUnsignedInts      Type
   18              0.000035 hi def link     goFloats            Type
   18              0.000050 hi def link     goComplexes         Type
                            
                            " Predefined functions and values
   18              0.000102 syn keyword     goBuiltins                 append cap clear close complex copy delete imag len
   18              0.000081 syn keyword     goBuiltins                 make max min new panic print println real recover
   18              0.000062 syn keyword     goBoolean                  true false
   18              0.000087 syn keyword     goPredefinedIdentifiers    nil iota
                            
   18              0.000044 hi def link     goBuiltins                 Identifier
   18              0.000045 hi def link     goPredefinedIdentifiers    Constant
                            " Boolean links to Constant by default by vim: goBoolean and goPredefinedIdentifiers
                            " will be highlighted the same, but having the separate groups allows users to
                            " have separate highlighting for them if they desire.
   18              0.000036 hi def link     goBoolean                  Boolean
                            
                            " Comments; their contents
   18              0.000062 syn keyword     goTodo              contained TODO FIXME XXX BUG
   18              0.000097 syn cluster     goCommentGroup      contains=goTodo
                            
   18              0.000391 syn region      goComment           start="//" end="$" contains=goGenerate,@goCommentGroup,@Spell
   18   0.001032   0.000333 if s:FoldEnable('comment')
                              syn region    goComment           start="/\*" end="\*/" contains=@goCommentGroup,@Spell fold
                              syn match     goComment           "\v(^\s*//.*\n)+" contains=goGenerate,@goCommentGroup,@Spell fold
   18              0.000027 else
   18              0.000177   syn region    goComment           start="/\*" end="\*/" contains=@goCommentGroup,@Spell
   18              0.000023 endif
                            
   18              0.000043 hi def link     goComment           Comment
   18              0.000037 hi def link     goTodo              Todo
                            
   18   0.000325   0.000220 if s:HighlightGenerateTags()
                              syn match       goGenerateVariables contained /\%(\$GOARCH\|\$GOOS\|\$GOFILE\|\$GOLINE\|\$GOPACKAGE\|\$DOLLAR\)\>/
                              syn region      goGenerate          start="^\s*//go:generate" end="$" contains=goGenerateVariables
                              hi def link     goGenerate          PreProc
                              hi def link     goGenerateVariables Special
   18              0.000020 endif
                            
                            " Go escapes
   18              0.000156 syn match       goEscapeOctal       display contained "\\[0-7]\{3}"
   18              0.000120 syn match       goEscapeC           display contained +\\[abfnrtv\\'"]+
   18              0.000093 syn match       goEscapeX           display contained "\\x\x\{2}"
   18              0.000088 syn match       goEscapeU           display contained "\\u\x\{4}"
   18              0.000087 syn match       goEscapeBigU        display contained "\\U\x\{8}"
   18              0.000129 syn match       goEscapeError       display contained +\\[^0-7xuUabfnrtv\\'"]+
                            
   18              0.000046 hi def link     goEscapeOctal       goSpecialString
   18              0.000037 hi def link     goEscapeC           goSpecialString
   18              0.000037 hi def link     goEscapeX           goSpecialString
   18              0.000036 hi def link     goEscapeU           goSpecialString
   18              0.000035 hi def link     goEscapeBigU        goSpecialString
   18              0.000035 hi def link     goSpecialString     Special
   18              0.000040 hi def link     goEscapeError       Error
                            
                            " Strings and their contents
   18              0.000118 syn cluster     goStringGroup       contains=goEscapeOctal,goEscapeC,goEscapeX,goEscapeU,goEscapeBigU,goEscapeError
   18   0.000328   0.000226 if s:HighlightStringSpellcheck()
   18              0.000281   syn region      goString            start=+"+ skip=+\\\\\|\\"+ end=+"+ contains=@goStringGroup,@Spell
   18              0.000152   syn region      goRawString         start=+`+ end=+`+ contains=@Spell
                            else
                              syn region      goString            start=+"+ skip=+\\\\\|\\"+ end=+"+ contains=@goStringGroup
                              syn region      goRawString         start=+`+ end=+`+
   18              0.000022 endif
                            
   18              0.000213 syn match       goImportString      /^\%(\s\+\|import \)\(\h\w* \)\?\zs"[^"]\+"/ contained containedin=goImport
                            
   18   0.000299   0.000204 if s:HighlightFormatStrings()
                              " [n] notation is valid for specifying explicit argument indexes
                              " 1. Match a literal % not preceded by a %.
                              " 2. Match any number of -, #, 0, space, or +
                              " 3. Match * or [n]* or any number or nothing before a .
                              " 4. Match * or [n]* or any number or nothing after a .
                              " 5. Match [n] or nothing before a verb
                              " 6. Match a formatting verb
   18              0.000437   syn match       goFormatSpecifier   /\
                                    \%([^%]\%(%%\)*\)\
                                    \@<=%[-#0 +]*\
                                    \%(\%(\%(\[\d\+\]\)\=\*\)\|\d\+\)\=\
                                    \%(\.\%(\%(\%(\[\d\+\]\)\=\*\)\|\d\+\)\=\)\=\
                                    \%(\[\d\+\]\)\=[vTtbcdoqxXUeEfFgGspw]/ contained containedin=goString,goRawString
   18              0.000049   hi def link     goFormatSpecifier   goSpecialString
   18              0.000021 endif
                            
   18              0.000040 hi def link     goImportString      String
   18              0.000036 hi def link     goString            String
   18              0.000033 hi def link     goRawString         String
                            
                            " Characters; their contents
   18              0.000104 syn cluster     goCharacterGroup    contains=goEscapeOctal,goEscapeC,goEscapeX,goEscapeU,goEscapeBigU
   18              0.000228 syn region      goCharacter         start=+'+ skip=+\\\\\|\\'+ end=+'+ contains=@goCharacterGroup
                            
   18              0.000041 hi def link     goCharacter         Character
                            
                            " Regions
   18              0.000146 syn region      goParen             start='(' end=')' transparent
   18   0.000732   0.000199 if s:FoldEnable('block')
   18              0.000161   syn region    goBlock             start="{" end="}" transparent fold
                            else
                              syn region    goBlock             start="{" end="}" transparent
   18              0.000021 endif
                            
                            " import
   18   0.000614   0.000173 if s:FoldEnable('import')
   18              0.000223   syn region    goImport            start='import (' end=')' transparent fold contains=goImport,goImportString,goComment
   18              0.000135   syn match     goImport            /^import ()/ transparent fold contains=goImport
                            else
                              syn region    goImport            start='import (' end=')' transparent contains=goImport,goImportString,goComment
                              syn match     goImport            /^import ()/ transparent contains=goImport
   18              0.000022 endif
                            
                            " var, const
   18   0.000632   0.000173 if s:FoldEnable('varconst')
   18              0.000427   syn region    goVar               start='var ('   end='^\s*)$' transparent fold
                                                              \ contains=ALLBUT,goParen,goBlock,goFunction,goTypeName,goReceiverType,goReceiverVar,goParamName,goParamType,goSimpleParams,goPointerOperator
   18              0.000142   syn match     goVar               /var ()/ transparent fold
                                                              \ contains=goVar
   18              0.000312   syn region    goConst             start='const (' end='^\s*)$' transparent fold
                                                              \ contains=ALLBUT,goParen,goBlock,goFunction,goTypeName,goReceiverType,goReceiverVar,goParamName,goParamType,goSimpleParams,goPointerOperator
   18              0.000137   syn match     goConst             /const ()/ transparent fold
                                                              \ contains=goConst
                            else
                              syn region    goVar               start='var ('   end='^\s*)$' transparent
                                                              \ contains=ALLBUT,goParen,goBlock,goFunction,goTypeName,goReceiverType,goReceiverVar,goParamName,goParamType,goSimpleParams,goPointerOperator
                              syn match     goVar               /var ()/ transparent
                                                              \ contains=goVar
                              syn region    goConst             start='const (' end='^\s*)$' transparent
                                                              \ contains=ALLBUT,goParen,goBlock,goFunction,goTypeName,goReceiverType,goReceiverVar,goParamName,goParamType,goSimpleParams,goPointerOperator
                              syn match     goConst             /const ()/ transparent
                                                              \ contains=goConst
   18              0.000023 endif
                            
                            " Single-line var, const, and import.
   18              0.000201 syn match       goSingleDecl        /\%(import\|var\|const\) [^(]\@=/ contains=goImport,goVar,goConst
                            
                            " Integers
   18              0.000168 syn match       goDecimalInt        "\<-\=\%(0\|\%(\d\|\d_\d\)\+\)\>"
   18              0.000172 syn match       goHexadecimalInt    "\<-\=0[xX]_\?\%(\x\|\x_\x\)\+\>"
   18              0.000177 syn match       goOctalInt          "\<-\=0[oO]\?_\?\%(\o\|\o_\o\)\+\>"
   18              0.000195 syn match       goBinaryInt         "\<-\=0[bB]_\?\%([01]\|[01]_[01]\)\+\>"
                            
   18              0.000046 hi def link     goDecimalInt        Integer
   18              0.000038 hi def link     goDecimalError      Error
   18              0.000038 hi def link     goHexadecimalInt    Integer
   18              0.000035 hi def link     goHexadecimalError  Error
   18              0.000034 hi def link     goOctalInt          Integer
   18              0.000070 hi def link     goOctalError        Error
   18              0.000035 hi def link     goBinaryInt         Integer
   18              0.000052 hi def link     goBinaryError       Error
   18              0.000047 hi def link     Integer             Number
                            
                            " Floating point
                            "float_lit         = decimal_float_lit | hex_float_lit .
                            "
                            "decimal_float_lit = decimal_digits "." [ decimal_digits ] [ decimal_exponent ] |
                            "                    decimal_digits decimal_exponent |
                            "                    "." decimal_digits [ decimal_exponent ] .
                            "decimal_exponent  = ( "e" | "E" ) [ "+" | "-" ] decimal_digits .
                            "
                            "hex_float_lit     = "0" ( "x" | "X" ) hex_mantissa hex_exponent .
                            "hex_mantissa      = [ "_" ] hex_digits "." [ hex_digits ] |
                            "                    [ "_" ] hex_digits |
                            "                    "." hex_digits .
                            "hex_exponent      = ( "p" | "P" ) [ "+" | "-" ] decimal_digits .
                            " decimal floats with a decimal point
   18              0.000359 syn match       goFloat             "\<-\=\%(0\|\%(\d\|\d_\d\)\+\)\.\%(\%(\%(\d\|\d_\d\)\+\)\=\%([Ee][-+]\=\%(\d\|\d_\d\)\+\)\=\>\)\="
   18              0.000209 syn match       goFloat             "\s\zs-\=\.\%(\d\|\d_\d\)\+\%(\%([Ee][-+]\=\%(\d\|\d_\d\)\+\)\>\)\="
                            " decimal floats without a decimal point
   18              0.000198 syn match       goFloat             "\<-\=\%(0\|\%(\d\|\d_\d\)\+\)[Ee][-+]\=\%(\d\|\d_\d\)\+\>"
                            " hexadecimal floats with a decimal point
   18              0.000237 syn match       goHexadecimalFloat  "\<-\=0[xX]\%(_\x\|\x\)\+\.\%(\%(\x\|\x_\x\)\+\)\=\%([Pp][-+]\=\%(\d\|\d_\d\)\+\)\=\>"
   18              0.000198 syn match       goHexadecimalFloat  "\<-\=0[xX]\.\%(\x\|\x_\x\)\+\%([Pp][-+]\=\%(\d\|\d_\d\)\+\)\=\>"
                            " hexadecimal floats without a decimal point
   18              0.000193 syn match       goHexadecimalFloat  "\<-\=0[xX]\%(_\x\|\x\)\+[Pp][-+]\=\%(\d\|\d_\d\)\+\>"
                            
   18              0.000037 hi def link     goFloat             Float
   18              0.000035 hi def link     goHexadecimalFloat  Float
                            
                            " Imaginary literals
   18              0.000142 syn match       goImaginaryDecimal        "\<-\=\%(0\|\%(\d\|\d_\d\)\+\)i\>"
   18              0.000177 syn match       goImaginaryHexadecimal    "\<-\=0[xX]_\?\%(\x\|\x_\x\)\+i\>"
   18              0.000163 syn match       goImaginaryOctal          "\<-\=0[oO]\?_\?\%(\o\|\o_\o\)\+i\>"
   18              0.000195 syn match       goImaginaryBinary         "\<-\=0[bB]_\?\%([01]\|[01]_[01]\)\+i\>"
                            
                            " imaginary decimal floats with a decimal point
   18              0.000243 syn match       goImaginaryFloat             "\<-\=\%(0\|\%(\d\|\d_\d\)\+\)\.\%(\%(\%(\d\|\d_\d\)\+\)\=\%([Ee][-+]\=\%(\d\|\d_\d\)\+\)\=\)\=i\>"
   18              0.000199 syn match       goImaginaryFloat             "\s\zs-\=\.\%(\d\|\d_\d\)\+\%([Ee][-+]\=\%(\d\|\d_\d\)\+\)\=i\>"
                            " imaginary decimal floats without a decimal point
   18              0.000184 syn match       goImaginaryFloat             "\<-\=\%(0\|\%(\d\|\d_\d\)\+\)[Ee][-+]\=\%(\d\|\d_\d\)\+i\>"
                            " imaginary hexadecimal floats with a decimal point
   18              0.000233 syn match       goImaginaryHexadecimalFloat  "\<-\=0[xX]\%(_\x\|\x\)\+\.\%(\%(\x\|\x_\x\)\+\)\=\%([Pp][-+]\=\%(\d\|\d_\d\)\+\)\=i\>"
   18              0.000207 syn match       goImaginaryHexadecimalFloat  "\<-\=0[xX]\.\%(\x\|\x_\x\)\+\%([Pp][-+]\=\%(\d\|\d_\d\)\+\)\=i\>"
                            " imaginary hexadecimal floats without a decimal point
   18              0.000182 syn match       goImaginaryHexadecimalFloat  "\<-\=0[xX]\%(_\x\|\x\)\+[Pp][-+]\=\%(\d\|\d_\d\)\+i\>"
                            
   18              0.000049 hi def link     goImaginaryDecimal             Number
   18              0.000037 hi def link     goImaginaryHexadecimal         Number
   18              0.000040 hi def link     goImaginaryOctal               Number
   18              0.000038 hi def link     goImaginaryBinary              Number
   18              0.000040 hi def link     goImaginaryFloat               Float
   18              0.000036 hi def link     goImaginaryHexadecimalFloat    Float
                            
                            " Spaces after "[]"
   18   0.000396   0.000273 if s:HighlightArrayWhitespaceError()
                              syn match goSpaceError display "\%(\[\]\)\@<=\s\+"
   18              0.000021 endif
                            
                            " Spacing errors around the 'chan' keyword
   18   0.000284   0.000200 if s:HighlightChanWhitespaceError()
                              " receive-only annotation on chan type
                              "
                              " \(\<chan\>\)\@<!<-  (only pick arrow when it doesn't come after a chan)
                              " this prevents picking up 'chan<- chan<-' but not '<- chan'
                              syn match goSpaceError display "\%(\%(\<chan\>\)\@<!<-\)\@<=\s\+\%(\<chan\>\)\@="
                            
                              " send-only annotation on chan type
                              "
                              " \(<-\)\@<!\<chan\>  (only pick chan when it doesn't come after an arrow)
                              " this prevents picking up '<-chan <-chan' but not 'chan <-'
                              syn match goSpaceError display "\%(\%(<-\)\@<!\<chan\>\)\@<=\s\+\%(<-\)\@="
                            
                              " value-ignoring receives in a few contexts
                              syn match goSpaceError display "\%(\%(^\|[={(,;]\)\s*<-\)\@<=\s\+"
   18              0.000022 endif
                            
                            " Extra types commonly seen
   18   0.000266   0.000181 if s:HighlightExtraTypes()
                              syn match goExtraType /\<bytes\.\%(Buffer\)\>/
                              syn match goExtraType /\<context\.\%(Context\)\>/
                              syn match goExtraType /\<io\.\%(Reader\|ReadSeeker\|ReadWriter\|ReadCloser\|ReadWriteCloser\|Writer\|WriteCloser\|Seeker\)\>/
                              syn match goExtraType /\<reflect\.\%(Kind\|Type\|Value\)\>/
                              syn match goExtraType /\<unsafe\.Pointer\>/
   18              0.000021 endif
                            
                            " Space-tab error
   18   0.000270   0.000182 if s:HighlightSpaceTabError()
                              syn match goSpaceError display " \+\t"me=e-1
   18              0.000020 endif
                            
                            " Trailing white space error
   18   0.000278   0.000197 if s:HighlightTrailingWhitespaceError()
                              syn match goSpaceError display excludenl "\s\+$"
   18              0.000019 endif
                            
   18              0.000053 hi def link     goExtraType         Type
   18              0.000033 hi def link     goSpaceError        Error
                            
                            
                            
                            " included from: https://github.com/athom/more-colorful.vim/blob/master/after/syntax/go.vim
                            "
                            " Comments; their contents
   18              0.000054 syn keyword     goTodo              contained NOTE
   18              0.000035 hi def link     goTodo              Todo
                            
   18              0.000108 syn match goVarArgs /\.\.\./
                            
                            " Operators;
   18   0.000278   0.000176 if s:HighlightOperators()
                              " match single-char operators:          - + % < > ! & | ^ * =
                              " and corresponding two-char operators: -= += %= <= >= != &= |= ^= *= ==
                              syn match goOperator /[-+%<>!&|^*=]=\?/
                              " match / and /=
                              syn match goOperator /\/\%(=\|\ze[^/*]\)/
                              " match two-char operators:               << >> &^
                              " and corresponding three-char operators: <<= >>= &^=
                              syn match goOperator /\%(<<\|>>\|&^\)=\?/
                              " match remaining two-char operators: := && || <- ++ --
                              syn match goOperator /:=\|||\|<-\|++\|--/
                              " match ~
                              syn match goOperator /\~/
                              " match ...
                            
                              hi def link     goPointerOperator   goOperator
                              hi def link     goVarArgs           goOperator
   18              0.000021 endif
   18              0.000045 hi def link     goOperator          Operator
                            
                            "                               -> type constraint opening bracket
                            "                               |-> start non-counting group
                            "                               ||  -> any word character
                            "                               ||  |  -> at least one, as many as possible
                            "                               ||  |  |    -> start non-counting group
                            "                               ||  |  |    |   -> match ~
                            "                               ||  |  |    |   | -> at most once
                            "                               ||  |  |    |   | |     -> allow a slice type
                            "                               ||  |  |    |   | |     |      -> any word character
                            "                               ||  |  |    |   | |     |      | -> start a non-counting group
                            "                               ||  |  |    |   | |     |      | | -> that matches word characters and |
                            "                               ||  |  |    |   | |     |      | | |     -> close the non-counting group
                            "                               ||  |  |    |   | |     |      | | |     | -> close the non-counting group
                            "                               ||  |  |    |   | |     |      | | |     | |-> any number of matches
                            "                               ||  |  |    |   | |     |      | | |     | || -> start a non-counting group
                            "                               ||  |  |    |   | |     |      | | |     | || | -> a comma and whitespace
                            "                               ||  |  |    |   | |     |      | | |     | || | |      -> at most once
                            "                               ||  |  |    |   | |     |      | | |     | || | |      | -> close the non-counting group
                            "                               ||  |  |    |   | |     |      | | |     | || | |      | | -> at least one of those non-counting groups, as many as possible
                            "                               ||  |  |    |   | | --------   | | |     | || | |      | | | -> type constraint closing bracket
                            "                               ||  |  |    |   | ||        |  | | |     | || | |      | | | |
   18              0.000269 syn match goTypeParams        /\[\%(\w\+\s\+\%(\~\?\%(\[]\)\?\w\%(\w\||\)\)*\%(,\s*\)\?\)\+\]/ nextgroup=goSimpleParams,goDeclType contained
                            
                            " Functions;
   18   0.000516   0.000355 if s:HighlightFunctions() || s:HighlightFunctionParameters()
                              syn match goDeclaration       /\<func\>/ nextgroup=goReceiver,goFunction,goSimpleParams skipwhite skipnl
                              syn match goReceiverDecl      /(\s*\zs\%(\%(\w\+\s\+\)\?\*\?\w\+\%(\[\%(\%(\[\]\)\?\w\+\%(,\s*\)\?\)\+\]\)\?\)\ze\s*)/ contained contains=goReceiverVar,goReceiverType,goPointerOperator
                              syn match goReceiverVar       /\w\+\ze\s\+\%(\w\|\*\)/ nextgroup=goPointerOperator,goReceiverType skipwhite skipnl contained
                              syn match goPointerOperator   /\*/ nextgroup=goReceiverType contained skipwhite skipnl
                              syn match goFunction          /\w\+/ nextgroup=goSimpleParams,goTypeParams contained skipwhite skipnl
                              syn match goReceiverType      /\w\+\%(\[\%(\%(\[\]\)\?\w\+\%(,\s*\)\?\)\+\]\)\?\ze\s*)/ contained
                              if s:HighlightFunctionParameters()
                                syn match goSimpleParams      /(\%(\w\|\_s\|[*\.\[\],\{\}<>-]\)*)/ contained contains=goParamName,goType nextgroup=goFunctionReturn skipwhite skipnl
                                syn match goFunctionReturn   /(\%(\w\|\_s\|[*\.\[\],\{\}<>-]\)*)/ contained contains=goParamName,goType skipwhite skipnl
                                syn match goParamName        /\w\+\%(\s*,\s*\w\+\)*\ze\s\+\%(\w\|\.\|\*\|\[\)/ contained nextgroup=goParamType skipwhite skipnl
                                syn match goParamType        /\%([^,)]\|\_s\)\+,\?/ contained nextgroup=goParamName skipwhite skipnl
                                                      \ contains=goVarArgs,goType,goSignedInts,goUnsignedInts,goFloats,goComplexes,goDeclType,goBlock
                                hi def link   goReceiverVar    goParamName
                                hi def link   goParamName      Identifier
                              endif
                              syn match goReceiver          /(\s*\%(\w\+\s\+\)\?\*\?\s*\w\+\%(\[\%(\%(\[\]\)\?\w\+\%(,\s*\)\?\)\+\]\)\?\s*)\ze\s*\w/ contained nextgroup=goFunction contains=goReceiverDecl skipwhite skipnl
   18              0.000027 else
   18              0.000097   syn keyword goDeclaration func
   18              0.000022 endif
   18              0.000043 hi def link     goFunction          Function
                            
                            " Function calls;
   18   0.000300   0.000207 if s:HighlightFunctionCalls()
                              syn match goFunctionCall      /\w\+\ze\%(\[\%(\%(\[]\)\?\w\+\(,\s*\)\?\)\+\]\)\?(/ contains=goBuiltins,goDeclaration
   18              0.000021 endif
   18              0.000038 hi def link     goFunctionCall      Type
                            
                            " Fields;
   18   0.000243   0.000172 if s:HighlightFields()
                              " 1. Match a sequence of word characters coming after a '.'
                              " 2. Require the following but dont match it: ( \@= see :h E59)
                              "    - The symbols: / - + * %   OR
                              "    - The symbols: [] {} <> )  OR
                              "    - The symbols: \n \r space OR
                              "    - The symbols: , : .
                              " 3. Have the start of highlight (hs) be the start of matched
                              "    pattern (s) offsetted one to the right (+1) (see :h E401)
                              syn match       goField   /\.\w\+\
                                    \%(\%([\/\-\+*%]\)\|\
                                    \%([\[\]{}<\>\)]\)\|\
                                    \%([\!=\^|&]\)\|\
                                    \%([\n\r\ ]\)\|\
                                    \%([,\:.]\)\)\@=/hs=s+1
   18              0.000022 endif
   18              0.000041 hi def link    goField              Identifier
                            
                            " Structs & Interfaces;
   18   0.000248   0.000172 if s:HighlightTypes()
                              syn match goTypeConstructor      /\<\w\+{\@=/
                              syn match goTypeDecl             /\<type\>/ nextgroup=goTypeName skipwhite skipnl
                              syn match goTypeName             /\w\+/ contained nextgroup=goDeclType,goTypeParams skipwhite skipnl
                              syn match goDeclType             /\<\%(interface\|struct\)\>/ skipwhite skipnl
                              hi def link     goReceiverType      Type
   18              0.000020 else
   18              0.000092   syn keyword goDeclType           struct interface
   18              0.000088   syn keyword goDeclaration        type
   18              0.000020 endif
   18              0.000039 hi def link     goTypeConstructor   Type
   18              0.000033 hi def link     goTypeName          Type
   18              0.000036 hi def link     goTypeDecl          Keyword
   18              0.000033 hi def link     goDeclType          Keyword
                            
                            " Variable Assignments
   18   0.000285   0.000199 if s:HighlightVariableAssignments()
                              syn match goVarAssign /\v[_.[:alnum:]]+(,\s*[_.[:alnum:]]+)*\ze(\s*([-^+|^\/%&]|\*|\<\<|\>\>|\&\^)?\=[^=])/
                              hi def link   goVarAssign         Special
   18              0.000019 endif
                            
                            " Variable Declarations
   18   0.000275   0.000194 if s:HighlightVariableDeclarations()
                              syn match goVarDefs /\v\w+(,\s*\w+)*\ze(\s*:\=)/
                              hi def link   goVarDefs           Special
   18              0.000018 endif
                            
                            " Build Constraints
   18   0.000254   0.000176 if s:HighlightBuildConstraints()
                              syn match   goBuildKeyword      display contained "+build\|go:build"
                              " Highlight the known values of GOOS, GOARCH, and other +build options.
                              syn keyword goBuildDirectives   contained
                                    \ android darwin dragonfly freebsd linux nacl netbsd openbsd plan9
                                    \ solaris windows 386 amd64 amd64p32 arm armbe arm64 arm64be ppc64
                                    \ ppc64le mips mipsle mips64 mips64le mips64p32 mips64p32le ppc
                                    \ s390 s390x sparc sparc64 cgo ignore race
                            
                              " Other words in the build directive are build tags not listed above, so
                              " avoid highlighting them as comments by using a matchgroup just for the
                              " start of the comment.
                              " The rs=s+2 option lets the \s*+build portion be part of the inner region
                              " instead of the matchgroup so it will be highlighted as a goBuildKeyword.
                              syn region  goBuildComment      matchgroup=goBuildCommentStart
                                    \ start="//\(\s*+build\s\|go:build\)"rs=s+2 end="$"
                                    \ contains=goBuildKeyword,goBuildDirectives
                              hi def link goBuildCommentStart Comment
                              hi def link goBuildDirectives   Type
                              hi def link goBuildKeyword      PreProc
   18              0.000019 endif
                            
   18   0.000819   0.000316 if s:HighlightBuildConstraints() || s:FoldEnable('package_comment')
                              " One or more line comments that are followed immediately by a "package"
                              " declaration are treated like package documentation, so these must be
                              " matched as comments to avoid looking like working build constraints.
                              " The he, me, and re options let the "package" itself be highlighted by
                              " the usual rules.
   18   0.001142   0.000665   exe 'syn region  goPackageComment    start=/\v(\/\/.*\n)+\s*package\s/'
                                    \ . ' end=/\v\n\s*package\s/he=e-8,me=e-8,re=e-8'
                                    \ . ' contains=@goCommentGroup,@Spell'
                                    \ . (s:FoldEnable('package_comment') ? ' fold' : '')
   18   0.000990   0.000617   exe 'syn region  goPackageComment    start=/\v^\s*\/\*.*\n(.*\n)*\s*\*\/\npackage\s/'
                                    \ . ' end=/\v\*\/\n\s*package\s/he=e-8,me=e-8,re=e-8'
                                    \ . ' contains=@goCommentGroup,@Spell'
                                    \ . (s:FoldEnable('package_comment') ? ' fold' : '')
   18              0.000049   hi def link goPackageComment    Comment
   18              0.000020 endif
                            
                            " :GoCoverage commands
   18              0.000049 hi def link goCoverageNormalText Comment
                            
                            " Search backwards for a global declaration to start processing the syntax.
                            "syn sync match goSync grouphere NONE /^\(const\|var\|type\|func\)\>/
                            
                            " There's a bug in the implementation of grouphere. For now, use the
                            " following as a more expensive/less precise workaround.
   18              0.000043 syn sync minlines=500
                            
   18              0.000081 let b:current_syntax = "go"
                            
   18   0.000255   0.000211 let &cpo = s:keepcpo
   18              0.000059 unlet s:keepcpo
                            
                            " vim: sw=2 sts=2 et

SCRIPT  /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/lsp_markdown.vim
Sourced 10 times
Total time:   0.401297
 Self time:   0.001278

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:     Markdown-like LSP docstrings
                            " Maintainer:   https://github.com/neovim/neovim
                            " URL:          http://neovim.io
                            " Remark:       Uses markdown syntax file
                            
                            " Source the default Nvim markdown syntax, not other random ones.
   10   0.400659   0.000639 execute 'source' expand('<sfile>:p:h') .. '/markdown.vim'
                            
   10              0.000025 syn cluster mkdNonListItem add=mkdEscape,mkdNbsp
                            
                            " Don't highlight invalid markdown syntax in LSP docstrings.
   10              0.000007 syn clear markdownError
                            
   10              0.000006 syn clear markdownEscape
   10              0.000084 syntax region markdownEscape matchgroup=markdownEscape start=/\\\ze[\\\x60*{}\[\]()#+\-,.!_>~|"$%&'\/:;<=?@^ ]/ end=/./ containedin=ALL keepend oneline concealends
                            
                            " Conceal backticks (which delimit code fragments).
                            " We ignore g:markdown_syntax_conceal here.
   10              0.000048 syn region markdownCode matchgroup=markdownCodeDelimiter start="`" end="`" keepend contains=markdownLineStart concealends
   10              0.000052 syn region markdownCode matchgroup=markdownCodeDelimiter start="`` \=" end=" \=``" keepend contains=markdownLineStart concealends
   10              0.000056 syn region markdownCode matchgroup=markdownCodeDelimiter start="^\s*````*.*$" end="^\s*````*\ze\s*$" keepend concealends
                            
                            " Highlight code fragments.
   10              0.000010 hi def link markdownCode Special
                            
                            " Conceal HTML entities.
   10              0.000034 syntax match mkdNbsp /&nbsp;/ conceal cchar= 
   10              0.000032 syntax match mkdLt /&lt;/  conceal cchar=<
   10              0.000032 syntax match mkdGt /&gt;/  conceal cchar=>
   10              0.000033 syntax match mkdAmp /&amp;/  conceal cchar=&
   10              0.000032 syntax match mkdQuot /&quot;/  conceal cchar="
                            
   10              0.000021 hi def link mkdEscape Special

SCRIPT  /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/markdown.vim
Sourced 10 times
Total time:   0.400004
 Self time:   0.008432

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:     Markdown
                            " Maintainer:   Tim Pope <https://github.com/tpope/vim-markdown>
                            " Filenames:    *.markdown
                            " Last Change:  2022 Oct 13
                            
   10              0.000052 if exists("b:current_syntax")
                              finish
   10              0.000012 endif
                            
   10              0.000035 if !exists('main_syntax')
   10              0.000069   let main_syntax = 'markdown'
   10              0.000015 endif
                            
   10              0.000045 if has('folding')
   10              0.000048   let s:foldmethod = &l:foldmethod
   10              0.000033   let s:foldtext = &l:foldtext
   10              0.000012 endif
   10              0.000035 let s:iskeyword = &l:iskeyword
                            
   10   0.386263   0.002451 runtime! syntax/html.vim
   10              0.000015 unlet! b:current_syntax
                            
   10              0.000027 if !exists('g:markdown_fenced_languages')
    1              0.000004   let g:markdown_fenced_languages = []
   10              0.000005 endif
   10              0.000028 let s:done_include = {}
   10              0.000066 for s:type in map(copy(g:markdown_fenced_languages),'matchstr(v:val,"[^=]*$")')
                              if has_key(s:done_include, matchstr(s:type,'[^.]*'))
                                continue
                              endif
                              if s:type =~ '\.'
                                let b:{matchstr(s:type,'[^.]*')}_subtype = matchstr(s:type,'\.\zs.*')
                              endif
                              syn case match
                              exe 'syn include @markdownHighlight_'.tr(s:type,'.','_').' syntax/'.matchstr(s:type,'[^.]*').'.vim'
                              unlet! b:current_syntax
                              let s:done_include[matchstr(s:type,'[^.]*')] = 1
   10              0.000011 endfor
   10              0.000011 unlet! s:type
   10              0.000012 unlet! s:done_include
                            
   10              0.000010 syn spell toplevel
   10              0.000036 if exists('s:foldmethod') && s:foldmethod !=# &l:foldmethod
                              let &l:foldmethod = s:foldmethod
                              unlet s:foldmethod
   10              0.000005 endif
   10              0.000026 if exists('s:foldtext') && s:foldtext !=# &l:foldtext
                              let &l:foldtext = s:foldtext
                              unlet s:foldtext
   10              0.000005 endif
   10              0.000018 if s:iskeyword !=# &l:iskeyword
                              let &l:iskeyword = s:iskeyword
   10              0.000005 endif
   10              0.000009 unlet s:iskeyword
                            
   10              0.000019 if !exists('g:markdown_minlines')
    1              0.000005   let g:markdown_minlines = 50
   10              0.000005 endif
   10              0.000055 execute 'syn sync minlines=' . g:markdown_minlines
   10              0.000009 syn sync linebreaks=1
   10              0.000007 syn case ignore
                            
   10              0.000060 syn match markdownValid '[<>]\c[a-z/$!]\@!' transparent contains=NONE
   10              0.000040 syn match markdownValid '&\%(#\=\w*;\)\@!' transparent contains=NONE
                            
   10              0.000046 syn match markdownLineStart "^[<@]\@!" nextgroup=@markdownBlock,htmlSpecialChar
                            
   10              0.000037 syn cluster markdownBlock contains=markdownH1,markdownH2,markdownH3,markdownH4,markdownH5,markdownH6,markdownBlockquote,markdownListMarker,markdownOrderedListMarker,markdownCodeBlock,markdownRule
   10              0.000042 syn cluster markdownInline contains=markdownLineBreak,markdownLinkText,markdownItalic,markdownBold,markdownCode,markdownEscape,@htmlTop,markdownError,markdownValid
                            
   10              0.000039 syn match markdownH1 "^.\+\n=\+$" contained contains=@markdownInline,markdownHeadingRule,markdownAutomaticLink
   10              0.000036 syn match markdownH2 "^.\+\n-\+$" contained contains=@markdownInline,markdownHeadingRule,markdownAutomaticLink
                            
   10              0.000022 syn match markdownHeadingRule "^[=-]\+$" contained
                            
   10              0.000061 syn region markdownH1 matchgroup=markdownH1Delimiter start=" \{,3}#\s"      end="#*\s*$" keepend oneline contains=@markdownInline,markdownAutomaticLink contained
   10              0.000050 syn region markdownH2 matchgroup=markdownH2Delimiter start=" \{,3}##\s"     end="#*\s*$" keepend oneline contains=@markdownInline,markdownAutomaticLink contained
   10              0.000047 syn region markdownH3 matchgroup=markdownH3Delimiter start=" \{,3}###\s"    end="#*\s*$" keepend oneline contains=@markdownInline,markdownAutomaticLink contained
   10              0.000046 syn region markdownH4 matchgroup=markdownH4Delimiter start=" \{,3}####\s"   end="#*\s*$" keepend oneline contains=@markdownInline,markdownAutomaticLink contained
   10              0.000043 syn region markdownH5 matchgroup=markdownH5Delimiter start=" \{,3}#####\s"  end="#*\s*$" keepend oneline contains=@markdownInline,markdownAutomaticLink contained
   10              0.000045 syn region markdownH6 matchgroup=markdownH6Delimiter start=" \{,3}######\s" end="#*\s*$" keepend oneline contains=@markdownInline,markdownAutomaticLink contained
                            
   10              0.000026 syn match markdownBlockquote ">\%(\s\|$\)" contained nextgroup=@markdownBlock
                            
   10              0.000064 syn region markdownCodeBlock start="^\n\( \{4,}\|\t\)" end="^\ze \{,3}\S.*$" keepend
                            
                            " TODO: real nesting
   10              0.000039 syn match markdownListMarker "\%(\t\| \{0,4\}\)[-*+]\%(\s\+\S\)\@=" contained
   10              0.000035 syn match markdownOrderedListMarker "\%(\t\| \{0,4}\)\<\d\+\.\%(\s\+\S\)\@=" contained
                            
   10              0.000026 syn match markdownRule "\* *\* *\*[ *]*$" contained
   10              0.000023 syn match markdownRule "- *- *-[ -]*$" contained
                            
   10              0.000028 syn match markdownLineBreak " \{2,\}$"
                            
   10              0.000083 syn region markdownIdDeclaration matchgroup=markdownLinkDelimiter start="^ \{0,3\}!\=\[" end="\]:" oneline keepend nextgroup=markdownUrl skipwhite
   10              0.000024 syn match markdownUrl "\S\+" nextgroup=markdownUrlTitle skipwhite contained
   10              0.000035 syn region markdownUrl matchgroup=markdownUrlDelimiter start="<" end=">" oneline keepend nextgroup=markdownUrlTitle skipwhite contained
   10              0.000028 syn region markdownUrlTitle matchgroup=markdownUrlTitleDelimiter start=+"+ end=+"+ keepend contained
   10              0.000027 syn region markdownUrlTitle matchgroup=markdownUrlTitleDelimiter start=+'+ end=+'+ keepend contained
   10              0.000026 syn region markdownUrlTitle matchgroup=markdownUrlTitleDelimiter start=+(+ end=+)+ keepend contained
                            
   10              0.000099 syn region markdownLinkText matchgroup=markdownLinkTextDelimiter start="!\=\[\%(\_[^][]*\%(\[\_[^][]*\]\_[^][]*\)*]\%( \=[[(]\)\)\@=" end="\]\%( \=[[(]\)\@=" nextgroup=markdownLink,markdownId skipwhite contains=@markdownInline,markdownLineStart
   10              0.000032 syn region markdownLink matchgroup=markdownLinkDelimiter start="(" end=")" contains=markdownUrl keepend contained
   10              0.000029 syn region markdownId matchgroup=markdownIdDelimiter start="\[" end="\]" keepend contained
   10              0.000055 syn region markdownAutomaticLink matchgroup=markdownUrlDelimiter start="<\%(\w\+:\|[[:alnum:]_+-]\+@\)\@=" end=">" keepend oneline
                            
   10              0.000020 let s:concealends = ''
   10              0.000044 if has('conceal') && get(g:, 'markdown_syntax_conceal', 1) == 1
   10              0.000014   let s:concealends = ' concealends'
   10              0.000006 endif
   10              0.000109 exe 'syn region markdownItalic matchgroup=markdownItalicDelimiter start="\*\S\@=" end="\S\@<=\*\|^$" skip="\\\*" contains=markdownLineStart,@Spell' . s:concealends
   10              0.000104 exe 'syn region markdownItalic matchgroup=markdownItalicDelimiter start="\w\@<!_\S\@=" end="\S\@<=_\w\@!\|^$" skip="\\_" contains=markdownLineStart,@Spell' . s:concealends
   10              0.000110 exe 'syn region markdownBold matchgroup=markdownBoldDelimiter start="\*\*\S\@=" end="\S\@<=\*\*\|^$" skip="\\\*" contains=markdownLineStart,markdownItalic,@Spell' . s:concealends
   10              0.000102 exe 'syn region markdownBold matchgroup=markdownBoldDelimiter start="\w\@<!__\S\@=" end="\S\@<=__\w\@!\|^$" skip="\\_" contains=markdownLineStart,markdownItalic,@Spell' . s:concealends
   10              0.000095 exe 'syn region markdownBoldItalic matchgroup=markdownBoldItalicDelimiter start="\*\*\*\S\@=" end="\S\@<=\*\*\*\|^$" skip="\\\*" contains=markdownLineStart,@Spell' . s:concealends
   10              0.000099 exe 'syn region markdownBoldItalic matchgroup=markdownBoldItalicDelimiter start="\w\@<!___\S\@=" end="\S\@<=___\w\@!\|^$" skip="\\_" contains=markdownLineStart,@Spell' . s:concealends
   10              0.000082 exe 'syn region markdownStrike matchgroup=markdownStrikeDelimiter start="\~\~\S\@=" end="\S\@<=\~\~\|^$" contains=markdownLineStart,@Spell' . s:concealends
                            
   10              0.000050 syn region markdownCode matchgroup=markdownCodeDelimiter start="`" end="`" keepend contains=markdownLineStart
   10              0.000048 syn region markdownCode matchgroup=markdownCodeDelimiter start="`` \=" end=" \=``" keepend contains=markdownLineStart
   10              0.000062 syn region markdownCodeBlock matchgroup=markdownCodeDelimiter start="^\s*\z(`\{3,\}\).*$" end="^\s*\z1\ze\s*$" keepend
   10              0.000056 syn region markdownCodeBlock matchgroup=markdownCodeDelimiter start="^\s*\z(\~\{3,\}\).*$" end="^\s*\z1\ze\s*$" keepend
                            
   10              0.000040 syn match markdownFootnote "\[^[^\]]\+\]"
   10              0.000038 syn match markdownFootnoteDefinition "^\[^[^\]]\+\]:"
                            
   10              0.000021 let s:done_include = {}
   10              0.000019 for s:type in g:markdown_fenced_languages
                              if has_key(s:done_include, matchstr(s:type,'[^.]*'))
                                continue
                              endif
                              exe 'syn region markdownHighlight_'.substitute(matchstr(s:type,'[^=]*$'),'\..*','','').' matchgroup=markdownCodeDelimiter start="^\s*\z(`\{3,\}\)\s*\%({.\{-}\.\)\='.matchstr(s:type,'[^=]*').'}\=\S\@!.*$" end="^\s*\z1\ze\s*$" keepend contains=@markdownHighlight_'.tr(matchstr(s:type,'[^=]*$'),'.','_') . s:concealends
                              exe 'syn region markdownHighlight_'.substitute(matchstr(s:type,'[^=]*$'),'\..*','','').' matchgroup=markdownCodeDelimiter start="^\s*\z(\~\{3,\}\)\s*\%({.\{-}\.\)\='.matchstr(s:type,'[^=]*').'}\=\S\@!.*$" end="^\s*\z1\ze\s*$" keepend contains=@markdownHighlight_'.tr(matchstr(s:type,'[^=]*$'),'.','_') . s:concealends
                              let s:done_include[matchstr(s:type,'[^.]*')] = 1
   10              0.000008 endfor
   10              0.000015 unlet! s:type
   10              0.000011 unlet! s:done_include
                            
   10              0.000036 if get(b:, 'markdown_yaml_head', get(g:, 'markdown_yaml_head', main_syntax ==# 'markdown'))
   10   0.009214   0.001454   syn include @markdownYamlTop syntax/yaml.vim
   10              0.000030   unlet! b:current_syntax
   10              0.000098   syn region markdownYamlHead start="\%^---$" end="^\%(---\|\.\.\.\)\s*$" keepend contains=@markdownYamlTop,@Spell
   10              0.000007 endif
                            
   10              0.000042 syn match markdownEscape "\\[][\\`*_{}()<>#+.!-]"
   10              0.000035 syn match markdownError "\w\@<=_\w\@="
                            
   10              0.000015 hi def link markdownH1                    htmlH1
   10              0.000010 hi def link markdownH2                    htmlH2
   10              0.000009 hi def link markdownH3                    htmlH3
   10              0.000009 hi def link markdownH4                    htmlH4
   10              0.000009 hi def link markdownH5                    htmlH5
   10              0.000009 hi def link markdownH6                    htmlH6
   10              0.000010 hi def link markdownHeadingRule           markdownRule
   10              0.000011 hi def link markdownH1Delimiter           markdownHeadingDelimiter
   10              0.000010 hi def link markdownH2Delimiter           markdownHeadingDelimiter
   10              0.000010 hi def link markdownH3Delimiter           markdownHeadingDelimiter
   10              0.000011 hi def link markdownH4Delimiter           markdownHeadingDelimiter
   10              0.000010 hi def link markdownH5Delimiter           markdownHeadingDelimiter
   10              0.000011 hi def link markdownH6Delimiter           markdownHeadingDelimiter
   10              0.000009 hi def link markdownHeadingDelimiter      Delimiter
   10              0.000012 hi def link markdownOrderedListMarker     markdownListMarker
   10              0.000011 hi def link markdownListMarker            htmlTagName
   10              0.000009 hi def link markdownBlockquote            Comment
   10              0.000009 hi def link markdownRule                  PreProc
                            
   10              0.000009 hi def link markdownFootnote              Typedef
   10              0.000009 hi def link markdownFootnoteDefinition    Typedef
                            
   10              0.000009 hi def link markdownLinkText              htmlLink
   10              0.000009 hi def link markdownIdDeclaration         Typedef
   10              0.000009 hi def link markdownId                    Type
   10              0.000009 hi def link markdownAutomaticLink         markdownUrl
   10              0.000009 hi def link markdownUrl                   Float
   10              0.000009 hi def link markdownUrlTitle              String
   10              0.000010 hi def link markdownIdDelimiter           markdownLinkDelimiter
   10              0.000009 hi def link markdownUrlDelimiter          htmlTag
   10              0.000010 hi def link markdownUrlTitleDelimiter     Delimiter
                            
   10              0.000009 hi def link markdownItalic                htmlItalic
   10              0.000010 hi def link markdownItalicDelimiter       markdownItalic
   10              0.000009 hi def link markdownBold                  htmlBold
   10              0.000009 hi def link markdownBoldDelimiter         markdownBold
   10              0.000011 hi def link markdownBoldItalic            htmlBoldItalic
   10              0.000011 hi def link markdownBoldItalicDelimiter   markdownBoldItalic
   10              0.000011 hi def link markdownStrike                htmlStrike
   10              0.000009 hi def link markdownStrikeDelimiter       markdownStrike
   10              0.000009 hi def link markdownCodeDelimiter         Delimiter
                            
   10              0.000009 hi def link markdownEscape                Special
   10              0.000009 hi def link markdownError                 Error
                            
   10              0.000019 let b:current_syntax = "markdown"
   10              0.000016 if main_syntax ==# 'markdown'
   10              0.000027   unlet main_syntax
   10              0.000006 endif
                            
                            " vim:set sw=2:

SCRIPT  /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/html.vim
Sourced 10 times
Total time:   0.383795
 Self time:   0.055825

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:		HTML
                            " Maintainer:		Doug Kearns <dougkearns@gmail.com>
                            " Previous Maintainers: Jorge Maldonado Ventura <jorgesumle@freakspot.net>
                            "			Claudio Fleiner <claudio@fleiner.com>
                            " Last Change:		2023 Nov 28
                            " 2024 Jul 30 by Vim Project: increase syn-sync-minlines to 250
                            
                            " See :help html.vim for some comments and a description of the options
                            
                            " quit when a syntax file was already loaded
   10              0.000057 if !exists("main_syntax")
                              if exists("b:current_syntax")
                                finish
                              endif
                              let main_syntax = 'html'
   10              0.000011 endif
                            
   10              0.000038 let s:cpo_save = &cpo
   10   0.000117   0.000093 set cpo&vim
                            
   10              0.000019 syntax spell toplevel
                            
   10   0.013340   0.002657 syn include @htmlXml syntax/xml.vim
   10              0.000023 unlet b:current_syntax
                            
   10              0.000015 syn case ignore
                            
                            " mark illegal characters
   10              0.000059 syn match htmlError "[<>&]"
                            
                            " tags
   10              0.000112 syn region  htmlString	 contained start=+"+ end=+"+ contains=htmlSpecialChar,javaScriptExpression,@htmlPreproc
   10              0.000085 syn region  htmlString	 contained start=+'+ end=+'+ contains=htmlSpecialChar,javaScriptExpression,@htmlPreproc
   10              0.000098 syn match   htmlValue	 contained "=[\t ]*[^'" \t>][^ \t>]*"hs=s+1   contains=javaScriptExpression,@htmlPreproc
   10              0.000420 syn region  htmlEndTag		   start=+</+	   end=+>+ contains=htmlTagN,htmlTagError
   10              0.000141 syn region  htmlTag		   start=+<[^/]+   end=+>+ fold contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent,htmlCssDefinition,@htmlPreproc,@htmlArgCluster
   10              0.000115 syn match   htmlTagN	 contained +<\s*[-a-zA-Z0-9]\++hs=s+1 contains=htmlTagName,htmlSpecialTagName,@htmlTagNameCluster
   10              0.000115 syn match   htmlTagN	 contained +</\s*[-a-zA-Z0-9]\++hs=s+2 contains=htmlTagName,htmlSpecialTagName,@htmlTagNameCluster
   10              0.000043 syn match   htmlTagError contained "[^>]<"ms=s+1
                            
                            " tag names
   10              0.000063 syn keyword htmlTagName contained address applet area a base basefont
   10              0.000047 syn keyword htmlTagName contained big blockquote br caption center
   10              0.000071 syn keyword htmlTagName contained cite code dd dfn dir div dl dt font
   10              0.000034 syn keyword htmlTagName contained form hr html img
   10              0.000046 syn keyword htmlTagName contained input isindex kbd li link map menu
   10              0.000050 syn keyword htmlTagName contained meta ol option param pre p samp span
   10              0.000058 syn keyword htmlTagName contained select small strike sub sup
   10              0.000055 syn keyword htmlTagName contained table td textarea th tr tt ul var xmp
   10              0.000110 syn match   htmlTagName contained "\<\%(b\|i\|u\|h[1-6]\|em\|strong\|head\|body\|title\)\>"
                            
                            " new html 4.0 tags
   10              0.000046 syn keyword htmlTagName contained abbr acronym bdo button col colgroup
   10              0.000040 syn keyword htmlTagName contained del fieldset iframe ins label legend
   10              0.000053 syn keyword htmlTagName contained object optgroup q s tbody tfoot thead
                            
                            " new html 5 tags
   10              0.000040 syn keyword htmlTagName contained article aside audio bdi canvas data
   10              0.000040 syn keyword htmlTagName contained datalist details dialog embed figcaption
   10              0.000041 syn keyword htmlTagName contained figure footer header hgroup keygen main
   10              0.000041 syn keyword htmlTagName contained mark menuitem meter nav output picture
   10              0.000045 syn keyword htmlTagName contained progress rb rp rt rtc ruby search section
   10              0.000043 syn keyword htmlTagName contained slot source summary template time track
   10              0.000025 syn keyword htmlTagName contained video wbr
                            
                            " svg and math tags
   10              0.000022 syn keyword htmlMathTagName contained math
   10              0.000023 syn keyword htmlSvgTagName  contained svg
                            
   10              0.000106 syn region  htmlMath start="<math>" end="</math>" contains=@htmlXml transparent keepend
   10              0.000149 syn region  htmlSvg  start="<svg>"  end="</svg>"  contains=@htmlXml transparent keepend
                            
   10              0.000037 syn cluster xmlTagHook	add=htmlMathTagName,htmlSvgTagName
                            
                            " legal arg names
   10              0.000027 syn keyword htmlArg contained action
   10              0.000042 syn keyword htmlArg contained align alink alt archive background bgcolor
   10              0.000049 syn keyword htmlArg contained border bordercolor cellpadding
   10              0.000053 syn keyword htmlArg contained cellspacing checked class clear code codebase color
   10              0.000048 syn keyword htmlArg contained cols colspan content coords enctype face
   10              0.000033 syn keyword htmlArg contained gutter height hspace id
   10              0.000031 syn keyword htmlArg contained link lowsrc marginheight
   10              0.000038 syn keyword htmlArg contained marginwidth maxlength method name prompt
   10              0.000043 syn keyword htmlArg contained rel rev rows rowspan scrolling selected shape
   10              0.000045 syn keyword htmlArg contained size src start target text type url
   10              0.000090 syn keyword htmlArg contained usemap ismap valign value vlink vspace width wrap
   10              0.000071 syn match   htmlArg contained "\<\%(http-equiv\|href\|title\)="me=e-1
                            
   10              0.000022 syn keyword htmlArg contained role
                            
                            " ARIA attributes {{{1
   10              0.000028 let s:aria =<< trim END
                              activedescendant
                              atomic
                              autocomplete
                              braillelabel
                              brailleroledescription
                              busy
                              checked
                              colcount
                              colindex
                              colindextext
                              colspan
                              controls
                              current
                              describedby
                              description
                              details
                              disabled
                              errormessage
                              expanded
                              flowto
                              haspopup
                              hidden
                              invalid
                              keyshortcuts
                              label
                              labelledby
                              level
                              live
                              modal
                              multiline
                              multiselectable
                              orientation
                              owns
                              placeholder
                              posinset
                              pressed
                              readonly
                              relevant
                              required
                              roledescription
                              rowcount
                              rowindex
                              rowindextext
                              rowspan
                              selected
                              setsize
                              sort
                              valuemax
                              valuemin
                              valuenow
                              valuetext
                            END
   10              0.000019 let s:aria_deprecated =<< trim END
                              dropeffect
                              grabbed
                            END
                            
   10              0.000087 call extend(s:aria, s:aria_deprecated)
   10              0.000841 exe 'syn match htmlArg contained "\%#=1\<aria-\%(' .. s:aria->join('\|') .. '\)\>"'
   10              0.000072 unlet s:aria s:aria_deprecated
                            " }}}
                            
                            " Netscape extensions
   10              0.000141 syn keyword htmlTagName contained frame noframes frameset nobr blink
   10              0.000061 syn keyword htmlTagName contained layer ilayer nolayer spacer
   10              0.000044 syn keyword htmlArg	contained frameborder noresize pagex pagey above below
   10              0.000047 syn keyword htmlArg	contained left top visibility clip id noshade
   10              0.000047 syn match   htmlArg	contained "\<z-index\>"
                            
                            " Microsoft extensions
   10              0.000023 syn keyword htmlTagName contained marquee
                            
                            " html 4.0 arg names
   10              0.000061 syn match   htmlArg contained "\<\%(accept-charset\|label\)\>"
   10              0.000051 syn keyword htmlArg contained abbr accept accesskey axis char charoff charset
   10              0.000050 syn keyword htmlArg contained cite classid codetype compact data datetime
   10              0.000044 syn keyword htmlArg contained declare defer dir disabled for frame
   10              0.000037 syn keyword htmlArg contained headers hreflang lang language longdesc
   10              0.000041 syn keyword htmlArg contained multiple nohref nowrap object profile readonly
   10              0.000061 syn keyword htmlArg contained rules scheme scope span standby style
   10              0.000036 syn keyword htmlArg contained summary tabindex valuetype version
                            
                            " html 5 arg names
   10              0.000037 syn keyword htmlArg contained allow autocapitalize as blocking decoding
   10              0.000035 syn keyword htmlArg contained enterkeyhint imagesizes imagesrcset inert
   10              0.000038 syn keyword htmlArg contained integrity is itemid itemprop itemref itemscope
   10              0.000038 syn keyword htmlArg contained itemtype loading nomodule ping playsinline
   10              0.000036 syn keyword htmlArg contained referrerpolicy slot allowfullscreen async
   10              0.000034 syn keyword htmlArg contained autocomplete autofocus autoplay challenge
   10              0.000042 syn keyword htmlArg contained contenteditable contextmenu controls crossorigin
   10              0.000044 syn keyword htmlArg contained default dirname download draggable dropzone form
   10              0.000036 syn keyword htmlArg contained formaction formenctype formmethod formnovalidate
   10              0.000041 syn keyword htmlArg contained formtarget hidden high icon inputmode keytype
   10              0.000048 syn keyword htmlArg contained kind list loop low max min minlength muted nonce
   10              0.000039 syn keyword htmlArg contained novalidate open optimum pattern placeholder
   10              0.000037 syn keyword htmlArg contained poster preload radiogroup required reversed
   10              0.000041 syn keyword htmlArg contained sandbox spellcheck sizes srcset srcdoc srclang
   10              0.000037 syn keyword htmlArg contained step title translate typemustmatch
   10              0.000108 syn match   htmlArg contained "\<data-\h\%(\w\|[-.]\)*\%(\_s*=\)\@="
                            
                            " special characters
   10              0.000269 syn match htmlSpecialChar "&#\=[0-9A-Za-z]\{1,32};"
                            
                            " Comments (the real ones or the old netscape ones)
   10              0.000052 if exists("html_wrong_comments")
                              syn region htmlComment	start=+<!--+	end=+--\s*>+	contains=@Spell
   10              0.000016 else
                              " The HTML 5.2 syntax 8.2.4.41: bogus comment is parser error; browser skips until next &gt
   10              0.000093   syn region htmlComment	start=+<!+	end=+>+		contains=htmlCommentError keepend
                              " Idem 8.2.4.42,51: Comment starts with <!-- and ends with -->
                              " Idem 8.2.4.43,44: Except <!--> and <!---> are parser errors
                              " Idem 8.2.4.52: dash-dash-bang (--!>) is error ignored by parser, also closes comment
   10              0.000131   syn region htmlComment matchgroup=htmlComment start=+<!--\%(-\?>\)\@!+	end=+--!\?>+	contains=htmlCommentNested,@htmlPreProc,@Spell keepend
                              " Idem 8.2.4.49: nested comment is parser error, except <!--> is all right
   10              0.000044   syn match htmlCommentNested contained "<!-->\@!"
   10              0.000045   syn match htmlCommentError  contained "[^><!]"
   10              0.000057 endif
   10              0.000079 syn region htmlComment	start=+<!DOCTYPE+	end=+>+ keepend
                            
                            " server-parsed commands
   10              0.000096 syn region htmlPreProc start=+<!--#+ end=+-->+ contains=htmlPreStmt,htmlPreError,htmlPreAttr
   10              0.000138 syn match htmlPreStmt contained "<!--#\%(config\|echo\|exec\|fsize\|flastmod\|include\|printenv\|set\|if\|elif\|else\|endif\|geoguide\)\>"
   10              0.000049 syn match htmlPreError contained "<!--#\S*"ms=s+4
   10              0.000084 syn match htmlPreAttr contained "\w\+=[^"]\S\+" contains=htmlPreProcAttrError,htmlPreProcAttrName
   10              0.000114 syn region htmlPreAttr contained start=+\w\+="+ skip=+\\\\\|\\"+ end=+"+ contains=htmlPreProcAttrName keepend
   10              0.000041 syn match htmlPreProcAttrError contained "\w\+="he=e-1
   10              0.000110 syn match htmlPreProcAttrName contained "\%(expr\|errmsg\|sizefmt\|timefmt\|var\|cgi\|cmd\|file\|virtual\|value\)="he=e-1
                            
   10              0.000047 if !exists("html_no_rendering")
                              " rendering
   10              0.000097   syn cluster htmlTop contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLink,javaScript,@htmlPreproc
                            
   10              0.000106   syn region htmlStrike start="<del\>" end="</del\_s*>"me=s-1 contains=@htmlTop
   10              0.000094   syn region htmlStrike start="<s\>" end="</s\_s*>"me=s-1 contains=@htmlTop
   10              0.000094   syn region htmlStrike start="<strike\>" end="</strike\_s*>"me=s-1 contains=@htmlTop
                            
   10              0.000125   syn region htmlBold start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderline,htmlBoldItalic
   10              0.000104   syn region htmlBold start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderline,htmlBoldItalic
   10              0.000087   syn region htmlBoldUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderlineItalic
   10              0.000099   syn region htmlBoldItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop,htmlBoldItalicUnderline
   10              0.000082   syn region htmlBoldItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop,htmlBoldItalicUnderline
   10              0.000075   syn region htmlBoldUnderlineItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop
   10              0.000081   syn region htmlBoldUnderlineItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop
   10              0.000080   syn region htmlBoldItalicUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlBoldUnderlineItalic
                            
   10              0.000090   syn region htmlUnderline start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineBold,htmlUnderlineItalic
   10              0.000081   syn region htmlUnderlineBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineBoldItalic
   10              0.000089   syn region htmlUnderlineBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineBoldItalic
   10              0.000078   syn region htmlUnderlineItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineItalicBold
   10              0.000084   syn region htmlUnderlineItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop,htmlUnderlineItalicBold
   10              0.000071   syn region htmlUnderlineItalicBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop
   10              0.000082   syn region htmlUnderlineItalicBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop
   10              0.000071   syn region htmlUnderlineBoldItalic contained start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop
   10              0.000074   syn region htmlUnderlineBoldItalic contained start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop
                            
   10              0.000101   syn region htmlItalic start="<i\>" end="</i\_s*>"me=s-1 contains=@htmlTop,htmlItalicBold,htmlItalicUnderline
   10              0.000086   syn region htmlItalic start="<em\>" end="</em\_s*>"me=s-1 contains=@htmlTop
   10              0.000081   syn region htmlItalicBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop,htmlItalicBoldUnderline
   10              0.000093   syn region htmlItalicBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop,htmlItalicBoldUnderline
   10              0.000152   syn region htmlItalicBoldUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop
   10              0.000079   syn region htmlItalicUnderline contained start="<u\>" end="</u\_s*>"me=s-1 contains=@htmlTop,htmlItalicUnderlineBold
   10              0.000071   syn region htmlItalicUnderlineBold contained start="<b\>" end="</b\_s*>"me=s-1 contains=@htmlTop
   10              0.000081   syn region htmlItalicUnderlineBold contained start="<strong\>" end="</strong\_s*>"me=s-1 contains=@htmlTop
                            
   10              0.000081   syn match htmlLeadingSpace "^\s\+" contained
   10              0.000174   syn region htmlLink start="<a\>\_[^>]*\<href\>" end="</a\_s*>"me=s-1 contains=@Spell,htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLeadingSpace,javaScript,@htmlPreproc
   10              0.000091   syn region htmlH1 start="<h1\>" end="</h1\_s*>"me=s-1 contains=@htmlTop
   10              0.000088   syn region htmlH2 start="<h2\>" end="</h2\_s*>"me=s-1 contains=@htmlTop
   10              0.000100   syn region htmlH3 start="<h3\>" end="</h3\_s*>"me=s-1 contains=@htmlTop
   10              0.000084   syn region htmlH4 start="<h4\>" end="</h4\_s*>"me=s-1 contains=@htmlTop
   10              0.000082   syn region htmlH5 start="<h5\>" end="</h5\_s*>"me=s-1 contains=@htmlTop
   10              0.000083   syn region htmlH6 start="<h6\>" end="</h6\_s*>"me=s-1 contains=@htmlTop
   10              0.000206   syn region htmlHead start="<head\>" end="</head\_s*>"me=s-1 end="<body\>"me=s-1 end="<h[1-6]\>"me=s-1 contains=htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLink,htmlTitle,javaScript,cssStyle,@htmlPreproc
   10              0.000128   syn region htmlTitle start="<title\>" end="</title\_s*>"me=s-1 contains=htmlTag,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,javaScript,@htmlPreproc
   10              0.000015 endif
                            
   10              0.000033 syn keyword htmlTagName		contained noscript
   10              0.000037 syn keyword htmlSpecialTagName	contained script style
   10              0.000057 if main_syntax != 'java' || exists("java_javascript")
                              " JAVA SCRIPT
   10   0.008554   0.002938   syn include @htmlJavaScript syntax/javascript.vim
   10              0.000025   unlet b:current_syntax
   10              0.000201   syn region  javaScript start=+<script\>\_[^>]*>+ keepend end=+</script\_[^>]*>+me=s-1 contains=@htmlJavaScript,htmlCssStyleComment,htmlScriptTag,@htmlPreproc
   10              0.000119   syn region  htmlScriptTag	contained start=+<script+ end=+>+ fold contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent
   10              0.000027   hi def link htmlScriptTag htmlTag
                            
                              " html events (i.e. arguments that include javascript commands)
   10              0.000051   if exists("html_extended_events")
                                syn region htmlEvent	contained start=+\<on\a\+\s*=[\t ]*'+ end=+'+ contains=htmlEventSQ
                                syn region htmlEvent	contained start=+\<on\a\+\s*=[\t ]*"+ end=+"+ contains=htmlEventDQ
   10              0.000014   else
   10              0.000087     syn region htmlEvent	contained start=+\<on\a\+\s*=[\t ]*'+ end=+'+ keepend contains=htmlEventSQ
   10              0.000086     syn region htmlEvent	contained start=+\<on\a\+\s*=[\t ]*"+ end=+"+ keepend contains=htmlEventDQ
   10              0.000034   endif
   10              0.000094   syn region htmlEventSQ	contained start=+'+ms=s+1 end=+'+me=s-1 contains=@htmlJavaScript
   10              0.000067   syn region htmlEventDQ	contained start=+"+ms=s+1 end=+"+me=s-1 contains=@htmlJavaScript
   10              0.000027   hi def link htmlEventSQ htmlEvent
   10              0.000021   hi def link htmlEventDQ htmlEvent
                            
                              " a javascript expression is used as an arg value
   10              0.000082   syn region  javaScriptExpression contained start=+&{+ keepend end=+};+ contains=@htmlJavaScript,@htmlPreproc
   10              0.000013 endif
                            
   10              0.000044 if main_syntax != 'java' || exists("java_vb")
                              " VB SCRIPT
   10   0.018167   0.002768   syn include @htmlVbScript syntax/vb.vim
   10              0.000038   unlet b:current_syntax
   10              0.000228   syn region  javaScript start=+<script \_[^>]*language *=\_[^>]*vbscript\_[^>]*>+ keepend end=+</script\_[^>]*>+me=s-1 contains=@htmlVbScript,htmlCssStyleComment,htmlScriptTag,@htmlPreproc
   10              0.000015 endif
                            
   10              0.000056 syn cluster htmlJavaScript	add=@htmlPreproc
                            
   10              0.000062 if main_syntax != 'java' || exists("java_css")
                              " embedded style sheets
   10              0.000033   syn keyword htmlArg		contained media
   10   0.298879   0.002644   syn include @htmlCss syntax/css.vim
   10              0.000016   unlet b:current_syntax
   10              0.000082   syn region cssStyle start=+<style+ keepend end=+</style>+ contains=@htmlCss,htmlTag,htmlEndTag,htmlCssStyleComment,@htmlPreproc
   10              0.000029   syn match htmlCssStyleComment contained "\%(<!--\|-->\)"
   10              0.023514   syn region htmlCssDefinition matchgroup=htmlArg start='style="' keepend matchgroup=htmlString end='"' contains=css.*Attr,css.*Prop,cssComment,cssLength,cssColor,cssURL,cssImportant,cssError,cssString,@htmlPreproc
   10              0.000027   hi def link htmlStyleArg htmlString
   10              0.000006 endif
                            
   10              0.000019 if main_syntax == "html"
                              " synchronizing (does not always work if a comment includes legal
                              " html tags, but doing it right would mean to always start
                              " at the first line, which is too slow)
                              syn sync match htmlHighlight groupthere NONE "<[/a-zA-Z]"
                              syn sync match htmlHighlight groupthere javaScript "<script"
                              syn sync match htmlHighlightSkip "^.*['\"].*$"
                              exe "syn sync minlines=" . get(g:, 'html_minlines', 250)
   10              0.000006 endif
                            
                            " Folding
                            " Originally by Ingo Karkat and Marcus Zanona
   10              0.000066 if get(g:, "html_syntax_folding", 0)
                              syn region htmlFold start="<\z(\<\%(area\|base\|br\|col\|command\|embed\|hr\|img\|input\|keygen\|link\|meta\|param\|source\|track\|wbr\>\)\@![a-z-]\+\>\)\%(\_s*\_[^/]\?>\|\_s\_[^>]*\_[^>/]>\)" end="</\z1\_s*>" fold transparent keepend extend containedin=htmlHead,htmlH\d
                              " fold comments (the real ones and the old Netscape ones)
                              if exists("html_wrong_comments")
                                syn region htmlComment start=+<!--+ end=+--\s*>\%(\n\s*<!--\)\@!+ contains=@Spell fold
                              endif
   10              0.000005 endif
                            
                            " The default highlighting.
   10              0.000011 hi def link htmlTag			Function
   10              0.000009 hi def link htmlEndTag			Identifier
   10              0.000008 hi def link htmlArg			Type
   10              0.000011 hi def link htmlTagName			htmlStatement
   10              0.000011 hi def link htmlSpecialTagName		Exception
   10              0.000010 hi def link htmlMathTagName		htmlTagName
   10              0.000009 hi def link htmlSvgTagName		htmlTagName
   10              0.000011 hi def link htmlValue			String
   10              0.000009 hi def link htmlSpecialChar		Special
                            
   10              0.000027 if !exists("html_no_rendering")
   10              0.000011   hi def link htmlH1			  Title
   10              0.000011   hi def link htmlH2			  htmlH1
   10              0.000009   hi def link htmlH3			  htmlH2
   10              0.000008   hi def link htmlH4			  htmlH3
   10              0.000008   hi def link htmlH5			  htmlH4
   10              0.000008   hi def link htmlH6			  htmlH5
   10              0.000010   hi def link htmlHead			  PreProc
   10              0.000008   hi def link htmlTitle			  Title
   10              0.000011   hi def link htmlBoldItalicUnderline	  htmlBoldUnderlineItalic
   10              0.000011   hi def link htmlUnderlineBold		  htmlBoldUnderline
   10              0.000010   hi def link htmlUnderlineItalicBold	  htmlBoldUnderlineItalic
   10              0.000012   hi def link htmlUnderlineBoldItalic	  htmlBoldUnderlineItalic
   10              0.000010   hi def link htmlItalicUnderline	  htmlUnderlineItalic
   10              0.000010   hi def link htmlItalicBold		  htmlBoldItalic
   10              0.000011   hi def link htmlItalicBoldUnderline	  htmlBoldUnderlineItalic
   10              0.000010   hi def link htmlItalicUnderlineBold	  htmlBoldUnderlineItalic
   10              0.000009   hi def link htmlLink			  Underlined
   10              0.000010   hi def link htmlLeadingSpace		  None
   10              0.000017   if !exists("html_my_rendering")
   10              0.000016     hi def htmlBold		   term=bold cterm=bold gui=bold
   10              0.000016     hi def htmlBoldUnderline	   term=bold,underline cterm=bold,underline gui=bold,underline
   10              0.000018     hi def htmlBoldItalic	   term=bold,italic cterm=bold,italic gui=bold,italic
   10              0.000014     hi def htmlBoldUnderlineItalic term=bold,italic,underline cterm=bold,italic,underline gui=bold,italic,underline
   10              0.000011     hi def htmlUnderline	   term=underline cterm=underline gui=underline
   10              0.000012     hi def htmlUnderlineItalic	   term=italic,underline cterm=italic,underline gui=italic,underline
   10              0.000010     hi def htmlItalic		   term=italic cterm=italic gui=italic
   10              0.000029     if v:version > 800 || v:version == 800 && has("patch1038")
   10              0.000013       hi def htmlStrike	term=strikethrough cterm=strikethrough gui=strikethrough
                                else
                                  hi def htmlStrike	term=underline cterm=underline gui=underline
   10              0.000005     endif
   10              0.000005   endif
   10              0.000005 endif
                            
   10              0.000009 hi def link htmlPreStmt		   PreProc
   10              0.000009 hi def link htmlPreError	   Error
   10              0.000009 hi def link htmlPreProc		   PreProc
   10              0.000009 hi def link htmlPreAttr		   String
   10              0.000010 hi def link htmlPreProcAttrName    PreProc
   10              0.000009 hi def link htmlPreProcAttrError   Error
   10              0.000009 hi def link htmlString		   String
   10              0.000009 hi def link htmlStatement	   Statement
   10              0.000009 hi def link htmlComment		   Comment
   10              0.000009 hi def link htmlCommentNested	   htmlError
   10              0.000009 hi def link htmlCommentError	   htmlError
   10              0.000008 hi def link htmlTagError	   htmlError
   10              0.000010 hi def link htmlEvent		   javaScript
   10              0.000008 hi def link htmlError		   Error
                            
   10              0.000008 hi def link javaScript		   Special
   10              0.000010 hi def link javaScriptExpression   javaScript
   10              0.000009 hi def link htmlCssStyleComment    Comment
   10              0.000008 hi def link htmlCssDefinition	   Special
                            
   10              0.000020 let b:current_syntax = "html"
                            
   10              0.000013 if main_syntax == 'html'
                              unlet main_syntax
   10              0.000005 endif
                            
   10   0.000061   0.000048 let &cpo = s:cpo_save
   10              0.000012 unlet s:cpo_save
                            
                            " vim: nowrap sw=2 sts=2 ts=8 noet fdm=marker:

SCRIPT  /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/xml.vim
Sourced 10 times
Total time:   0.010668
 Self time:   0.006720

count  total (s)   self (s)
                            " Vim syntax file
                            " Language: XML
                            " Maintainer: Christian Brabandt <cb@256bit.org>
                            " Repository: https://github.com/chrisbra/vim-xml-ftplugin
                            " Previous Maintainer: Johannes Zellner <johannes@zellner.org>
                            " Author: Paul Siegmann <pauls@euronet.nl>
                            " Last Changed:	Nov 03, 2019
                            " Filenames:	*.xml
                            " Last Change:
                            " 20190923 - Fix xmlEndTag to match xmlTag (vim/vim#884)
                            " 20190924 - Fix xmlAttribute property (amadeus/vim-xml@d8ce1c946)
                            " 20191103 - Enable spell checking globally
                            " 20210428 - Improve syntax synchronizing
                            
                            " CONFIGURATION:
                            "   syntax folding can be turned on by
                            "
                            "      let g:xml_syntax_folding = 1
                            "
                            "   before the syntax file gets loaded (e.g. in ~/.vimrc).
                            "   This might slow down syntax highlighting significantly,
                            "   especially for large files.
                            "
                            " CREDITS:
                            "   The original version was derived by Paul Siegmann from
                            "   Claudio Fleiner's html.vim.
                            "
                            " REFERENCES:
                            "   [1] http://www.w3.org/TR/2000/REC-xml-20001006
                            "   [2] http://www.w3.org/XML/1998/06/xmlspec-report-19980910.htm
                            "
                            "   as <hirauchi@kiwi.ne.jp> pointed out according to reference [1]
                            "
                            "   2.3 Common Syntactic Constructs
                            "   [4]    NameChar    ::=    Letter | Digit | '.' | '-' | '_' | ':' | CombiningChar | Extender
                            "   [5]    Name        ::=    (Letter | '_' | ':') (NameChar)*
                            "
                            " NOTE:
                            "   1) empty tag delimiters "/>" inside attribute values (strings)
                            "      confuse syntax highlighting.
                            "   2) for large files, folding can be pretty slow, especially when
                            "      loading a file the first time and viewoptions contains 'folds'
                            "      so that folds of previous sessions are applied.
                            "      Don't use 'foldmethod=syntax' in this case.
                            
                            
                            " Quit when a syntax file was already loaded
   10              0.000056 if exists("b:current_syntax")
                                finish
   10              0.000011 endif
                            
   10              0.000047 let s:xml_cpo_save = &cpo
   10   0.000088   0.000069 set cpo&vim
                            
   10              0.000016 syn case match
                            
                            " Allow spell checking in tag values,
                            " there is no syntax region for that,
                            " so enable spell checking in top-level elements
                            " <tag>This text is spell checked</tag>
   10              0.000016 syn spell toplevel
                            
                            " mark illegal characters
   10              0.000070 syn match xmlError "[<&]"
                            
                            " strings (inside tags) aka VALUES
                            "
                            " EXAMPLE:
                            "
                            " <tag foo.attribute = "value">
                            "                      ^^^^^^^
   10              0.000104 syn region  xmlString contained start=+"+ end=+"+ contains=xmlEntity,@Spell display
   10              0.000078 syn region  xmlString contained start=+'+ end=+'+ contains=xmlEntity,@Spell display
                            
                            
                            " punctuation (within attributes) e.g. <tag xml:foo.attribute ...>
                            "                                              ^   ^
                            " syn match   xmlAttribPunct +[-:._]+ contained display
   10              0.000074 syn match   xmlAttribPunct +[:.]+ contained display
                            
                            " no highlighting for xmlEqual (xmlEqual has no highlighting group)
   10              0.000048 syn match   xmlEqual +=+ display
                            
                            
                            " attribute, everything before the '='
                            "
                            " PROVIDES: @xmlAttribHook
                            "
                            " EXAMPLE:
                            "
                            " <tag foo.attribute = "value">
                            "      ^^^^^^^^^^^^^
                            "
   10              0.000164 syn match   xmlAttrib
                                \ +[-'"<]\@1<!\<[a-zA-Z:_][-.0-9a-zA-Z:_]*\>\%(['"]\@!\|$\)+
                                \ contained
                                \ contains=xmlAttribPunct,@xmlAttribHook
                                \ display
                            
                            
                            " namespace spec
                            "
                            " PROVIDES: @xmlNamespaceHook
                            "
                            " EXAMPLE:
                            "
                            " <xsl:for-each select = "lola">
                            "  ^^^
                            "
   10              0.000051 if exists("g:xml_namespace_transparent")
                            syn match   xmlNamespace
                                \ +\(<\|</\)\@2<=[^ /!?<>"':]\+[:]\@=+
                                \ contained
                                \ contains=@xmlNamespaceHook
                                \ transparent
                                \ display
   10              0.000014 else
   10              0.000105 syn match   xmlNamespace
                                \ +\(<\|</\)\@2<=[^ /!?<>"':]\+[:]\@=+
                                \ contained
                                \ contains=@xmlNamespaceHook
                                \ display
   10              0.000013 endif
                            
                            
                            " tag name
                            "
                            " PROVIDES: @xmlTagHook
                            "
                            " EXAMPLE:
                            "
                            " <tag foo.attribute = "value">
                            "  ^^^
                            "
   10              0.000111 syn match   xmlTagName
                                \ +\%(<\|</\)\@2<=[^ /!?<>"']\++
                                \ contained
                                \ contains=xmlNamespace,xmlAttribPunct,@xmlTagHook
                                \ display
                            
                            
   10              0.000044 if exists('g:xml_syntax_folding')
                            
                                " start tag
                                " use matchgroup=xmlTag to skip over the leading '<'
                                "
                                " PROVIDES: @xmlStartTagHook
                                "
                                " EXAMPLE:
                                "
                                " <tag id="whoops">
                                " s^^^^^^^^^^^^^^^e
                                "
                                syn region   xmlTag
                            	\ matchgroup=xmlTag start=+<[^ /!?<>"']\@=+
                            	\ matchgroup=xmlTag end=+>+
                            	\ contained
                            	\ contains=xmlError,xmlTagName,xmlAttrib,xmlEqual,xmlString,@xmlStartTagHook
                            
                            
                                " highlight the end tag
                                "
                                " PROVIDES: @xmlTagHook
                                " (should we provide a separate @xmlEndTagHook ?)
                                "
                                " EXAMPLE:
                                "
                                " </tag>
                                " ^^^^^^
                                "
                                syn region   xmlEndTag
                            	\ matchgroup=xmlTag start=+</[^ /!?<>"']\@=+
                            	\ matchgroup=xmlTag end=+>+
                            	\ contained
                            	\ contains=xmlTagName,xmlNamespace,xmlAttribPunct,@xmlTagHook
                            
                                " tag elements with syntax-folding.
                                " NOTE: NO HIGHLIGHTING -- highlighting is done by contained elements
                                "
                                " PROVIDES: @xmlRegionHook
                                "
                                " EXAMPLE:
                                "
                                " <tag id="whoops">
                                "   <!-- comment -->
                                "   <another.tag></another.tag>
                                "   <empty.tag/>
                                "   some data
                                " </tag>
                                "
                                syn region   xmlRegion
                            	\ start=+<\z([^ /!?<>"']\+\)+
                            	\ skip=+<!--\_.\{-}-->+
                            	\ end=+</\z1\_\s\{-}>+
                            	\ end=+/>+
                            	\ fold
                            	\ contains=xmlTag,xmlEndTag,xmlCdata,xmlRegion,xmlComment,xmlEntity,xmlProcessing,@xmlRegionHook,@Spell
                            	\ keepend
                            	\ extend
                            
   10              0.000014 else
                            
                                " no syntax folding:
                                " - contained attribute removed
                                " - xmlRegion not defined
                                "
   10              0.000147     syn region   xmlTag
                            	\ matchgroup=xmlTag start=+<[^ /!?<>"']\@=+
                            	\ matchgroup=xmlTag end=+>+
                            	\ contains=xmlError,xmlTagName,xmlAttrib,xmlEqual,xmlString,@xmlStartTagHook
                            
   10              0.000116     syn region   xmlEndTag
                            	\ matchgroup=xmlTag start=+</[^ /!?<>"']\@=+
                            	\ matchgroup=xmlTag end=+>+
                            	\ contains=xmlTagName,xmlNamespace,xmlAttribPunct,@xmlTagHook
                            
   10              0.000013 endif
                            
                            
                            " &entities; compare with dtd
   10              0.000066 syn match   xmlEntity                 "&[^; \t]*;" contains=xmlEntityPunct
   10              0.000043 syn match   xmlEntityPunct  contained "[&.;]"
                            
   10              0.000049 if exists('g:xml_syntax_folding')
                            
                                " The real comments (this implements the comments as defined by xml,
                                " but not all xml pages actually conform to it. Errors are flagged.
                                syn region  xmlComment
                            	\ start=+<!+
                            	\ end=+>+
                            	\ contains=xmlCommentStart,xmlCommentError
                            	\ extend
                            	\ fold
                            
   10              0.000012 else
                            
                                " no syntax folding:
                                " - fold attribute removed
                                "
   10              0.000086     syn region  xmlComment
                            	\ start=+<!+
                            	\ end=+>+
                            	\ contains=xmlCommentStart,xmlCommentError
                            	\ extend
                            
   10              0.000011 endif
                            
   10              0.000044 syn match xmlCommentStart   contained "<!" nextgroup=xmlCommentPart
   10              0.000041 syn keyword xmlTodo         contained TODO FIXME XXX
   10              0.000041 syn match   xmlCommentError contained "[^><!]"
   10              0.000112 syn region  xmlCommentPart
                                \ start=+--+
                                \ end=+--+
                                \ contained
                                \ contains=xmlTodo,@xmlCommentHook,@Spell
                            
                            
                            " CData sections
                            "
                            " PROVIDES: @xmlCdataHook
                            "
   10              0.000133 syn region    xmlCdata
                                \ start=+<!\[CDATA\[+
                                \ end=+]]>+
                                \ contains=xmlCdataStart,xmlCdataEnd,@xmlCdataHook,@Spell
                                \ keepend
                                \ extend
                            
                            " using the following line instead leads to corrupt folding at CDATA regions
                            " syn match    xmlCdata      +<!\[CDATA\[\_.\{-}]]>+  contains=xmlCdataStart,xmlCdataEnd,@xmlCdataHook
   10              0.000052 syn match    xmlCdataStart +<!\[CDATA\[+  contained contains=xmlCdataCdata
   10              0.000033 syn keyword  xmlCdataCdata CDATA          contained
   10              0.000036 syn match    xmlCdataEnd   +]]>+          contained
                            
                            
                            " Processing instructions
                            " This allows "?>" inside strings -- good idea?
   10              0.000099 syn region  xmlProcessing matchgroup=xmlProcessingDelim start="<?" end="?>" contains=xmlAttrib,xmlEqual,xmlString
                            
                            
   10              0.000042 if exists('g:xml_syntax_folding')
                            
                                " DTD -- we use dtd.vim here
                                syn region  xmlDocType matchgroup=xmlDocTypeDecl
                            	\ start="<!DOCTYPE"he=s+2,rs=s+2 end=">"
                            	\ fold
                            	\ contains=xmlDocTypeKeyword,xmlInlineDTD,xmlString
   10              0.000013 else
                            
                                " no syntax folding:
                                " - fold attribute removed
                                "
   10              0.000111     syn region  xmlDocType matchgroup=xmlDocTypeDecl
                            	\ start="<!DOCTYPE"he=s+2,rs=s+2 end=">"
                            	\ contains=xmlDocTypeKeyword,xmlInlineDTD,xmlString
                            
   10              0.000011 endif
                            
   10              0.000036 syn keyword xmlDocTypeKeyword contained DOCTYPE PUBLIC SYSTEM
   10              0.000084 syn region  xmlInlineDTD contained matchgroup=xmlDocTypeDecl start="\[" end="]" contains=@xmlDTD
   10   0.004581   0.000670 syn include @xmlDTD <sfile>:p:h/dtd.vim
   10              0.000022 unlet b:current_syntax
                            
                            
                            " synchronizing
                            
   10              0.000088 syn sync match xmlSyncComment grouphere xmlComment +<!--+
   10              0.000054 syn sync match xmlSyncComment groupthere NONE +-->+
                            
                            " The following is slow on large documents (and the doctype is optional
                            " syn sync match xmlSyncDT grouphere  xmlDocType +\_.\(<!DOCTYPE\)\@=+
                            " syn sync match xmlSyncDT groupthere  NONE       +]>+
                            
   10              0.000079 if exists('g:xml_syntax_folding')
                                syn sync match xmlSync grouphere   xmlRegion  +\_.\(<[^ /!?<>"']\+\)\@=+
                                " syn sync match xmlSync grouphere  xmlRegion "<[^ /!?<>"']*>"
                                syn sync match xmlSync groupthere  xmlRegion  +</[^ /!?<>"']\+>+
   10              0.000013 endif
                            
   10              0.000026 syn sync minlines=100 maxlines=200
                            
                            
                            " The default highlighting.
   10              0.000022 hi def link xmlTodo		Todo
   10              0.000021 hi def link xmlTag		Function
   10              0.000019 hi def link xmlTagName		Function
   10              0.000018 hi def link xmlEndTag		Identifier
   10              0.000043 if !exists("g:xml_namespace_transparent")
   10              0.000022     hi def link xmlNamespace	Tag
   10              0.000011 endif
   10              0.000018 hi def link xmlEntity		Statement
   10              0.000019 hi def link xmlEntityPunct	Type
                            
   10              0.000019 hi def link xmlAttribPunct	Comment
   10              0.000016 hi def link xmlAttrib		Type
                            
   10              0.000016 hi def link xmlString		String
   10              0.000017 hi def link xmlComment		Comment
   10              0.000019 hi def link xmlCommentStart	xmlComment
   10              0.000018 hi def link xmlCommentPart	Comment
   10              0.000018 hi def link xmlCommentError	Error
   10              0.000019 hi def link xmlError		Error
                            
   10              0.000019 hi def link xmlProcessingDelim	Comment
   10              0.000017 hi def link xmlProcessing	Type
                            
   10              0.000017 hi def link xmlCdata		String
   10              0.000018 hi def link xmlCdataCdata	Statement
   10              0.000017 hi def link xmlCdataStart	Type
   10              0.000017 hi def link xmlCdataEnd		Type
                            
   10              0.000018 hi def link xmlDocTypeDecl	Function
   10              0.000019 hi def link xmlDocTypeKeyword	Statement
   10              0.000017 hi def link xmlInlineDTD	Function
                            
   10              0.000033 let b:current_syntax = "xml"
                            
   10   0.000102   0.000083 let &cpo = s:xml_cpo_save
   10              0.000023 unlet s:xml_cpo_save
                            
                            " vim: ts=4

SCRIPT  /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/dtd.vim
Sourced 10 times
Total time:   0.003896
 Self time:   0.003852

count  total (s)   self (s)
                            " Vim syntax file
                            " Language: DTD (Document Type Definition for XML)
                            " Maintainer: Christian Brabandt <cb@256bit.org>
                            " Repository: https://github.com/chrisbra/vim-xml-ftplugin
                            " Previous Maintainer: Johannes Zellner <johannes@zellner.org>
                            " Author: Daniel Amyot <damyot@site.uottawa.ca>
                            " Last Changed:	Sept 24, 2019
                            " Filenames: *.dtd
                            "
                            " REFERENCES:
                            "   http://www.w3.org/TR/html40/
                            "   http://www.w3.org/TR/NOTE-html-970421
                            "
                            " TODO:
                            "   - improve synchronizing.
                            
   10              0.000083 if exists("b:current_syntax")
                                finish
   10              0.000011 endif
   10              0.000048 let s:dtd_cpo_save = &cpo
   10   0.000108   0.000086 set cpo&vim
                            
   10              0.000038 if !exists("dtd_ignore_case")
                                " I prefer having the case takes into consideration.
   10              0.000017     syn case match
                            else
                                syn case ignore
   10              0.000011 endif
                            
                            
                            " the following line makes the opening <! and
                            " closing > highlighted using 'dtdFunction'.
                            "
                            " PROVIDES: @dtdTagHook
                            "
   10              0.000226 syn region dtdTag matchgroup=dtdFunction
                                \ start=+<!+ end=+>+ matchgroup=NONE
                                \ contains=dtdTag,dtdTagName,dtdError,dtdComment,dtdString,dtdAttrType,dtdAttrDef,dtdEnum,dtdParamEntityInst,dtdParamEntityDecl,dtdCard,@dtdTagHook
                            
   10              0.000039 if !exists("dtd_no_tag_errors")
                                " mark everything as an error which starts with a <!
                                " and is not overridden later. If this is annoying,
                                " it can be switched off by setting the variable
                                " dtd_no_tag_errors.
   10              0.000063     syn region dtdError contained start=+<!+lc=2 end=+>+
   10              0.000013 endif
                            
                            " if this is a html like comment highlight also
                            " the opening <! and the closing > as Comment.
   10              0.000107 syn region dtdComment		start=+<![ \t]*--+ end=+-->+ contains=dtdTodo,@Spell
                            
                            
                            " proper DTD comment
   10              0.000109 syn region dtdComment contained start=+--+ end=+--+ contains=dtdTodo,@Spell
                            
                            
                            " Start tags (keywords). This is contained in dtdFunction.
                            " Note that everything not contained here will be marked
                            " as error.
   10              0.000120 syn match dtdTagName contained +<!\(ATTLIST\|DOCTYPE\|ELEMENT\|ENTITY\|NOTATION\|SHORTREF\|USEMAP\|\[\)+lc=2,hs=s+2
                            
                            
                            " wildcards and operators
   10              0.000035 syn match  dtdCard contained "|"
   10              0.000034 syn match  dtdCard contained ","
                            " evenutally overridden by dtdEntity
   10              0.000032 syn match  dtdCard contained "&"
   10              0.000032 syn match  dtdCard contained "?"
   10              0.000032 syn match  dtdCard contained "\*"
   10              0.000031 syn match  dtdCard contained "+"
                            
                            " ...and finally, special cases.
   10              0.000041 syn match  dtdCard      "ANY"
   10              0.000042 syn match  dtdCard      "EMPTY"
                            
   10              0.000059 if !exists("dtd_no_param_entities")
                            
                                " highlight parameter entity declarations
                                " and instances. Note that the closing `;'
                                " is optional.
                            
                                " instances
   10              0.000183     syn region dtdParamEntityInst oneline matchgroup=dtdParamEntityPunct
                            	\ start="%[-_a-zA-Z0-9.]\+"he=s+1,rs=s+1
                            	\ skip=+[-_a-zA-Z0-9.]+
                            	\ end=";\|\>"
                            	\ matchgroup=NONE contains=dtdParamEntityPunct
   10              0.000036     syn match  dtdParamEntityPunct contained "\."
                            
                                " declarations
                                " syn region dtdParamEntityDecl oneline matchgroup=dtdParamEntityDPunct start=+<!ENTITY % +lc=8 skip=+[-_a-zA-Z0-9.]+ matchgroup=NONE end="\>" contains=dtdParamEntityDPunct
   10              0.000087     syn match dtdParamEntityDecl +<!ENTITY % [-_a-zA-Z0-9.]*+lc=8 contains=dtdParamEntityDPunct
   10              0.000037     syn match  dtdParamEntityDPunct contained "%\|\."
                            
   10              0.000012 endif
                            
                            " &entities; compare with xml
   10              0.000088 syn match   dtdEntity		      "&[^; \t]*;" contains=dtdEntityPunct
   10              0.000040 syn match   dtdEntityPunct  contained "[&.;]"
                            
                            " Strings are between quotes
   10              0.000137 syn region dtdString    start=+"+ skip=+\\\\\|\\"+  end=+"+ contains=dtdAttrDef,dtdAttrType,dtdParamEntityInst,dtdEntity,dtdCard
   10              0.000119 syn region dtdString    start=+'+ skip=+\\\\\|\\'+  end=+'+ contains=dtdAttrDef,dtdAttrType,dtdParamEntityInst,dtdEntity,dtdCard
                            
                            " Enumeration of elements or data between parenthesis
                            "
                            " PROVIDES: @dtdEnumHook
                            "
   10              0.000098 syn region dtdEnum matchgroup=dtdType start="(" end=")" matchgroup=NONE contains=dtdEnum,dtdParamEntityInst,dtdCard,@dtdEnumHook
                            
                            "Attribute types
   10              0.000057 syn keyword dtdAttrType NMTOKEN  ENTITIES  NMTOKENS  ID  CDATA
   10              0.000034 syn keyword dtdAttrType IDREF  IDREFS
                            " ENTITY has to treated special for not overriding <!ENTITY
   10              0.000056 syn match   dtdAttrType +[^!]\<ENTITY+
                            
                            "Attribute Definitions
   10              0.000051 syn match  dtdAttrDef   "#REQUIRED"
   10              0.000056 syn match  dtdAttrDef   "#IMPLIED"
   10              0.000047 syn match  dtdAttrDef   "#FIXED"
                            
   10              0.000014 syn case match
                            " define some common keywords to mark TODO
                            " and important sections inside comments.
   10              0.000033 syn keyword dtdTodo contained TODO FIXME XXX
                            
   10              0.000031 syn sync lines=250
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
                            
                            " The default highlighting.
   10              0.000032 hi def link dtdFunction		Function
   10              0.000023 hi def link dtdTag		Normal
   10              0.000020 hi def link dtdType		Type
   10              0.000020 hi def link dtdAttrType		dtdType
   10              0.000020 hi def link dtdAttrDef		dtdType
   10              0.000024 hi def link dtdConstant		Constant
   10              0.000020 hi def link dtdString		dtdConstant
   10              0.000019 hi def link dtdEnum		dtdConstant
   10              0.000035 hi def link dtdCard		dtdFunction
                            
   10              0.000018 hi def link dtdEntity		Statement
   10              0.000019 hi def link dtdEntityPunct	dtdType
   10              0.000020 hi def link dtdParamEntityInst	dtdConstant
   10              0.000020 hi def link dtdParamEntityPunct	dtdType
   10              0.000021 hi def link dtdParamEntityDecl	dtdType
   10              0.000020 hi def link dtdParamEntityDPunct dtdComment
                            
   10              0.000016 hi def link dtdComment		Comment
   10              0.000020 hi def link dtdTagName		Statement
   10              0.000018 hi def link dtdError		Error
   10              0.000017 hi def link dtdTodo		Todo
                            
                            
   10   0.000125   0.000103 let &cpo = s:dtd_cpo_save
   10              0.000029 unlet s:dtd_cpo_save
                            
   10              0.000035 let b:current_syntax = "dtd"
                            
                            " vim: ts=8

SCRIPT  /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/javascript.vim
Sourced 10 times
Total time:   0.005599
 Self time:   0.005545

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:	JavaScript
                            " Maintainer:	Claudio Fleiner <claudio@fleiner.com>
                            " Updaters:	Scott Shattuck (ss) <ss@technicalpursuit.com>
                            " URL:		http://www.fleiner.com/vim/syntax/javascript.vim
                            " Changes:	(ss) added keywords, reserved words, and other identifiers
                            "		(ss) repaired several quoting and grouping glitches
                            "		(ss) fixed regex parsing issue with multiple qualifiers [gi]
                            "		(ss) additional factoring of keywords, globals, and members
                            " Last Change:	2022 Jun 09
                            " 		2013 Jun 12: adjusted javaScriptRegexpString (Kevin Locke)
                            " 		2018 Apr 14: adjusted javaScriptRegexpString (LongJohnCoder)
                            " 		2024 Aug 14: fix a few stylistic issues (#15480)
                            
                            " tuning parameters:
                            " unlet javaScript_fold
                            
   10              0.000071 if !exists("main_syntax")
                              " quit when a syntax file was already loaded
                              if exists("b:current_syntax")
                                finish
                              endif
                              let main_syntax = 'javascript'
   10              0.000058 elseif exists("b:current_syntax") && b:current_syntax == "javascript"
                              finish
   10              0.000011 endif
                            
   10              0.000047 let s:cpo_save = &cpo
   10   0.000131   0.000102 set cpo&vim
                            
                            
   10              0.000057 syn keyword javaScriptCommentTodo      TODO FIXME XXX TBD contained
   10              0.000105 syn match   javaScriptLineComment      "\/\/.*" contains=@Spell,javaScriptCommentTodo
   10              0.000088 syn match   javaScriptCommentSkip      "^[ \t]*\*\($\|[ \t]\+\)"
   10              0.000103 syn region  javaScriptComment	       start="/\*"  end="\*/" contains=@Spell,javaScriptCommentTodo
   10              0.000056 syn match   javaScriptSpecial	       "\\\d\d\d\|\\."
   10              0.000123 syn region  javaScriptStringD	       start=+"+  skip=+\\\\\|\\"+  end=+"\|$+	contains=javaScriptSpecial,@htmlPreproc
   10              0.000113 syn region  javaScriptStringS	       start=+'+  skip=+\\\\\|\\'+  end=+'\|$+	contains=javaScriptSpecial,@htmlPreproc
   10              0.000117 syn region  javaScriptStringT	       start=+`+  skip=+\\\\\|\\`+  end=+`+	contains=javaScriptSpecial,javaScriptEmbed,@htmlPreproc
                            
   10              0.000085 syn region  javaScriptEmbed	       start=+${+  end=+}+	contains=@javaScriptEmbededExpr
                            
                            " number handling by Christopher Leonard chris.j.leonard@gmx.com
   10              0.000052 syn match   javaScriptSpecialCharacter "'\\.'"
   10              0.000092 syn match   javaScriptNumber           "\<0[bB][0-1]\+\(_[0-1]\+\)*\>"
   10              0.000071 syn match   javaScriptNumber           "\<0[oO][0-7]\+\(_[0-7]\+\)*\>"
   10              0.000068 syn match   javaScriptNumber           "\<0\([0-7]\+\(_[0-7]\+\)*\)\?\>"
   10              0.000075 syn match   javaScriptNumber           "\<0[xX][0-9a-fA-F]\+\(_[0-9a-fA-F]\+\)*\>"
   10              0.000073 syn match   javaScriptNumber           "\<\d\+\(_\d\+\)*[eE][+-]\?\d\+\>"
   10              0.000119 syn match   javaScriptNumber           "\<[1-9]\d*\(_\d\+\)*\(\.\(\d\+\(_\d\+\)*\([eE][+-]\?\d\+\)\?\)\?\)\?\>"
   10              0.000091 syn match   javaScriptNumber           "\<\(\d\+\(_\d\+\)*\)\?\.\d\+\(_\d\+\)*\([eE][+-]\?\d\+\)\?\>"
   10              0.000087 syn match   javaScriptNumber           "\<\d\+\(_\d\+\)*\.\(\d\+\(_\d\+\)*\([eE][+-]\?\d\+\)\?\)\?\>"
   10              0.000334 syn region  javaScriptRegexpString     start=+[,(=+]\s*/[^/*]+ms=e-1,me=e-1 skip=+\\\\\|\\/+ end=+/[gimuys]\{0,2\}\s*$+ end=+/[gimuys]\{0,2\}\s*[+;.,)\]}]+me=e-1 end=+/[gimuys]\{0,2\}\s\+\/+me=e-1 contains=@htmlPreproc,javaScriptComment oneline
                            
   10              0.000051 syn keyword javaScriptConditional	if else switch
   10              0.000067 syn keyword javaScriptRepeat		while for do in of
   10              0.000039 syn keyword javaScriptBranch		break continue
   10              0.000052 syn keyword javaScriptOperator		new delete instanceof typeof
   10              0.000070 syn keyword javaScriptType		Array Boolean Date Function Number Object String RegExp
   10              0.000046 syn keyword javaScriptStatement		return with await yield
   10              0.000038 syn keyword javaScriptBoolean		true false
   10              0.000039 syn keyword javaScriptNull		null undefined
   10              0.000045 syn keyword javaScriptIdentifier	arguments this
   10              0.000044 syn keyword javaScriptLabel		case default
   10              0.000049 syn keyword javaScriptException		try catch finally throw
   10              0.000052 syn keyword javaScriptMessage		alert confirm prompt status
   10              0.000049 syn keyword javaScriptGlobal		self window top parent
   10              0.000048 syn keyword javaScriptMember		document event location 
   10              0.000053 syn keyword javaScriptDeprecated	escape unescape
   10              0.000182 syn keyword javaScriptReserved		abstract boolean byte char class const debugger double enum export extends final float from goto implements import int interface let long native package private protected public short super synchronized throws transient var volatile async
   10              0.000046 syn keyword javaScriptModifier  static
                            
   10              0.000075 syn cluster  javaScriptEmbededExpr	contains=javaScriptBoolean,javaScriptNull,javaScriptIdentifier,javaScriptStringD,javaScriptStringS,javaScriptStringT
                            
   10              0.000054 if exists("javaScript_fold")
                                syn match	javaScriptFunction	"\<function\>"
                                syn region	javaScriptFunctionFold	start="\<function\>.*[^};]$" end="^\z1}.*$" transparent fold keepend
                            
                                syn sync match javaScriptSync	grouphere javaScriptFunctionFold "\<function\>"
                                syn sync match javaScriptSync	grouphere NONE "^}"
                            
                                setlocal foldmethod=syntax
                                setlocal foldtext=getline(v:foldstart)
   10              0.000014 else
   10              0.000052     syn keyword javaScriptFunction	function
   10              0.000072     syn match	javaScriptBraces	   "[{}\[\]]"
   10              0.000060     syn match	javaScriptParens	   "[()]"
   10              0.000013 endif
                            
   10              0.000037 if main_syntax == "javascript"
                              syn sync fromstart
                              syn sync maxlines=100
                            
                              syn sync ccomment javaScriptComment
   10              0.000012 endif
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
   10              0.000033 hi def link javaScriptComment		Comment
   10              0.000022 hi def link javaScriptLineComment		Comment
   10              0.000022 hi def link javaScriptCommentTodo		Todo
   10              0.000020 hi def link javaScriptSpecial		Special
   10              0.000021 hi def link javaScriptStringS		String
   10              0.000018 hi def link javaScriptStringD		String
   10              0.000019 hi def link javaScriptStringT		String
   10              0.000024 hi def link javaScriptCharacter		Character
   10              0.000022 hi def link javaScriptSpecialCharacter	javaScriptSpecial
   10              0.000019 hi def link javaScriptNumber		Number
   10              0.000021 hi def link javaScriptConditional		Conditional
   10              0.000019 hi def link javaScriptRepeat		Repeat
   10              0.000019 hi def link javaScriptBranch		Conditional
   10              0.000019 hi def link javaScriptOperator		Operator
   10              0.000019 hi def link javaScriptType			Type
   10              0.000019 hi def link javaScriptStatement		Statement
   10              0.000019 hi def link javaScriptFunction		Keyword
   10              0.000018 hi def link javaScriptBraces		Function
   10              0.000020 hi def link javaScriptError		Error
   10              0.000021 hi def link javaScrParenError		javaScriptError
   10              0.000019 hi def link javaScriptNull			Keyword
   10              0.000018 hi def link javaScriptBoolean		Boolean
   10              0.000020 hi def link javaScriptRegexpString		String
                            
   10              0.000021 hi def link javaScriptIdentifier		Identifier
   10              0.000018 hi def link javaScriptLabel		Label
   10              0.000019 hi def link javaScriptException		Exception
   10              0.000019 hi def link javaScriptMessage		Keyword
   10              0.000018 hi def link javaScriptGlobal		Keyword
   10              0.000018 hi def link javaScriptMember		Keyword
   10              0.000019 hi def link javaScriptDeprecated		Exception 
   10              0.000018 hi def link javaScriptReserved		Keyword
   10              0.000020 hi def link javaScriptModifier		StorageClass
   10              0.000027 hi def link javaScriptDebug		Debug
   10              0.000020 hi def link javaScriptConstant		Label
   10              0.000053 hi def link javaScriptEmbed		Special
                            
                            
                            
   10              0.000042 let b:current_syntax = "javascript"
   10              0.000030 if main_syntax == 'javascript'
                              unlet main_syntax
   10              0.000011 endif
   10   0.000128   0.000103 let &cpo = s:cpo_save
   10              0.000026 unlet s:cpo_save
                            
                            " vim: ts=8

SCRIPT  /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/vb.vim
Sourced 10 times
Total time:   0.015367
 Self time:   0.015367

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:     Visual Basic
                            " Maintainer:   Doug Kearns <dougkearns@gmail.com>
                            " Former Maintainer:    Tim Chase <vb.vim@tim.thechases.com>
                            " Former Maintainer:    Robert M. Cortopassi <cortopar@mindspring.com>
                            "       (tried multiple times to contact, but email bounced)
                            " Last Change:
                            "   2021 Nov 26  Incorporated additions from Doug Kearns
                            "   2005 May 25  Synched with work by Thomas Barthel
                            "   2004 May 30  Added a few keywords
                            
                            " This was thrown together after seeing numerous requests on the
                            " VIM and VIM-DEV mailing lists.  It is by no means complete.
                            " Send comments, suggestions and requests to the maintainer.
                            
                            " quit when a syntax file was already loaded
   10              0.000055 if exists("b:current_syntax")
                                    finish
   10              0.000011 endif
                            
                            " VB is case insensitive
   10              0.000018 syn case ignore
                            
   10              0.000077 syn keyword vbConditional If Then ElseIf Else Select Case
                            
   10              0.000058 syn keyword vbOperator AddressOf And ByRef ByVal Eqv Imp In
   10              0.000052 syn keyword vbOperator Is Like Mod Not Or To Xor
                            
   10              0.000067 syn match vbOperator "[()+.,\-/*=&]"
   10              0.000050 syn match vbOperator "[<>]=\="
   10              0.000043 syn match vbOperator "<>"
   10              0.000049 syn match vbOperator "\s\+_$"
                            
   10              0.000037 syn keyword vbBoolean  True False
   10              0.000033 syn keyword vbConst Null Nothing
                            
   10              0.000047 syn keyword vbRepeat Do For ForEach Loop Next
   10              0.000046 syn keyword vbRepeat Step To Until Wend While
                            
   10              0.000041 syn keyword vbEvents AccessKeyPress Activate ActiveRowChanged
   10              0.000042 syn keyword vbEvents AfterAddFile AfterChangeFileName AfterCloseFile
   10              0.000038 syn keyword vbEvents AfterColEdit AfterColUpdate AfterDelete
   10              0.000040 syn keyword vbEvents AfterInsert AfterLabelEdit AfterRemoveFile
   10              0.000036 syn keyword vbEvents AfterUpdate AfterWriteFile AmbientChanged
   10              0.000035 syn keyword vbEvents ApplyChanges Associate AsyncProgress
   10              0.000039 syn keyword vbEvents AsyncReadComplete AsyncReadProgress AxisActivated
   10              0.000034 syn keyword vbEvents AxisLabelActivated AxisLabelSelected
   10              0.000038 syn keyword vbEvents AxisLabelUpdated AxisSelected AxisTitleActivated
   10              0.000037 syn keyword vbEvents AxisTitleSelected AxisTitleUpdated AxisUpdated
   10              0.000036 syn keyword vbEvents BeforeClick BeforeColEdit BeforeColUpdate
   10              0.000035 syn keyword vbEvents BeforeConnect BeforeDelete BeforeInsert
   10              0.000037 syn keyword vbEvents BeforeLabelEdit BeforeLoadFile BeforeUpdate
   10              0.000034 syn keyword vbEvents BeginRequest BeginTrans ButtonClick
   10              0.000038 syn keyword vbEvents ButtonCompleted ButtonDropDown ButtonGotFocus
   10              0.000044 syn keyword vbEvents ButtonLostFocus CallbackKeyDown Change Changed
   10              0.000045 syn keyword vbEvents ChartActivated ChartSelected ChartUpdated Click
   10              0.000051 syn keyword vbEvents Close CloseQuery CloseUp ColEdit ColResize
   10              0.000044 syn keyword vbEvents Collapse ColumnClick CommitTrans Compare
   10              0.000038 syn keyword vbEvents ConfigChageCancelled ConfigChanged
   10              0.000042 syn keyword vbEvents ConfigChangedCancelled Connect ConnectionRequest
   10              0.000037 syn keyword vbEvents CurrentRecordChanged DECommandAdded
   10              0.000038 syn keyword vbEvents DECommandPropertyChanged DECommandRemoved
   10              0.000038 syn keyword vbEvents DEConnectionAdded DEConnectionPropertyChanged
   10              0.000038 syn keyword vbEvents DEConnectionRemoved DataArrival DataChanged
   10              0.000040 syn keyword vbEvents DataUpdated DateClicked DblClick Deactivate
   10              0.000038 syn keyword vbEvents DevModeChange DeviceArrival DeviceOtherEvent
   10              0.000036 syn keyword vbEvents DeviceQueryRemove DeviceQueryRemoveFailed
   10              0.000035 syn keyword vbEvents DeviceRemoveComplete DeviceRemovePending
   10              0.000039 syn keyword vbEvents Disconnect DisplayChanged Dissociate
   10              0.000043 syn keyword vbEvents DoGetNewFileName Done DonePainting DownClick
   10              0.000046 syn keyword vbEvents DragDrop DragOver DropDown EditProperty EditQuery
   10              0.000046 syn keyword vbEvents EndRequest EnterCell EnterFocus ExitFocus Expand
   10              0.000041 syn keyword vbEvents FontChanged FootnoteActivated FootnoteSelected
   10              0.000044 syn keyword vbEvents FootnoteUpdated Format FormatSize GotFocus
   10              0.000039 syn keyword vbEvents HeadClick HeightChanged Hide InfoMessage
   10              0.000036 syn keyword vbEvents IniProperties InitProperties Initialize
   10              0.000039 syn keyword vbEvents ItemActivated ItemAdded ItemCheck ItemClick
   10              0.000035 syn keyword vbEvents ItemReloaded ItemRemoved ItemRenamed
   10              0.000046 syn keyword vbEvents ItemSeletected KeyDown KeyPress KeyUp LeaveCell
   10              0.000055 syn keyword vbEvents LegendActivated LegendSelected LegendUpdated
   10              0.000038 syn keyword vbEvents LinkClose LinkError LinkExecute LinkNotify
   10              0.000042 syn keyword vbEvents LinkOpen Load LostFocus MouseDown MouseMove
   10              0.000082 syn keyword vbEvents MouseUp NodeCheck NodeClick OLECompleteDrag
   10              0.000046 syn keyword vbEvents OLEDragDrop OLEDragOver OLEGiveFeedback OLESetData
   10              0.000044 syn keyword vbEvents OLEStartDrag ObjectEvent ObjectMove OnAddNew
   10              0.000045 syn keyword vbEvents OnComm Paint PanelClick PanelDblClick PathChange
   10              0.000036 syn keyword vbEvents PatternChange PlotActivated PlotSelected
   10              0.000038 syn keyword vbEvents PlotUpdated PointActivated PointLabelActivated
   10              0.000039 syn keyword vbEvents PointLabelSelected PointLabelUpdated PointSelected
   10              0.000036 syn keyword vbEvents PointUpdated PowerQuerySuspend PowerResume
   10              0.000037 syn keyword vbEvents PowerStatusChanged PowerSuspend ProcessTag
   10              0.000038 syn keyword vbEvents ProcessingTimeout QueryChangeConfig QueryClose
   10              0.000037 syn keyword vbEvents QueryComplete QueryCompleted QueryTimeout
   10              0.000038 syn keyword vbEvents QueryUnload ReadProperties RepeatedControlLoaded
   10              0.000032 syn keyword vbEvents RepeatedControlUnloaded Reposition
   10              0.000038 syn keyword vbEvents RequestChangeFileName RequestWriteFile Resize
   10              0.000037 syn keyword vbEvents ResultsChanged RetainedProject RollbackTrans
   10              0.000036 syn keyword vbEvents RowColChange RowCurrencyChange RowResize
   10              0.000045 syn keyword vbEvents RowStatusChanged Scroll SelChange SelectionChanged
   10              0.000038 syn keyword vbEvents SendComplete SendProgress SeriesActivated
   10              0.000043 syn keyword vbEvents SeriesSelected SeriesUpdated SettingChanged Show
   10              0.000041 syn keyword vbEvents SplitChange Start StateChanged StatusUpdate
   10              0.000042 syn keyword vbEvents SysColorsChanged Terminate TimeChanged Timer
   10              0.000038 syn keyword vbEvents TitleActivated TitleSelected TitleUpdated
   10              0.000033 syn keyword vbEvents UnboundAddData UnboundDeleteRow
   10              0.000038 syn keyword vbEvents UnboundGetRelativeBookmark UnboundReadData
   10              0.000044 syn keyword vbEvents UnboundWriteData Unformat Unload UpClick Updated
   10              0.000035 syn keyword vbEvents UserEvent Validate ValidationError
   10              0.000038 syn keyword vbEvents VisibleRecordChanged WillAssociate WillChangeData
   10              0.000052 syn keyword vbEvents WillDissociate WillExecute WillUpdateRows
   10              0.000026 syn keyword vbEvents WriteProperties
                            
                            
   10              0.000066 syn keyword vbFunction Abs Array Asc AscB AscW Atn Avg BOF CBool CByte
   10              0.000067 syn keyword vbFunction CCur CDate CDbl CInt CLng CSng CStr CVDate CVErr
   10              0.000060 syn keyword vbFunction CVar CallByName Cdec Choose Chr ChrB ChrW Command
   10              0.000058 syn keyword vbFunction Cos Count CreateObject CurDir DDB Date DateAdd
   10              0.000077 syn keyword vbFunction DateDiff DatePart DateSerial DateValue Day Dir
   10              0.000055 syn keyword vbFunction DoEvents EOF Environ Error Exp FV FileAttr
   10              0.000047 syn keyword vbFunction FileDateTime FileLen FilterFix Fix Format
   10              0.000041 syn keyword vbFunction FormatCurrency FormatDateTime FormatNumber
   10              0.000275 syn keyword vbFunction FormatPercent FreeFile GetAllStrings GetAttr
   10              0.000049 syn keyword vbFunction GetAutoServerSettings GetObject GetSetting Hex
   10              0.000053 syn keyword vbFunction Hour IIf IMEStatus IPmt InStr Input InputB
   10              0.000050 syn keyword vbFunction InputBox InstrB Int IsArray IsDate IsEmpty IsError
   10              0.000047 syn keyword vbFunction IsMissing IsNull IsNumeric IsObject Join LBound
   10              0.000068 syn keyword vbFunction LCase LOF LTrim Left LeftB Len LenB LoadPicture
   10              0.000045 syn keyword vbFunction LoadResData LoadResPicture LoadResString Loc Log
   10              0.000052 syn keyword vbFunction MIRR Max Mid MidB Min Minute Month MonthName
   10              0.000058 syn keyword vbFunction MsgBox NPV NPer Now Oct PPmt PV Partition Pmt
   10              0.000051 syn keyword vbFunction QBColor RGB RTrim Rate Replace Right RightB Rnd
   10              0.000062 syn keyword vbFunction Round SLN SYD Second Seek Sgn Shell Sin Space Spc
   10              0.000051 syn keyword vbFunction Split Sqr StDev StDevP Str StrComp StrConv
   10              0.000054 syn keyword vbFunction StrReverse String Sum Switch Tab Tan Time
   10              0.000050 syn keyword vbFunction TimeSerial TimeValue Timer Trim TypeName UBound
   10              0.000048 syn keyword vbFunction UCase Val Var VarP VarType Weekday WeekdayName
   10              0.000025 syn keyword vbFunction Year
                            
   10              0.000048 syn keyword vbMethods AboutBox Accept Activate Add AddCustom AddFile
   10              0.000041 syn keyword vbMethods AddFromFile AddFromGuid AddFromString
   10              0.000045 syn keyword vbMethods AddFromTemplate AddItem AddNew AddToAddInToolbar
   10              0.000039 syn keyword vbMethods AddToolboxProgID Append AppendAppendChunk
   10              0.000045 syn keyword vbMethods AppendChunk Arrange Assert AsyncRead BatchUpdate
   10              0.000042 syn keyword vbMethods BeginQueryEdit BeginTrans Bind BuildPath
   10              0.000043 syn keyword vbMethods CanPropertyChange Cancel CancelAsyncRead
   10              0.000045 syn keyword vbMethods CancelBatch CancelUpdate CaptureImage CellText
   10              0.000047 syn keyword vbMethods CellValue Circle Clear ClearFields ClearSel
   10              0.000083 syn keyword vbMethods ClearSelCols ClearStructure Clone Close Cls
   10              0.000047 syn keyword vbMethods ColContaining CollapseAll ColumnSize CommitTrans
   10              0.000051 syn keyword vbMethods CompactDatabase Compose Connect Copy CopyFile
   10              0.000044 syn keyword vbMethods CopyFolder CopyQueryDef Count CreateDatabase
   10              0.000039 syn keyword vbMethods CreateDragImage CreateEmbed CreateField
   10              0.000044 syn keyword vbMethods CreateFolder CreateGroup CreateIndex CreateLink
   10              0.000041 syn keyword vbMethods CreatePreparedStatement CreatePropery CreateQuery
   10              0.000040 syn keyword vbMethods CreateQueryDef CreateRelation CreateTableDef
   10              0.000040 syn keyword vbMethods CreateTextFile CreateToolWindow CreateUser
   10              0.000042 syn keyword vbMethods CreateWorkspace Customize Cut Delete
   10              0.000041 syn keyword vbMethods DeleteColumnLabels DeleteColumns DeleteFile
   10              0.000039 syn keyword vbMethods DeleteFolder DeleteLines DeleteRowLabels
   10              0.000045 syn keyword vbMethods DeleteRows DeselectAll DesignerWindow DoVerb Drag
   10              0.000051 syn keyword vbMethods Draw DriveExists Edit EditCopy EditPaste EndDoc
   10              0.000044 syn keyword vbMethods EnsureVisible EstablishConnection Execute Exists
   10              0.000049 syn keyword vbMethods Expand Export ExportReport ExtractIcon Fetch
   10              0.000045 syn keyword vbMethods FetchVerbs FileExists Files FillCache Find
   10              0.000046 syn keyword vbMethods FindFirst FindItem FindLast FindNext FindPrevious
   10              0.000043 syn keyword vbMethods FolderExists Forward GetAbsolutePathName
   10              0.000045 syn keyword vbMethods GetBaseName GetBookmark GetChunk GetClipString
   10              0.000047 syn keyword vbMethods GetData GetDrive GetDriveName GetFile GetFileName
   10              0.000043 syn keyword vbMethods GetFirstVisible GetFolder GetFormat GetHeader
   10              0.000042 syn keyword vbMethods GetLineFromChar GetNumTicks GetParentFolderName
   10              0.000038 syn keyword vbMethods GetRows GetSelectedPart GetSelection
   10              0.000040 syn keyword vbMethods GetSpecialFolder GetTempName GetText
   10              0.000048 syn keyword vbMethods GetVisibleCount GoBack GoForward Hide HitTest
   10              0.000045 syn keyword vbMethods HoldFields Idle Import InitializeLabels Insert
   10              0.000038 syn keyword vbMethods InsertColumnLabels InsertColumns InsertFile
   10              0.000037 syn keyword vbMethods InsertLines InsertObjDlg InsertRowLabels
   10              0.000050 syn keyword vbMethods InsertRows Item Keys KillDoc Layout Line Lines
   10              0.000043 syn keyword vbMethods LinkExecute LinkPoke LinkRequest LinkSend Listen
   10              0.000059 syn keyword vbMethods LoadFile LoadResData LoadResPicture LoadResString
   10              0.000039 syn keyword vbMethods LogEvent MakeCompileFile MakeCompiledFile
   10              0.000042 syn keyword vbMethods MakeReplica MoreResults Move MoveData MoveFile
   10              0.000039 syn keyword vbMethods MoveFirst MoveFolder MoveLast MoveNext
   10              0.000045 syn keyword vbMethods MovePrevious NavigateTo NewPage NewPassword
   10              0.000046 syn keyword vbMethods NextRecordset OLEDrag OnAddinsUpdate OnConnection
   10              0.000040 syn keyword vbMethods OnDisconnection OnStartupComplete Open
   10              0.000041 syn keyword vbMethods OpenAsTextStream OpenConnection OpenDatabase
   10              0.000044 syn keyword vbMethods OpenQueryDef OpenRecordset OpenResultset OpenURL
   10              0.000044 syn keyword vbMethods Overlay PSet PaintPicture PastSpecialDlg Paste
   10              0.000043 syn keyword vbMethods PeekData Play Point PopulatePartial PopupMenu
   10              0.000058 syn keyword vbMethods Print PrintForm PrintReport PropertyChanged Quit
   10              0.000037 syn keyword vbMethods Raise RandomDataFill RandomFillColumns
   10              0.000044 syn keyword vbMethods RandomFillRows ReFill Read ReadAll ReadFromFile
   10              0.000069 syn keyword vbMethods ReadLine ReadProperty Rebind Refresh RefreshLink
   10              0.000040 syn keyword vbMethods RegisterDatabase ReleaseInstance Reload Remove
   10              0.000043 syn keyword vbMethods RemoveAddInFromToolbar RemoveAll RemoveItem Render
   10              0.000044 syn keyword vbMethods RepairDatabase ReplaceLine Reply ReplyAll Requery
   10              0.000037 syn keyword vbMethods ResetCustom ResetCustomLabel ResolveName
   10              0.000044 syn keyword vbMethods RestoreToolbar Resync Rollback RollbackTrans
   10              0.000044 syn keyword vbMethods RowBookmark RowContaining RowTop Save SaveAs
   10              0.000044 syn keyword vbMethods SaveFile SaveToFile SaveToOle1File SaveToolbar
   10              0.000049 syn keyword vbMethods Scale ScaleX ScaleY Scroll SelPrint SelectAll
   10              0.000048 syn keyword vbMethods SelectPart Send SendData Set SetAutoServerSettings
   10              0.000046 syn keyword vbMethods SetData SetFocus SetOption SetSelection SetSize
   10              0.000046 syn keyword vbMethods SetText SetViewport Show ShowColor ShowFont
   10              0.000040 syn keyword vbMethods ShowHelp ShowOpen ShowPrinter ShowSave
   10              0.000055 syn keyword vbMethods ShowWhatsThis SignOff SignOn Size Skip SkipLine
   10              0.000044 syn keyword vbMethods Span Split SplitContaining StartLabelEdit
   10              0.000047 syn keyword vbMethods StartLogging Stop Synchronize Tag TextHeight
   10              0.000079 syn keyword vbMethods TextWidth ToDefaults Trace TwipsToChartPart
   10              0.000043 syn keyword vbMethods TypeByChartType URLFor Update UpdateControls
   10              0.000053 syn keyword vbMethods UpdateRecord UpdateRow Upto ValidateControls Value
   10              0.000041 syn keyword vbMethods WhatsThisMode Write WriteBlankLines WriteLine
   10              0.000036 syn keyword vbMethods WriteProperty WriteTemplate ZOrder
   10              0.000037 syn keyword vbMethods rdoCreateEnvironment rdoRegisterDataSource
                            
   10              0.000059 syn keyword vbStatement Alias AppActivate As Base Beep Begin Call ChDir
   10              0.000061 syn keyword vbStatement ChDrive Close Const Date Declare DefBool DefByte
   10              0.000056 syn keyword vbStatement DefCur DefDate DefDbl DefDec DefInt DefLng DefObj
   10              0.000057 syn keyword vbStatement DefSng DefStr DefVar Deftype DeleteSetting Dim Do
   10              0.000057 syn keyword vbStatement Each ElseIf End Enum Erase Error Event Exit
   10              0.000057 syn keyword vbStatement Explicit FileCopy For ForEach Function Get GoSub
   10              0.000056 syn keyword vbStatement GoTo Gosub Implements Kill LSet Let Lib LineInput
   10              0.000063 syn keyword vbStatement Load Lock Loop Mid MkDir Name Next On OnError Open
   10              0.000051 syn keyword vbStatement Option Preserve Private Property Public Put RSet
   10              0.000046 syn keyword vbStatement RaiseEvent Randomize ReDim Redim Reset Resume
   10              0.000055 syn keyword vbStatement Return RmDir SavePicture SaveSetting Seek SendKeys
   10              0.000055 syn keyword vbStatement Sendkeys Set SetAttr Static Step Stop Sub Time
   10              0.000050 syn keyword vbStatement Type Unload Unlock Until Wend While Width With
   10              0.000027 syn keyword vbStatement Write
                            
   10              0.000077 syn keyword vbKeyword As Binary ByRef ByVal Date Empty Error Friend Get
   10              0.000062 syn keyword vbKeyword Input Is Len Lock Me Mid New Nothing Null On
   10              0.000050 syn keyword vbKeyword Option Optional ParamArray Print Private Property
   10              0.000044 syn keyword vbKeyword Public PublicNotCreateable OnNewProcessSingleUse
   10              0.000047 syn keyword vbKeyword InSameProcessMultiUse GlobalMultiUse Resume Seek
   10              0.000047 syn keyword vbKeyword Set Static Step String Time WithEvents
                            
   10              0.000033 syn keyword vbTodo contained    TODO
                            
                            "Datatypes
   10              0.000063 syn keyword vbTypes Boolean Byte Currency Date Decimal Double Empty
   10              0.000049 syn keyword vbTypes Integer Long Object Single String Variant
                            
                            "VB defined values
   10              0.000054 syn keyword vbDefine dbBigInt dbBinary dbBoolean dbByte dbChar
   10              0.000051 syn keyword vbDefine dbCurrency dbDate dbDecimal dbDouble dbFloat
   10              0.000049 syn keyword vbDefine dbGUID dbInteger dbLong dbLongBinary dbMemo
   10              0.000049 syn keyword vbDefine dbNumeric dbSingle dbText dbTime dbTimeStamp
   10              0.000030 syn keyword vbDefine dbVarBinary
                            
                            "VB defined values
   10              0.000043 syn keyword vbDefine vb3DDKShadow vb3DFace vb3DHighlight vb3DLight
   10              0.000040 syn keyword vbDefine vb3DShadow vbAbort vbAbortRetryIgnore
   10              0.000040 syn keyword vbDefine vbActiveBorder vbActiveTitleBar vbAlias
   10              0.000038 syn keyword vbDefine vbApplicationModal vbApplicationWorkspace
   10              0.000044 syn keyword vbDefine vbAppTaskManager vbAppWindows vbArchive vbArray
   10              0.000044 syn keyword vbDefine vbBack vbBinaryCompare vbBlack vbBlue vbBoolean
   10              0.000042 syn keyword vbDefine vbButtonFace vbButtonShadow vbButtonText vbByte
   10              0.000044 syn keyword vbDefine vbCalGreg vbCalHijri vbCancel vbCr vbCritical
   10              0.000041 syn keyword vbDefine vbCrLf vbCurrency vbCyan vbDatabaseCompare
   10              0.000046 syn keyword vbDefine vbDataObject vbDate vbDecimal vbDefaultButton1
   10              0.000041 syn keyword vbDefine vbDefaultButton2 vbDefaultButton3 vbDefaultButton4
   10              0.000044 syn keyword vbDefine vbDesktop vbDirectory vbDouble vbEmpty vbError
   10              0.000039 syn keyword vbDefine vbExclamation vbFirstFourDays vbFirstFullWeek
   10              0.000040 syn keyword vbDefine vbFirstJan1 vbFormCode vbFormControlMenu
   10              0.000043 syn keyword vbDefine vbFormFeed vbFormMDIForm vbFriday vbFromUnicode
   10              0.000045 syn keyword vbDefine vbGrayText vbGreen vbHidden vbHide vbHighlight
   10              0.000042 syn keyword vbDefine vbHighlightText vbHiragana vbIgnore vbIMEAlphaDbl
   10              0.000039 syn keyword vbDefine vbIMEAlphaSng vbIMEDisable vbIMEHiragana
   10              0.000043 syn keyword vbDefine vbIMEKatakanaDbl vbIMEKatakanaSng vbIMEModeAlpha
   10              0.000038 syn keyword vbDefine vbIMEModeAlphaFull vbIMEModeDisable
   10              0.000037 syn keyword vbDefine vbIMEModeHangul vbIMEModeHangulFull
   10              0.000037 syn keyword vbDefine vbIMEModeHiragana vbIMEModeKatakana
   10              0.000040 syn keyword vbDefine vbIMEModeKatakanaHalf vbIMEModeNoControl
   10              0.000045 syn keyword vbDefine vbIMEModeOff vbIMEModeOn vbIMENoOp vbIMEOff
   10              0.000042 syn keyword vbDefine vbIMEOn vbInactiveBorder vbInactiveCaptionText
   10              0.000040 syn keyword vbDefine vbInactiveTitleBar vbInfoBackground vbInformation
   10              0.000045 syn keyword vbDefine vbInfoText vbInteger vbKatakana vbKey0 vbKey1
   10              0.000078 syn keyword vbDefine vbKey2 vbKey3 vbKey4 vbKey5 vbKey6 vbKey7 vbKey8
   10              0.000045 syn keyword vbDefine vbKey9 vbKeyA vbKeyAdd vbKeyB vbKeyBack vbKeyC
   10              0.000043 syn keyword vbDefine vbKeyCancel vbKeyCapital vbKeyClear vbKeyControl
   10              0.000042 syn keyword vbDefine vbKeyD vbKeyDecimal vbKeyDelete vbKeyDivide
   10              0.000045 syn keyword vbDefine vbKeyDown vbKeyE vbKeyEnd vbKeyEscape vbKeyExecute
   10              0.000049 syn keyword vbDefine vbKeyF vbKeyF1 vbKeyF10 vbKeyF11 vbKeyF12 vbKeyF13
   10              0.000068 syn keyword vbDefine vbKeyF14 vbKeyF15 vbKeyF16 vbKeyF2 vbKeyF3 vbKeyF4
   10              0.000046 syn keyword vbDefine vbKeyF5 vbKeyF6 vbKeyF7 vbKeyF8 vbKeyF9 vbKeyG
   10              0.000045 syn keyword vbDefine vbKeyH vbKeyHelp vbKeyHome vbKeyI vbKeyInsert
   10              0.000048 syn keyword vbDefine vbKeyJ vbKeyK vbKeyL vbKeyLButton vbKeyLeft vbKeyM
   10              0.000043 syn keyword vbDefine vbKeyMButton vbKeyMenu vbKeyMultiply vbKeyN
   10              0.000038 syn keyword vbDefine vbKeyNumlock vbKeyNumpad0 vbKeyNumpad1
   10              0.000037 syn keyword vbDefine vbKeyNumpad2 vbKeyNumpad3 vbKeyNumpad4
   10              0.000037 syn keyword vbDefine vbKeyNumpad5 vbKeyNumpad6 vbKeyNumpad7
   10              0.000041 syn keyword vbDefine vbKeyNumpad8 vbKeyNumpad9 vbKeyO vbKeyP
   10              0.000055 syn keyword vbDefine vbKeyPageDown vbKeyPageUp vbKeyPause vbKeyPrint
   10              0.000044 syn keyword vbDefine vbKeyQ vbKeyR vbKeyRButton vbKeyReturn vbKeyRight
   10              0.000042 syn keyword vbDefine vbKeyS vbKeySelect vbKeySeparator vbKeyShift
   10              0.000042 syn keyword vbDefine vbKeySnapshot vbKeySpace vbKeySubtract vbKeyT
   10              0.000049 syn keyword vbDefine vbKeyTab vbKeyU vbKeyUp vbKeyV vbKeyW vbKeyX
   10              0.000048 syn keyword vbDefine vbKeyY vbKeyZ vbLf vbLong vbLowerCase vbMagenta
   10              0.000039 syn keyword vbDefine vbMaximizedFocus vbMenuBar vbMenuText
   10              0.000042 syn keyword vbDefine vbMinimizedFocus vbMinimizedNoFocus vbMonday
   10              0.000040 syn keyword vbDefine vbMsgBox vbMsgBoxHelpButton vbMsgBoxRight
   10              0.000038 syn keyword vbDefine vbMsgBoxRtlReading vbMsgBoxSetForeground
   10              0.000044 syn keyword vbDefine vbMsgBoxText vbNarrow vbNewLine vbNo vbNormal
   10              0.000042 syn keyword vbDefine vbNormalFocus vbNormalNoFocus vbNull vbNullChar
   10              0.000040 syn keyword vbDefine vbNullString vbObject vbObjectError vbOK
   10              0.000041 syn keyword vbDefine vbOKCancel vbOKOnly vbProperCase vbQuestion
   10              0.000045 syn keyword vbDefine vbReadOnly vbRed vbRetry vbRetryCancel vbSaturday
   10              0.000042 syn keyword vbDefine vbScrollBars vbSingle vbString vbSunday vbSystem
   10              0.000041 syn keyword vbDefine vbSystemModal vbTab vbTextCompare vbThursday
   10              0.000043 syn keyword vbDefine vbTitleBarText vbTuesday vbUnicode vbUpperCase
   10              0.000040 syn keyword vbDefine vbUseSystem vbUseSystemDayOfWeek vbVariant
   10              0.000043 syn keyword vbDefine vbVerticalTab vbVolume vbWednesday vbWhite vbWide
   10              0.000040 syn keyword vbDefine vbWindowBackground vbWindowFrame vbWindowText
   10              0.000041 syn keyword vbDefine vbYellow vbYes vbYesNo vbYesNoCancel
                            
                            "Numbers
                            "integer number, or floating point number without a dot.
   10              0.000071 syn match vbNumber "\<\d\+\>"
                            "floating point number, with dot
   10              0.000059 syn match vbNumber "\<\d\+\.\d*\>"
                            "floating point number, starting with a dot
   10              0.000052 syn match vbNumber "\.\d\+\>"
                            "syn match  vbNumber            "{[[:xdigit:]-]\+}\|&[hH][[:xdigit:]]\+&"
                            "syn match  vbNumber            ":[[:xdigit:]]\+"
                            "syn match  vbNumber            "[-+]\=\<\d\+\>"
   10              0.000085 syn match  vbFloat              "[-+]\=\<\d\+[eE][\-+]\=\d\+"
   10              0.000091 syn match  vbFloat              "[-+]\=\<\d\+\.\d*\([eE][\-+]\=\d\+\)\="
   10              0.000081 syn match  vbFloat              "[-+]\=\<\.\d\+\([eE][\-+]\=\d\+\)\="
                            
                            " String and Character constants
   10              0.000093 syn region  vbString		start=+"+  end=+"\|$+
   10              0.000109 syn region  vbComment		start="\(^\|\s\)REM\s" end="$" contains=vbTodo
   10              0.000093 syn region  vbComment		start="\(^\|\s\)\'"   end="$" contains=vbTodo
   10              0.000059 syn match   vbLineLabel		"^\h\w\+:"
   10              0.000071 syn match   vbLineNumber	"^\d\+\(:\|\s\|$\)"
   10              0.000080 syn match   vbTypeSpecifier  "\<\a\w*[@\$%&!#]"ms=s+1
   10              0.000071 syn match   vbTypeSpecifier  "#[a-zA-Z0-9]"me=e-1
                            " Conditional Compilation
   10              0.000062 syn match  vbPreProc "^#const\>"
   10              0.000109 syn region vbPreProc matchgroup=PreProc start="^#if\>"     end="\<then\>" transparent contains=TOP
   10              0.000099 syn region vbPreProc matchgroup=PreProc start="^#elseif\>" end="\<then\>" transparent contains=TOP
   10              0.000052 syn match  vbPreProc "^#else\>"
   10              0.000056 syn match  vbPreProc "^#end\s*if\>"
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
                            
   10              0.000030 hi def link vbBoolean           Boolean
   10              0.000022 hi def link vbLineNumber        Comment
   10              0.000021 hi def link vbLineLabel         Comment
   10              0.000020 hi def link vbComment           Comment
   10              0.000044 hi def link vbConditional       Conditional
   10              0.000020 hi def link vbConst             Constant
   10              0.000056 hi def link vbDefine            Constant
   10              0.000020 hi def link vbError             Error
   10              0.000020 hi def link vbFunction          Identifier
   10              0.000020 hi def link vbIdentifier        Identifier
   10              0.000019 hi def link vbNumber            Number
   10              0.000018 hi def link vbFloat             Float
   10              0.000018 hi def link vbMethods           PreProc
   10              0.000022 hi def link vbOperator          Operator
   10              0.000020 hi def link vbRepeat            Repeat
   10              0.000019 hi def link vbString            String
   10              0.000020 hi def link vbStatement         Statement
   10              0.000020 hi def link vbKeyword           Statement
   10              0.000018 hi def link vbEvents            Special
   10              0.000020 hi def link vbTodo              Todo
   10              0.000020 hi def link vbTypes             Type
   10              0.000020 hi def link vbTypeSpecifier     Type
   10              0.000019 hi def link vbPreProc           PreProc
                            
   10              0.000053 let b:current_syntax = "vb"
                            
                            " vim: ts=8

SCRIPT  /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/css.vim
Sourced 10 times
Total time:   0.296218
 Self time:   0.296160

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:     Cascading Style Sheets
                            " Previous Contributor List:
                            "               Jules Wang      <w.jq0722@gmail.com>
                            "               Claudio Fleiner <claudio@fleiner.com>
                            "               Yeti            (Add full CSS2, HTML4 support)
                            "               Nikolai Weibull (Add CSS2 support)
                            " URL:          https://github.com/vim-language-dept/css-syntax.vim
                            " Maintainer:   Jay Sitter <jay@jaysitter.com>
                            " Last Change:  2024 Mar 2
                            
                            " quit when a syntax file was already loaded
   10              0.000057 if !exists("main_syntax")
                              if exists("b:current_syntax")
                                finish
                              endif
                              let main_syntax = 'css'
   10              0.000054 elseif exists("b:current_syntax") && b:current_syntax == "css"
                              finish
   10              0.000011 endif
                            
   10              0.000073 let s:cpo_save = &cpo
   10   0.000133   0.000106 set cpo&vim
                            
   10              0.000017 syn case ignore
                            " Add dash to allowed keyword characters.
   10              0.000082 syn iskeyword @,48-57,_,192-255,-
                            
                            " HTML4 tags
   10              0.000053 syn keyword cssTagName abbr address area a b base
   10              0.000045 syn keyword cssTagName bdo blockquote body br button
   10              0.000058 syn keyword cssTagName caption cite code col colgroup dd del
   10              0.000048 syn keyword cssTagName dfn div dl dt em fieldset form
   10              0.000050 syn keyword cssTagName h1 h2 h3 h4 h5 h6 head hr html img i
   10              0.000051 syn keyword cssTagName iframe input ins isindex kbd label legend li
   10              0.000047 syn keyword cssTagName link map menu meta noscript ol optgroup
   10              0.000055 syn keyword cssTagName option p param picture pre q s samp script small
   10              0.000042 syn keyword cssTagName span strong sub sup tbody td
   10              0.000052 syn keyword cssTagName textarea tfoot th thead title tr ul u var
   10              0.000027 syn keyword cssTagName object svg
   10              0.000092 syn match   cssTagName /\<select\>\|\<style\>\|\<table\>/
                            
                            " 34 HTML5 tags
   10              0.000052 syn keyword cssTagName article aside audio bdi canvas command data
   10              0.000053 syn keyword cssTagName datalist details dialog embed figcaption figure footer
   10              0.000048 syn keyword cssTagName header hgroup keygen main mark menuitem meter nav
   10              0.000042 syn keyword cssTagName output progress rt rp ruby section
   10              0.000046 syn keyword cssTagName source summary time track video wbr
                            
                            " Tags not supported in HTML5
                            " acronym applet basefont big center dir
                            " font frame frameset noframes strike tt
                            
   10              0.000040 syn match cssTagName "\*"
                            
                            " selectors
   10              0.000053 syn match cssSelectorOp "[,>+~]"
   10              0.000059 syn match cssSelectorOp2 "[~|^$*]\?=" contained
   10              0.000123 syn region cssAttributeSelector matchgroup=cssSelectorOp start="\[" end="]" contains=cssUnicodeEscape,cssSelectorOp2,cssStringQ,cssStringQQ
                            
                            " .class and #id
   10              0.000090 syn match cssClassName "\.-\=[A-Za-z_][A-Za-z0-9_-]*" contains=cssClassNameDot
   10              0.000144 syn match cssClassNameDot contained '\.'
                            
   10              0.000019 try
   10              0.000106 syn match cssIdentifier "#[A-Za-zÀ-ÿ_@][A-Za-zÀ-ÿ0-9_@-]*"
                            catch /^.*/
                            syn match cssIdentifier "#[A-Za-z_@][A-Za-z0-9_@-]*"
   10              0.000020 endtry
                            
                            " digits
   10              0.000073 syn match cssValueInteger contained "[-+]\=\d\+" contains=cssUnitDecorators
   10              0.000078 syn match cssValueNumber contained "[-+]\=\d\+\(\.\d*\)\=" contains=cssUnitDecorators
   10              0.000156 syn match cssValueLength contained "[-+]\=\d\+\(\.\d*\)\=\(mm\|cm\|in\|pt\|pc\|em\|ex\|px\|rem\|dpi\|dppx\|dpcm\|fr\|vw\|vh\|vmin\|vmax\|ch\)\>" contains=cssUnitDecorators
   10              0.000064 syn match cssValueLength contained "[-+]\=\d\+\(\.\d*\)\=%" contains=cssUnitDecorators
   10              0.000086 syn match cssValueAngle contained "[-+]\=\d\+\(\.\d*\)\=\(deg\|grad\|rad\)\>" contains=cssUnitDecorators
   10              0.000069 syn match cssValueTime contained "+\=\d\+\(\.\d*\)\=\(ms\|s\)\>" contains=cssUnitDecorators
   10              0.000067 syn match cssValueFrequency contained "+\=\d\+\(\.\d*\)\=\(Hz\|kHz\)\>" contains=cssUnitDecorators
                            
                            " The 16 basic color names
   10              0.000090 syn keyword cssColor contained aqua black blue fuchsia gray green lime maroon navy olive purple red silver teal yellow
                            
                            " 130 more color names
   10              0.000037 syn keyword cssColor contained aliceblue antiquewhite aquamarine azure
   10              0.000042 syn keyword cssColor contained beige bisque blanchedalmond blueviolet brown burlywood
   10              0.000059 syn keyword cssColor contained cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan
   10              0.000091 syn match cssColor contained /\<dark\(blue\|cyan\|goldenrod\|gray\|green\|grey\|khaki\)\>/
   10              0.000100 syn match cssColor contained /\<dark\(magenta\|olivegreen\|orange\|orchid\|red\|salmon\|seagreen\)\>/
   10              0.000063 syn match cssColor contained /\<darkslate\(blue\|gray\|grey\)\>/
   10              0.000060 syn match cssColor contained /\<dark\(turquoise\|violet\)\>/
   10              0.000103 syn keyword cssColor contained deeppink deepskyblue dimgray dimgrey dodgerblue firebrick
   10              0.000045 syn keyword cssColor contained floralwhite forestgreen gainsboro ghostwhite gold
   10              0.000043 syn keyword cssColor contained goldenrod greenyellow grey honeydew hotpink
   10              0.000046 syn keyword cssColor contained indianred indigo ivory khaki lavender lavenderblush lawngreen
   10              0.000090 syn keyword cssColor contained lemonchiffon limegreen linen magenta
   10              0.000090 syn match cssColor contained /\<light\(blue\|coral\|cyan\|goldenrodyellow\|gray\|green\)\>/
   10              0.000084 syn match cssColor contained /\<light\(grey\|pink\|salmon\|seagreen\|skyblue\|yellow\)\>/
   10              0.000070 syn match cssColor contained /\<light\(slategray\|slategrey\|steelblue\)\>/
   10              0.000081 syn match cssColor contained /\<medium\(aquamarine\|blue\|orchid\|purple\|seagreen\)\>/
   10              0.000087 syn match cssColor contained /\<medium\(slateblue\|springgreen\|turquoise\|violetred\)\>/
   10              0.000048 syn keyword cssColor contained midnightblue mintcream mistyrose moccasin navajowhite
   10              0.000042 syn keyword cssColor contained oldlace olivedrab orange orangered orchid
   10              0.000078 syn match cssColor contained /\<pale\(goldenrod\|green\|turquoise\|violetred\)\>/
   10              0.000045 syn keyword cssColor contained papayawhip peachpuff peru pink plum powderblue
   10              0.000046 syn keyword cssColor contained rosybrown royalblue rebeccapurple saddlebrown salmon
   10              0.000048 syn keyword cssColor contained sandybrown seagreen seashell sienna skyblue slateblue
   10              0.000063 syn keyword cssColor contained slategray slategrey snow springgreen steelblue tan
   10              0.000041 syn keyword cssColor contained thistle tomato turquoise violet wheat
   10              0.000028 syn keyword cssColor contained whitesmoke yellowgreen
                            
                            " FIXME: These are actually case-insensitive too, but (a) specs recommend using
                            " mixed-case (b) it's hard to highlight the word `Background' correctly in
                            " all situations
   10              0.000023 syn case match
   10              0.000105 syn keyword cssColor contained ActiveBorder ActiveCaption AppWorkspace ButtonFace ButtonHighlight ButtonShadow ButtonText CaptionText GrayText Highlight HighlightText InactiveBorder InactiveCaption InactiveCaptionText InfoBackground InfoText Menu MenuText Scrollbar ThreeDDarkShadow ThreeDFace ThreeDHighlight ThreeDLightShadow ThreeDShadow Window WindowFrame WindowText Background
   10              0.000014 syn case ignore
                            
   10              0.000057 syn match cssImportant contained "!\s*important\>"
   10              0.000067 syn match cssCustomProp contained "\<--[a-zA-Z0-9-_]*\>"
                            
   10              0.000045 syn match cssColor contained "\<transparent\>"
   10              0.000047 syn match cssColor contained "\<currentColor\>"
   10              0.000043 syn match cssColor contained "\<white\>"
   10              0.000085 syn match cssColor contained "#\x\{3,4\}\>" contains=cssUnitDecorators
   10              0.000055 syn match cssColor contained "#\x\{6\}\>" contains=cssUnitDecorators
   10              0.000055 syn match cssColor contained "#\x\{8\}\>" contains=cssUnitDecorators
                            
   10              0.000159 syn region cssURL contained matchgroup=cssFunctionName start="\<\(uri\|url\|local\|format\)\s*(" end=")" contains=cssStringQ,cssStringQQ oneline
   10              0.022550 syn region cssMathGroup contained matchgroup=cssMathParens start="(" end=")" containedin=cssFunction,cssMathGroup contains=cssCustomProp,cssValue.*,cssFunction,cssColor,cssStringQ,cssStringQQ oneline
   10              0.021645 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(var\|calc\)\s*(" end=")" contains=cssCustomProp,cssValue.*,cssFunction,cssURL,cssColor,cssStringQ,cssStringQQ oneline
   10              0.000229 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(rgb\|clip\|attr\|counter\|rect\|cubic-bezier\|steps\)\s*(" end=")" oneline  contains=cssValueInteger,cssValueNumber,cssValueLength,cssFunctionComma
   10              0.000148 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(rgba\|hsl\|hsla\|color-stop\|from\|to\)\s*(" end=")" oneline  contains=cssColor,cssValueInteger,cssValueNumber,cssValueLength,cssFunctionComma,cssFunction
   10              0.000179 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(linear-\|radial-\|conic-\)\=\gradient\s*(" end=")" oneline  contains=cssColor,cssValueInteger,cssValueNumber,cssValueLength,cssFunction,cssGradientAttr,cssFunctionComma
   10              0.000293 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(matrix\(3d\)\=\|scale\(3d\|X\|Y\|Z\)\=\|translate\(3d\|X\|Y\|Z\)\=\|skew\(X\|Y\)\=\|rotate\(3d\|X\|Y\|Z\)\=\|perspective\)\s*(" end=")" oneline contains=cssValueInteger,cssValueNumber,cssValueLength,cssValueAngle,cssFunctionComma
   10              0.000204 syn region cssFunction contained matchgroup=cssFunctionName start="\<\(blur\|brightness\|contrast\|drop-shadow\|grayscale\|hue-rotate\|invert\|opacity\|saturate\|sepia\)\s*(" end=")" oneline contains=cssValueInteger,cssValueNumber,cssValueLength,cssValueAngle,cssFunctionComma
   10              0.000080 syn keyword cssGradientAttr contained top bottom left right cover center middle ellipse at
   10              0.000046 syn match cssFunctionComma contained ","
                            
                            " Common Prop and Attr
   10              0.000054 syn keyword cssCommonAttr contained auto none inherit all default normal
   10              0.000046 syn keyword cssCommonAttr contained top bottom center stretch hidden visible
   10              0.000068 syn match cssCommonAttr contained "\<\(max-\|min-\|fit-\)content\>"
                            "------------------------------------------------
                            " CSS Animations
                            " http://www.w3.org/TR/css3-animations/
   10              0.000141 syn match cssAnimationProp contained "\<animation\(-\(delay\|direction\|duration\|fill-mode\|name\|play-state\|timing-function\|iteration-count\)\)\=\>"
                            
                            " animation-direction attributes
   10              0.000033 syn keyword cssAnimationAttr contained alternate reverse
   10              0.000050 syn match cssAnimationAttr contained "\<alternate-reverse\>"
                            
                            " animation-fill-mode attributes
   10              0.000035 syn keyword cssAnimationAttr contained forwards backwards both
                            
                            " animation-play-state attributes
   10              0.000027 syn keyword cssAnimationAttr contained running paused
                            
                            " animation-iteration-count attributes
   10              0.000023 syn keyword cssAnimationAttr contained infinite
                            "------------------------------------------------
                            "  CSS Backgrounds and Borders Module Level 3
                            "  http://www.w3.org/TR/css3-background/
   10              0.000111 syn match cssBackgroundProp contained "\<background\(-\(attachment\|clip\|color\|image\|origin\|position\|repeat\|size\)\)\=\>"
                            " background-attachment attributes
   10              0.000039 syn keyword cssBackgroundAttr contained scroll fixed local
                            
                            " background-position attributes
   10              0.000037 syn keyword cssBackgroundAttr contained left center right top bottom
                            
                            " background-repeat attributes
   10              0.000045 syn match cssBackgroundAttr contained "\<no-repeat\>"
   10              0.000064 syn match cssBackgroundAttr contained "\<repeat\(-[xy]\)\=\>"
                            
                            " background-size attributes
   10              0.000032 syn keyword cssBackgroundAttr contained cover contain
                            
   10              0.000099 syn match cssBorderProp contained "\<border\(-\(top\|right\|bottom\|left\)\)\=\(-\(width\|color\|style\)\)\=\>"
   10              0.000084 syn match cssBorderProp contained "\<border\(-\(top\|bottom\)-\(left\|right\)\)\=-radius\>"
   10              0.000099 syn match cssBorderProp contained "\<border-\(inline\|block\)\(-\(start\|end\)\)\=\(-\(style\|width\|color\)\)\=\>"
   10              0.000076 syn match cssBorderProp contained "\<border-\(start\|end\)-\(start\|end\)-radius\>"
   10              0.000089 syn match cssBorderProp contained "\<border-image\(-\(outset\|repeat\|slice\|source\|width\)\)\=\>"
   10              0.000052 syn match cssBorderProp contained "\<box-decoration-break\>"
   10              0.000041 syn match cssBorderProp contained "\<box-shadow\>"
                            
                            " border-image attributes
   10              0.000041 syn keyword cssBorderAttr contained stretch round fill
                            
                            " border-style attributes
   10              0.000059 syn keyword cssBorderAttr contained dotted dashed solid double groove ridge inset outset
                            
                            " border-width attributes
   10              0.000034 syn keyword cssBorderAttr contained thin thick medium
                            
                            " box-decoration-break attributes
   10              0.000028 syn keyword cssBorderAttr contained clone slice
                            "------------------------------------------------
                            
   10              0.000076 syn match cssBoxProp contained "\<padding\(-\(top\|right\|bottom\|left\)\)\=\>"
   10              0.000071 syn match cssBoxProp contained "\<margin\(-\(top\|right\|bottom\|left\)\)\=\>"
   10              0.000088 syn match cssBoxProp contained "\<\(margin\|padding\)\(-\(inline\|block\)\(-\(start\|end\)\)\)\=\>"
   10              0.000063 syn match cssBoxProp contained "\<overflow\(-\(x\|y\|style\)\)\=\>"
   10              0.000051 syn match cssBoxProp contained "\<rotation\(-point\)\=\>"
   10              0.000041 syn keyword cssBoxAttr contained visible hidden scroll auto
   10              0.000055 syn match cssBoxAttr contained "\<no-\(display\|content\)\>"
                            
   10              0.000028 syn keyword cssCascadeProp contained all
   10              0.000034 syn keyword cssCascadeAttr contained initial unset revert
                            
   10              0.000024 syn keyword cssColorProp contained opacity
   10              0.000048 syn match cssColorProp contained "\<color-profile\>"
   10              0.000050 syn match cssColorProp contained "\<rendering-intent\>"
                            
                            
   10              0.000065 syn match cssDimensionProp contained "\<\(min\|max\)-\(width\|height\)\>"
   10              0.000027 syn keyword cssDimensionProp contained height
   10              0.000024 syn keyword cssDimensionProp contained width
                            
                            " CSS Flexible Box Layout Module Level 1
                            " http://www.w3.org/TR/css3-flexbox/
                            " CSS Box Alignment Module Level 3
                            " http://www.w3.org/TR/css-align-3/
   10              0.000089 syn match cssFlexibleBoxProp contained "\<flex\(-\(direction\|wrap\|flow\|grow\|shrink\|basis\)\)\=\>"
   10              0.000077 syn match cssFlexibleBoxProp contained "\<\(align\|justify\)\(-\(items\|self\|content\)\)\=\>"
   10              0.000027 syn keyword cssFlexibleBoxProp contained order
                            
   10              0.000066 syn match cssFlexibleBoxAttr contained "\<\(row\|column\|wrap\)\(-reverse\)\=\>"
   10              0.000045 syn keyword cssFlexibleBoxAttr contained nowrap stretch baseline center
   10              0.000055 syn match cssFlexibleBoxAttr contained "\<flex\(-\(start\|end\)\)\=\>"
   10              0.000070 syn match cssFlexibleBoxAttr contained "\<space\(-\(between\|around\|evenly\)\)\=\>"
                            
                            " CSS Fonts Module Level 3
                            " http://www.w3.org/TR/css-fonts-3/
   10              0.000227 syn match cssFontProp contained "\<font\(-\(display\|family\|feature-settings\|kerning\|language-override\|size\(-adjust\)\=\|stretch\|style\|synthesis\|variant\(-\(alternates\|caps\|east-asian\|ligatures\|numeric\|position\)\)\=\|weight\)\)\=\>"
                            
                            " font attributes
   10              0.000039 syn keyword cssFontAttr contained icon menu caption
   10              0.000048 syn match cssFontAttr contained "\<message-box\>"
   10              0.000047 syn match cssFontAttr contained "\<status-bar\>"
   10              0.000033 syn keyword cssFontAttr contained larger smaller
   10              0.000071 syn match cssFontAttr contained "\<\(x\{1,2\}-\)\=\(large\|small\)\>"
   10              0.000057 syn match cssFontAttr contained "\<small-\(caps\|caption\)\>"
                            " font-family attributes
   10              0.000049 syn keyword cssFontAttr contained sans-serif serif cursive fantasy monospace
                            " font-feature-settings attributes
   10              0.000030 syn keyword cssFontAttr contained on off
                            " font-stretch attributes
   10              0.000085 syn match cssFontAttr contained "\<\(\(ultra\|extra\|semi\)-\)\=\(condensed\|expanded\)\>"
                            " font-style attributes
   10              0.000031 syn keyword cssFontAttr contained italic oblique
                            " font-synthesis attributes
   10              0.000027 syn keyword cssFontAttr contained weight style
                            " font-weight attributes
   10              0.000028 syn keyword cssFontAttr contained bold bolder lighter
                            " font-display attributes
   10              0.000042 syn keyword cssFontAttr contained auto block swap fallback optional
                            " TODO: font-variant-* attributes
                            "------------------------------------------------
                            
                            " Webkit specific property/attributes
   10              0.000046 syn match cssFontProp contained "\<font-smooth\>"
   10              0.000065 syn match cssFontAttr contained "\<\(subpixel-\)\=\antialiased\>"
                            
                            
                            " CSS Multi-column Layout Module
                            " http://www.w3.org/TR/css3-multicol/
   10              0.000069 syn match cssMultiColumnProp contained "\<break-\(after\|before\|inside\)\>"
   10              0.000111 syn match cssMultiColumnProp contained "\<column-\(count\|fill\|gap\|rule\(-\(color\|style\|width\)\)\=\|span\|width\)\>"
   10              0.000030 syn keyword cssMultiColumnProp contained columns
   10              0.000030 syn keyword cssMultiColumnAttr contained balance medium
   10              0.000041 syn keyword cssMultiColumnAttr contained always left right page column
   10              0.000062 syn match cssMultiColumnAttr contained "\<avoid\(-\(page\|column\)\)\=\>"
                            
                            " http://www.w3.org/TR/css3-break/#page-break
   10              0.000074 syn match cssMultiColumnProp contained "\<page\(-break-\(before\|after\|inside\)\)\=\>"
                            
                            " http://www.w3.org/TR/SVG11/interact.html
   10              0.000051 syn match cssInteractProp contained "\<pointer-events\>"
   10              0.000093 syn match cssInteractAttr contained "\<\(visible\)\=\(Painted\|Fill\|Stroke\)\=\>"
                            
                            " TODO find following items in w3c docs.
   10              0.000034 syn keyword cssGeneratedContentProp contained quotes crop
   10              0.000062 syn match cssGeneratedContentProp contained "\<counter-\(reset\|increment\)\>"
   10              0.000044 syn match cssGeneratedContentProp contained "\<move-to\>"
   10              0.000051 syn match cssGeneratedContentProp contained "\<page-policy\>"
   10              0.000066 syn match cssGeneratedContentAttr contained "\<\(no-\)\=\(open\|close\)-quote\>"
                            
                            " https://www.w3.org/TR/css-grid-1/
   10              0.000040 syn match cssGridProp contained "\<grid\>"
   10              0.000072 syn match cssGridProp contained "\<grid-template\(-\(columns\|rows\|areas\)\)\=\>"
   10              0.000082 syn match cssGridProp contained "\<\(grid-\)\=\(column\|row\)\(-\(start\|end\|gap\)\)\=\>"
   10              0.000051 syn match cssGridProp contained "\<grid-\(area\|gap\)\>"
   10              0.000039 syn match cssGridProp contained "\<gap\>"
   10              0.000067 syn match cssGridProp contained "\<grid-auto-\(flow\|rows\|columns\)\>"
                            
   10              0.000071 syn match cssHyerlinkProp contained "\<target\(-\(name\|new\|position\)\)\=\>"
                            
   10              0.000073 syn match cssListProp contained "\<list-style\(-\(type\|position\|image\)\)\=\>"
   10              0.000079 syn match cssListAttr contained "\<\(lower\|upper\)-\(roman\|alpha\|greek\|latin\)\>"
   10              0.000068 syn match cssListAttr contained "\<\(hiragana\|katakana\)\(-iroha\)\=\>"
   10              0.000114 syn match cssListAttr contained "\<\(decimal\(-leading-zero\)\=\|cjk-ideographic\)\>"
   10              0.000055 syn keyword cssListAttr contained disc circle square hebrew armenian georgian
   10              0.000030 syn keyword cssListAttr contained inside outside
                            
                            " object-fit https://www.w3.org/TR/css-images-3/#the-object-fit
   10              0.000061 syn match cssObjectProp contained "\<object-\(fit\|position\)\>"
   10              0.000046 syn keyword cssObjectAttr contained fill contain cover scale-down
                            
   10              0.000047 syn keyword cssPositioningProp contained bottom clear clip display float left
   10              0.000040 syn keyword cssPositioningProp contained position right top visibility
   10              0.000042 syn match cssPositioningProp contained "\<z-index\>"
   10              0.000038 syn keyword cssPositioningAttr contained block compact grid
   10              0.000121 syn match cssPositioningAttr contained "\<table\(-\(row-group\|\(header\|footer\)-group\|row\|column\(-group\)\=\|cell\|caption\)\)\=\>"
   10              0.000033 syn keyword cssPositioningAttr contained left right both
   10              0.000046 syn match cssPositioningAttr contained "\<list-item\>"
   10              0.000077 syn match cssPositioningAttr contained "\<inline\(-\(block\|box\|table\|grid\|flex\)\)\=\>"
   10              0.000047 syn match cssPositioningAttr contained "\<flow\(-root\)\=\>"
   10              0.000053 syn keyword cssPositioningAttr contained static relative absolute fixed subgrid sticky
                            
   10              0.000043 syn keyword cssPrintAttr contained landscape portrait crop cross always
                            
   10              0.000167 syn match cssTableProp contained "\<\(caption-side\|table-layout\|border-collapse\|border-spacing\|empty-cells\)\>"
   10              0.000058 syn keyword cssTableAttr contained fixed collapse separate show hide once always
                            
                            
   10              0.000037 syn keyword cssTextProp contained color direction hyphens
   10              0.000170 syn match cssTextProp "\<\(\(word\|letter\)-spacing\|text\(-\(decoration\|transform\|align\|index\|shadow\)\)\=\|vertical-align\|unicode-bidi\|line-height\)\>"
   10              0.000113 syn match cssTextProp contained "\<text-\(justify\|outline\|warp\|align-last\|size-adjust\|rendering\|stroke\|indent\)\>"
   10              0.000084 syn match cssTextProp contained "\<\(word\|line\)-break\|\(overflow\|word\)-wrap\>"
   10              0.000047 syn match cssTextProp contained "\<white-space\>"
   10              0.000055 syn match cssTextProp contained "\<hanging-punctuation\>"
   10              0.000044 syn match cssTextProp contained "\<tab-size\>"
   10              0.000048 syn match cssTextProp contained "\<punctuation-trim\>"
   10              0.000051 syn match cssTextAttr contained "\<line-through\>"
   10              0.000060 syn match cssTextAttr contained "\<\(text-\)\=\(top\|bottom\)\>"
   10              0.000044 syn keyword cssTextAttr contained ltr rtl embed nowrap
   10              0.000051 syn keyword cssTextAttr contained underline overline blink sub super middle
   10              0.000036 syn keyword cssTextAttr contained capitalize uppercase lowercase
   10              0.000035 syn keyword cssTextAttr contained justify baseline sub super
   10              0.000043 syn keyword cssTextAttr contained optimizeLegibility optimizeSpeed geometricPrecision
   10              0.000057 syn match cssTextAttr contained "\<pre\(-\(line\|wrap\)\)\=\>"
   10              0.000056 syn match cssTextAttr contained "\<\(allow\|force\)-end\>"
   10              0.000039 syn keyword cssTextAttr contained start end adjacent
   10              0.000070 syn match cssTextAttr contained "\<inter-\(word\|ideographic\|cluster\)\>"
   10              0.000041 syn keyword cssTextAttr contained distribute kashida first last
   10              0.000043 syn keyword cssTextAttr contained clip ellipsis unrestricted suppress
   10              0.000058 syn match cssTextAttr contained "\<break-all\>"
   10              0.000048 syn match cssTextAttr contained "\<break-word\>"
   10              0.000027 syn keyword cssTextAttr contained manual
   10              0.000052 syn match cssTextAttr contained "\<bidi-override\>"
                            
   10              0.000078 syn match cssTransformProp contained "\<transform\(-\(origin\|style\)\)\=\>"
   10              0.000058 syn match cssTransformProp contained "\<perspective\(-origin\)\=\>"
   10              0.000054 syn match cssTransformProp contained "\<backface-visibility\>"
                            
                            " CSS Transitions
                            " http://www.w3.org/TR/css3-transitions/
   10              0.000096 syn match cssTransitionProp contained "\<transition\(-\(delay\|duration\|property\|timing-function\)\)\=\>"
                            
                            " transition-time-function attributes
   10              0.000060 syn match cssTransitionAttr contained "\<linear\(-gradient\)\@!\>"
   10              0.000072 syn match cssTransitionAttr contained "\<ease\(-\(in-out\|out\|in\)\)\=\>"
   10              0.000055 syn match cssTransitionAttr contained "\<step\(-start\|-end\)\=\>"
                            "------------------------------------------------
                            " CSS Basic User Interface Module Level 3 (CSS3 UI)
                            " http://www.w3.org/TR/css3-ui/
   10              0.000051 syn match cssUIProp contained "\<box-sizing\>"
   10              0.000072 syn match cssUIAttr contained "\<\(content\|padding\|border\)\(-box\)\=\>"
                            
   10              0.000029 syn keyword cssUIProp contained cursor
   10              0.000095 syn match cssUIAttr contained "\<\(\([ns]\=[ew]\=\)\|col\|row\|nesw\|nwse\)-resize\>"
   10              0.000092 syn keyword cssUIAttr contained crosshair help move pointer alias copy
   10              0.000041 syn keyword cssUIAttr contained progress wait text cell move
   10              0.000045 syn match cssUIAttr contained "\<context-menu\>"
   10              0.000043 syn match cssUIAttr contained "\<no-drop\>"
   10              0.000044 syn match cssUIAttr contained "\<not-allowed\>"
   10              0.000043 syn match cssUIAttr contained "\<all-scroll\>"
   10              0.000053 syn match cssUIAttr contained "\<\(vertical-\)\=text\>"
   10              0.000055 syn match cssUIAttr contained "\<zoom\(-in\|-out\)\=\>"
                            
   10              0.000041 syn match cssUIProp contained "\<ime-mode\>"
   10              0.000038 syn keyword cssUIAttr contained active inactive disabled
                            
   10              0.000074 syn match cssUIProp contained "\<nav-\(down\|index\|left\|right\|up\)\=\>"
   10              0.000076 syn match cssUIProp contained "\<outline\(-\(width\|style\|color\|offset\)\)\=\>"
   10              0.000026 syn keyword cssUIAttr contained invert
                            
   10              0.000028 syn keyword cssUIProp contained icon resize
   10              0.000031 syn keyword cssUIAttr contained both horizontal vertical
                            
   10              0.000046 syn match cssUIProp contained "\<text-overflow\>"
   10              0.000031 syn keyword cssUIAttr contained clip ellipsis
                            
   10              0.000048 syn match cssUIProp contained "\<image-rendering\>"
   10              0.000026 syn keyword cssUIAttr contained pixellated
   10              0.000043 syn match cssUIAttr contained "\<crisp-edges\>"
                            
                            "------------------------------------------------
                            " Webkit/iOS specific attributes
   10              0.000044 syn match cssUIAttr contained '\<preserve-3d\>'
                            " IE specific attributes
   10              0.000043 syn match cssIEUIAttr contained '\<bicubic\>'
                            
                            " Webkit/iOS specific properties
   10              0.000087 syn match cssUIProp contained '\<\(tap-highlight-color\|user-select\|touch-callout\)\>'
                            " IE specific properties
   10              0.000071 syn match cssIEUIProp contained '\<\(interpolation-mode\|zoom\|filter\)\>'
                            
                            " Webkit/Firebox specific properties/attributes
   10              0.000026 syn keyword cssUIProp contained appearance
   10              0.000047 syn keyword cssUIAttr contained window button field icon document menu
                            
                            
   10              0.000072 syn match cssAuralProp contained "\<\(pause\|cue\)\(-\(before\|after\)\)\=\>"
   10              0.000140 syn match cssAuralProp contained "\<\(play-during\|speech-rate\|voice-family\|pitch\(-range\)\=\|speak\(-\(punctuation\|numeral\|header\)\)\=\)\>"
   10              0.000053 syn keyword cssAuralProp contained volume during azimuth elevation stress richness
   10              0.000059 syn match cssAuralAttr contained "\<\(x-\)\=\(soft\|loud\)\>"
   10              0.000027 syn keyword cssAuralAttr contained silent
   10              0.000048 syn match cssAuralAttr contained "\<spell-out\>"
   10              0.000030 syn keyword cssAuralAttr contained non mix
   10              0.000053 syn match cssAuralAttr contained "\<\(left\|right\)-side\>"
   10              0.000071 syn match cssAuralAttr contained "\<\(far\|center\)-\(left\|center\|right\)\>"
   10              0.000035 syn keyword cssAuralAttr contained leftwards rightwards behind
   10              0.000041 syn keyword cssAuralAttr contained below level above lower higher
   10              0.000065 syn match cssAuralAttr contained "\<\(x-\)\=\(slow\|fast\|low\|high\)\>"
   10              0.000032 syn keyword cssAuralAttr contained faster slower
   10              0.000054 syn keyword cssAuralAttr contained male female child code digits continuous
                            
                            " mobile text
   10              0.000072 syn match cssMobileTextProp contained "\<text-size-adjust\>"
                            
   10              0.000041 syn keyword cssMediaProp contained width height orientation scan
   10              0.000045 syn keyword cssMediaProp contained any-hover any-pointer color-gamut grid hover
   10              0.000041 syn keyword cssMediaProp contained overflow-block overflow-inline pointer update
   10              0.000086 syn match cssMediaProp contained /\<\(\(max\|min\)-\)\=\(\(device\)-\)\=aspect-ratio\>/
   10              0.000073 syn match cssMediaProp contained /\<\(\(max\|min\)-\)\=device-pixel-ratio\>/
   10              0.000076 syn match cssMediaProp contained /\<\(\(max\|min\)-\)\=device-\(height\|width\)\>/
   10              0.000114 syn match cssMediaProp contained /\<\(\(max\|min\)-\)\=\(height\|width\|resolution\|monochrome\|color\(-index\)\=\)\>/
   10              0.000062 syn keyword cssMediaAttr contained portrait landscape progressive interlace
   10              0.000052 syn keyword cssMediaAttr contained coarse fast fine hover infinite p3 paged
   10              0.000038 syn keyword cssMediaAttr contained rec2020 scroll slow srgb
   10              0.000098 syn match cssKeyFrameProp contained /\(\d\+\(\.\d\+\)\?%\|\(\<from\|to\>\)\)/ nextgroup=cssDefinition
   10              0.000132 syn match cssPageMarginProp /@\(\(top\|left\|right\|bottom\)-\(left\|center\|right\|middle\|bottom\)\)\(-corner\)\=/ contained nextgroup=cssDefinition
   10              0.000034 syn keyword cssPageProp contained content size
   10              0.000030 syn keyword cssPageProp contained orphans widows
   10              0.000028 syn keyword cssFontDescriptorProp contained src
   10              0.000052 syn match cssFontDescriptorProp contained "\<unicode-range\>"
                            " unicode-range attributes
   10              0.000072 syn match cssFontDescriptorAttr contained "U+[0-9A-Fa-f?]\+"
   10              0.000052 syn match cssFontDescriptorAttr contained "U+\x\+-\x\+"
                            
   10              0.000044 syn match cssBraces contained "[{}]"
   10              0.000101 syn match cssError contained "{@<>"
   10              0.049136 syn region cssDefinition transparent matchgroup=cssBraces start='{' end='}' contains=cssTagName,cssAttributeSelector,cssClassName,cssIdentifier,cssAtRule,cssAttrRegion,css.*Prop,cssComment,cssValue.*,cssColor,cssURL,cssImportant,cssCustomProp,cssError,cssStringQ,cssStringQQ,cssFunction,cssUnicodeEscape,cssVendor,cssDefinition,cssHacks,cssNoise fold
   10              0.000115 syn match cssBraceError "}"
   10              0.000045 syn match cssAttrComma ","
                            
                            " Pseudo class
                            " https://www.w3.org/TR/selectors-4/
   10              0.000114 syn match cssPseudoClass ":[A-Za-z0-9_-]*" contains=cssNoise,cssPseudoClassId,cssUnicodeEscape,cssVendor,cssPseudoClassFn
   10              0.000070 syn keyword cssPseudoClassId contained link visited active hover before after left right
   10              0.000060 syn keyword cssPseudoClassId contained root empty target enabled disabled checked invalid
   10              0.000063 syn match cssPseudoClassId contained "\<first-\(line\|letter\)\>"
   10              0.000078 syn match cssPseudoClassId contained "\<\(first\|last\|only\)-\(of-type\|child\)\>"
   10              0.000067 syn match cssPseudoClassId contained  "\<focus\(-within\|-visible\)\=\>"
   10              0.000167 syn region cssPseudoClassFn contained matchgroup=cssFunctionName start="\<\(not\|is\|lang\|\(nth\|nth-last\)-\(of-type\|child\)\)(" end=")" contains=cssStringQ,cssStringQQ,cssTagName,cssAttributeSelector,cssClassName,cssIdentifier
                            " ------------------------------------
                            " Vendor specific properties
   10              0.000045 syn match cssPseudoClassId contained  "\<selection\>"
   10              0.000060 syn match cssPseudoClassId contained  "\<\(input-\)\=placeholder\>"
                            
                            " Misc highlight groups
   10              0.000155 syntax match cssUnitDecorators /\(#\|-\|+\|%\|mm\|cm\|in\|pt\|pc\|em\|ex\|px\|ch\|rem\|vh\|vw\|vmin\|vmax\|dpi\|dppx\|dpcm\|Hz\|kHz\|s\|ms\|deg\|grad\|rad\)/ contained
   10              0.000047 syntax match cssNoise contained /\(:\|;\|\/\)/
                            
                            " Comment
   10              0.000114 syn region cssComment start="/\*" end="\*/" contains=@Spell fold
                            
   10              0.000070 syn match cssUnicodeEscape "\\\x\{1,6}\s\?"
   10              0.000043 syn match cssSpecialCharQQ +\\\\\|\\"+ contained
   10              0.000042 syn match cssSpecialCharQ +\\\\\|\\'+ contained
   10              0.000121 syn region cssStringQQ start=+"+ skip=+\\\\\|\\"+ end=+"+ contains=cssUnicodeEscape,cssSpecialCharQQ
   10              0.000113 syn region cssStringQ start=+'+ skip=+\\\\\|\\'+ end=+'+ contains=cssUnicodeEscape,cssSpecialCharQ
                            
                            " Vendor Prefix
   10              0.000061 syn match cssVendor contained "-\(webkit\|moz\|o\|ms\)-"
                            
                            " Various CSS Hack characters
                            " In earlier versions of IE (6 and 7), one can prefix property names
                            " with a _ or * to isolate those definitions to particular versions of IE
                            " This is purely decorative and therefore we assign to the same highlight
                            " group to cssVendor, for more information:
                            " http://www.paulirish.com/2009/browser-specific-css-hacks/
   10              0.000043 syn match cssHacks contained /\(_\|*\)/
                            
                            " Attr Enhance
                            " Some keywords are both Prop and Attr, so we have to handle them
                            " cssPseudoClassId is hidden by cssAttrRegion, so we add it here. see #69
   10              0.071268 syn region cssAttrRegion start=/:/ end=/\ze\(;\|)\|}\|{\)/ contained contains=cssPseudoClassId,css.*Attr,cssColor,cssImportant,cssValue.*,cssFunction,cssString.*,cssURL,cssComment,cssUnicodeEscape,cssVendor,cssError,cssAttrComma,cssNoise
                            
                            " Hack for transition
                            " 'transition' has Props after ':'.
   10              0.084580 syn region cssAttrRegion start=/transition\s*:/ end=/\ze\(;\|)\|}\)/ contained contains=css.*Prop,css.*Attr,cssColor,cssImportant,cssValue.*,cssFunction,cssString.*,cssURL,cssComment,cssUnicodeEscape,cssVendor,cssError,cssAttrComma,cssNoise
                            
   10              0.000098 syn match cssAtKeyword /@\(font-face\|media\|keyframes\|import\|charset\|namespace\|page\|supports\)/
                            
   10              0.000034 syn keyword cssAtRuleLogical only not and contained
                            
                            " @media
                            " Reference: http://www.w3.org/TR/css3-mediaqueries/
   10              0.000115 syn region cssAtRule start=/@media\>/ end=/\ze{/ skipwhite skipnl matchgroup=cssAtKeyword contains=cssMediaProp,cssValueLength,cssAtRuleLogical,cssValueInteger,cssMediaAttr,cssVendor,cssMediaType,cssComment,cssCustomProp,cssFunctionName nextgroup=cssDefinition
   10              0.000057 syn keyword cssMediaType contained screen print aural braille embossed handheld projection tty tv speech all contained
                            
                            " @page
                            " http://www.w3.org/TR/css3-page/
   10              0.000070 syn region cssAtRule start=/@page\>/ end=/\ze{/ skipwhite skipnl matchgroup=cssAtKeyword contains=cssPagePseudo,cssComment nextgroup=cssDefinition
   10              0.000043 syn match cssPagePseudo /:\(left\|right\|first\|blank\)/ contained skipwhite skipnl
                            " @keyframe
                            " http://www.w3.org/TR/css3-animations/#keyframes
   10              0.000085 syn region cssAtRule start=/@\(-[a-z]\+-\)\=keyframes\>/ end=/\ze{/ skipwhite skipnl matchgroup=cssAtKeyword contains=cssVendor,cssComment nextgroup=cssDefinition
                            
   10              0.000092 syn region cssAtRule start=/@import\>/    end=/\ze;/ contains=cssStringQ,cssStringQQ,cssUnicodeEscape,cssComment,cssAtKeyword,cssURL,cssMediaProp,cssValueLength,cssAtRuleLogical,cssValueInteger,cssMediaAttr,cssMediaType
   10              0.000065 syn region cssAtRule start=/@charset\>/   end=/\ze;/ contains=cssStringQ,cssStringQQ,cssUnicodeEscape,cssComment,cssAtKeyword
   10              0.000062 syn region cssAtRule start=/@namespace\>/ end=/\ze;/ contains=cssStringQ,cssStringQQ,cssUnicodeEscape,cssComment,cssAtKeyword
                            
                            " @supports
                            " https://www.w3.org/TR/css3-conditional/#at-supports
   10              0.023321 syn region cssAtRule start=/@supports\>/ end=/\ze{/ skipwhite skipnl contains=cssAtRuleLogical,cssAttrRegion,css.*Prop,cssValue.*,cssVendor,cssAtKeyword,cssComment nextgroup=cssDefinition
                            
                            
   10              0.000051 if main_syntax == "css"
                              syn sync minlines=10
   10              0.000010 endif
                            
                            " Define the default highlighting.
                            " Only when an item doesn't have highlighting yet
                            
   10              0.000017 hi def link cssComment Comment
   10              0.000010 hi def link cssVendor Comment
   10              0.000009 hi def link cssHacks Comment
   10              0.000009 hi def link cssTagName Statement
   10              0.000009 hi def link cssDeprecated Error
   10              0.000009 hi def link cssSelectorOp Special
   10              0.000009 hi def link cssSelectorOp2 Special
   10              0.000008 hi def link cssAttrComma Special
                            
   10              0.000009 hi def link cssAnimationProp cssProp
   10              0.000009 hi def link cssBackgroundProp cssProp
   10              0.000009 hi def link cssBorderProp cssProp
   10              0.000008 hi def link cssBoxProp cssProp
   10              0.000009 hi def link cssCascadeProp cssProp
   10              0.000009 hi def link cssColorProp cssProp
   10              0.000010 hi def link cssContentForPagedMediaProp cssProp
   10              0.000009 hi def link cssDimensionProp cssProp
   10              0.000009 hi def link cssFlexibleBoxProp cssProp
   10              0.000008 hi def link cssFontProp cssProp
   10              0.000009 hi def link cssGeneratedContentProp cssProp
   10              0.000008 hi def link cssGridProp cssProp
   10              0.000009 hi def link cssHyerlinkProp cssProp
   10              0.000009 hi def link cssInteractProp cssProp
   10              0.000010 hi def link cssLineboxProp cssProp
   10              0.000008 hi def link cssListProp cssProp
   10              0.000009 hi def link cssMarqueeProp cssProp
   10              0.000009 hi def link cssMultiColumnProp cssProp
   10              0.000014 hi def link cssPagedMediaProp cssProp
   10              0.000008 hi def link cssPositioningProp cssProp
   10              0.000009 hi def link cssObjectProp cssProp
   10              0.000008 hi def link cssPrintProp cssProp
   10              0.000009 hi def link cssRubyProp cssProp
   10              0.000008 hi def link cssSpeechProp cssProp
   10              0.000008 hi def link cssTableProp cssProp
   10              0.000008 hi def link cssTextProp cssProp
   10              0.000009 hi def link cssTransformProp cssProp
   10              0.000009 hi def link cssTransitionProp cssProp
   10              0.000009 hi def link cssUIProp cssProp
   10              0.000008 hi def link cssIEUIProp cssProp
   10              0.000009 hi def link cssAuralProp cssProp
   10              0.000009 hi def link cssRenderProp cssProp
   10              0.000008 hi def link cssMobileTextProp cssProp
                            
   10              0.000008 hi def link cssAnimationAttr cssAttr
   10              0.000008 hi def link cssBackgroundAttr cssAttr
   10              0.000009 hi def link cssBorderAttr cssAttr
   10              0.000008 hi def link cssBoxAttr cssAttr
   10              0.000010 hi def link cssContentForPagedMediaAttr cssAttr
   10              0.000008 hi def link cssDimensionAttr cssAttr
   10              0.000009 hi def link cssFlexibleBoxAttr cssAttr
   10              0.000008 hi def link cssFontAttr cssAttr
   10              0.000009 hi def link cssGeneratedContentAttr cssAttr
   10              0.000008 hi def link cssGridAttr cssAttr
   10              0.000008 hi def link cssHyerlinkAttr cssAttr
   10              0.000008 hi def link cssInteractAttr cssAttr
   10              0.000009 hi def link cssLineboxAttr cssAttr
   10              0.000009 hi def link cssListAttr cssAttr
   10              0.000009 hi def link cssMarginAttr cssAttr
   10              0.000008 hi def link cssMarqueeAttr cssAttr
   10              0.000008 hi def link cssMultiColumnAttr cssAttr
   10              0.000009 hi def link cssPaddingAttr cssAttr
   10              0.000009 hi def link cssPagedMediaAttr cssAttr
   10              0.000009 hi def link cssPositioningAttr cssAttr
   10              0.000008 hi def link cssObjectAttr cssAttr
   10              0.000009 hi def link cssGradientAttr cssAttr
   10              0.000008 hi def link cssPrintAttr cssAttr
   10              0.000010 hi def link cssRubyAttr cssAttr
   10              0.000008 hi def link cssSpeechAttr cssAttr
   10              0.000008 hi def link cssTableAttr cssAttr
   10              0.000010 hi def link cssTextAttr cssAttr
   10              0.000009 hi def link cssTransformAttr cssAttr
   10              0.000008 hi def link cssTransitionAttr cssAttr
   10              0.000008 hi def link cssUIAttr cssAttr
   10              0.000008 hi def link cssIEUIAttr cssAttr
   10              0.000008 hi def link cssAuralAttr cssAttr
   10              0.000008 hi def link cssRenderAttr cssAttr
   10              0.000008 hi def link cssCascadeAttr cssAttr
   10              0.000009 hi def link cssCommonAttr cssAttr
                            
   10              0.000008 hi def link cssPseudoClassId PreProc
   10              0.000009 hi def link cssPseudoClassLang Constant
   10              0.000008 hi def link cssValueLength Number
   10              0.000009 hi def link cssValueInteger Number
   10              0.000009 hi def link cssValueNumber Number
   10              0.000009 hi def link cssValueAngle Number
   10              0.000008 hi def link cssValueTime Number
   10              0.000009 hi def link cssValueFrequency Number
   10              0.000008 hi def link cssFunction Constant
   10              0.000028 hi def link cssURL String
   10              0.000009 hi def link cssFunctionName Function
   10              0.000009 hi def link cssFunctionComma Function
   10              0.000008 hi def link cssColor Constant
   10              0.000008 hi def link cssIdentifier Function
   10              0.000009 hi def link cssAtRule Include
   10              0.000013 hi def link cssAtKeyword PreProc
   10              0.000009 hi def link cssImportant Special
   10              0.000009 hi def link cssCustomProp Special
   10              0.000009 hi def link cssBraces Function
   10              0.000008 hi def link cssBraceError Error
   10              0.000009 hi def link cssError Error
   10              0.000008 hi def link cssUnicodeEscape Special
   10              0.000008 hi def link cssStringQQ String
   10              0.000008 hi def link cssStringQ String
   10              0.000009 hi def link cssAttributeSelector String
   10              0.000008 hi def link cssMediaType Special
   10              0.000009 hi def link cssMediaComma Normal
   10              0.000009 hi def link cssAtRuleLogical Statement
   10              0.000008 hi def link cssMediaProp cssProp
   10              0.000009 hi def link cssMediaAttr cssAttr
   10              0.000008 hi def link cssPagePseudo PreProc
   10              0.000009 hi def link cssPageMarginProp cssAtKeyword
   10              0.000008 hi def link cssPageProp cssProp
   10              0.000009 hi def link cssKeyFrameProp Constant
   10              0.000010 hi def link cssFontDescriptor Special
   10              0.000009 hi def link cssFontDescriptorProp cssProp
   10              0.000008 hi def link cssFontDescriptorAttr cssAttr
   10              0.000008 hi def link cssUnicodeRange Constant
   10              0.000008 hi def link cssClassName Function
   10              0.000009 hi def link cssClassNameDot Function
   10              0.000009 hi def link cssProp StorageClass
   10              0.000008 hi def link cssAttr Constant
   10              0.000009 hi def link cssUnitDecorators Number
   10              0.000009 hi def link cssNoise Noise
                            
   10              0.000039 let b:current_syntax = "css"
                            
   10              0.000014 if main_syntax == 'css'
                              unlet main_syntax
   10              0.000005 endif
                            
   10   0.000127   0.000096 let &cpo = s:cpo_save
   10              0.000015 unlet s:cpo_save
                            
                            " vim: ts=8

SCRIPT  /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/yaml.vim
Sourced 10 times
Total time:   0.007753
 Self time:   0.006868

count  total (s)   self (s)
                            " Vim syntax file
                            " Language:         YAML (YAML Ain't Markup Language) 1.2
                            " Maintainer:       Nikolai Pavlov <zyx.vim@gmail.com>
                            " First author:     Nikolai Weibull <now@bitwi.se>
                            " Latest Revision:  2024-04-01
                            
   10              0.000023 if exists('b:current_syntax')
                                finish
   10              0.000005 endif
                            
   10              0.000020 let s:cpo_save = &cpo
   10   0.000060   0.000049 set cpo&vim
                            
                            " Choose the schema to use
                            " TODO: Validate schema
   10              0.000019 if !exists('b:yaml_schema')
    1              0.000001     if exists('g:yaml_schema')
                                    let b:yaml_schema = g:yaml_schema
    1              0.000001     else
    1              0.000001         let b:yaml_schema = 'core'
    1              0.000001     endif
   10              0.000005 endif
                            
   10              0.000014 let s:ns_char = '\%([\n\r\uFEFF \t]\@!\p\)'
   10              0.000013 let s:ns_word_char = '[[:alnum:]_\-]'
   10              0.000024 let s:ns_uri_char  = '\%(%\x\x\|'.s:ns_word_char.'\|[#/;?:@&=+$,.!~*''()[\]]\)'
   10              0.000021 let s:ns_tag_char  = '\%(%\x\x\|'.s:ns_word_char.'\|[#/;?:@&=+$.~*''()]\)'
   10              0.000014 let s:c_indicator      = '[\-?:,[\]{}#&*!|>''"%@`]'
   10              0.000013 let s:c_flow_indicator = '[,[\]{}]'
                            
   10              0.000098 let s:ns_anchor_char = substitute(s:ns_char, '\v\C[\zs', '\=s:c_flow_indicator[1:-2]', '')
   10              0.000056 let s:ns_char_without_c_indicator = substitute(s:ns_char, '\v\C[\zs', '\=s:c_indicator[1:-2]', '')
                            
   10              0.000015 let s:_collection = '[^\@!\(\%(\\\.\|\[^\\\]]\)\+\)]'
   10              0.000015 let s:_neg_collection = '[^\(\%(\\\.\|\[^\\\]]\)\+\)]'
   10              0.000039 function s:SimplifyToAssumeAllPrintable(p)
                                return substitute(a:p, '\V\C\\%('.s:_collection.'\\@!\\p\\)', '[^\1]', '')
                            endfunction
   10   0.000274   0.000094 let s:ns_char = s:SimplifyToAssumeAllPrintable(s:ns_char)
   10   0.000187   0.000066 let s:ns_anchor_char = s:SimplifyToAssumeAllPrintable(s:ns_anchor_char)
   10   0.000191   0.000066 let s:ns_char_without_c_indicator = s:SimplifyToAssumeAllPrintable(s:ns_char_without_c_indicator)
                            
   10              0.000017 function s:SimplifyAdjacentCollections(p)
                                return substitute(a:p, '\V\C'.s:_collection.'\\|'.s:_collection, '[\1\2]', 'g')
                            endfunction
   10   0.000256   0.000065 let s:ns_uri_char = s:SimplifyAdjacentCollections(s:ns_uri_char)
   10   0.000177   0.000062 let s:ns_tag_char = s:SimplifyAdjacentCollections(s:ns_tag_char)
                            
   10              0.000020 let s:c_verbatim_tag = '!<'.s:ns_uri_char.'\+>'
   10              0.000021 let s:c_named_tag_handle     = '!'.s:ns_word_char.'\+!'
   10              0.000017 let s:c_secondary_tag_handle = '!!'
   10              0.000014 let s:c_primary_tag_handle   = '!'
   10              0.000040 let s:c_tag_handle = '\%('.s:c_named_tag_handle.
                                        \         '\|'.s:c_secondary_tag_handle.
                                        \         '\|'.s:c_primary_tag_handle.'\)'
   10              0.000022 let s:c_ns_shorthand_tag = s:c_tag_handle . s:ns_tag_char.'\+'
   10              0.000013 let s:c_non_specific_tag = '!'
   10              0.000034 let s:c_ns_tag_property = s:c_verbatim_tag.
                                        \        '\|'.s:c_ns_shorthand_tag.
                                        \        '\|'.s:c_non_specific_tag
                            
   10              0.000017 let s:c_ns_anchor_name = s:ns_anchor_char.'\+'
   10              0.000018 let s:c_ns_anchor_property =  '&'.s:c_ns_anchor_name
   10              0.000018 let s:c_ns_alias_node      = '\*'.s:c_ns_anchor_name
   10              0.000029 let s:c_ns_properties      = '\%(\%('.s:c_ns_tag_property.'\|'.s:c_ns_anchor_property.'\)\s\+\)\+'
                            
   10              0.000016 let s:ns_directive_name = s:ns_char.'\+'
                            
   10              0.000019 let s:ns_local_tag_prefix  = '!'.s:ns_uri_char.'*'
   10              0.000022 let s:ns_global_tag_prefix = s:ns_tag_char.s:ns_uri_char.'*'
   10              0.000025 let s:ns_tag_prefix = s:ns_local_tag_prefix.
                                        \    '\|'.s:ns_global_tag_prefix
                            
   10              0.000014 let s:ns_plain_safe_out = s:ns_char
   10              0.000024 let s:ns_plain_safe_in  = '\%('.s:c_flow_indicator.'\@!'.s:ns_char.'\)'
                            
   10              0.000141 let s:ns_plain_safe_in = substitute(s:ns_plain_safe_in, '\V\C\\%('.s:_collection.'\\@!'.s:_neg_collection.'\\)', '[^\1\2]', '')
   10              0.000096 let s:ns_plain_safe_in_without_colhash = substitute(s:ns_plain_safe_in, '\V\C'.s:_neg_collection, '[^\1:#]', '')
   10              0.000077 let s:ns_plain_safe_out_without_colhash = substitute(s:ns_plain_safe_out, '\V\C'.s:_neg_collection, '[^\1:#]', '')
                            
   10              0.000027 let s:ns_plain_first_in  = '\%('.s:ns_char_without_c_indicator.'\|[?:\-]\%('.s:ns_plain_safe_in.'\)\@=\)'
   10              0.000026 let s:ns_plain_first_out = '\%('.s:ns_char_without_c_indicator.'\|[?:\-]\%('.s:ns_plain_safe_out.'\)\@=\)'
                            
   10              0.000039 let s:ns_plain_char_in  = '\%('.s:ns_char.'#\|:'.s:ns_plain_safe_in.'\|'.s:ns_plain_safe_in_without_colhash.'\)'
   10              0.000030 let s:ns_plain_char_out = '\%('.s:ns_char.'#\|:'.s:ns_plain_safe_out.'\|'.s:ns_plain_safe_out_without_colhash.'\)'
                            
   10              0.000021 let s:ns_plain_out = s:ns_plain_first_out . s:ns_plain_char_out.'*'
   10              0.000022 let s:ns_plain_in  = s:ns_plain_first_in  . s:ns_plain_char_in.'*'
                            
                            
   10              0.000036 syn keyword yamlTodo            contained TODO FIXME XXX NOTE
                            
   10              0.000060 syn region  yamlComment         display oneline start='\%\(^\|\s\)#' end='$'
                                        \                   contains=yamlTodo
                            
   10              0.000147 execute 'syn region yamlDirective oneline start='.string('^\ze%'.s:ns_directive_name.'\s\+').' '.
                                        \                            'end="$" '.
                                        \                            'contains=yamlTAGDirective,'.
                                        \                                     'yamlYAMLDirective,'.
                                        \                                     'yamlReservedDirective '.
                                        \                            'keepend'
                            
   10              0.000031 syn match yamlTAGDirective /%TAG\ze\s/ contained nextgroup=yamlTagHandle skipwhite
   10              0.000076 execute 'syn match yamlTagHandle' string(s:c_tag_handle)  'contained nextgroup=yamlTagPrefix skipwhite'
   10              0.000123 execute 'syn match yamlTagPrefix' string(s:ns_tag_prefix) 'contained nextgroup=yamlComment skipwhite'
                            
   10              0.000027 syn match yamlYAMLDirective /%YAML\ze\s/ contained nextgroup=yamlYAMLVersion skipwhite
   10              0.000027 syn match yamlYAMLVersion   /\d\+\.\d\+/ contained nextgroup=yamlComment skipwhite
                            
   10              0.000091 execute 'syn match yamlReservedDirective contained nextgroup=yamlComment '.
                                        \string('%\%(\%(TAG\|YAML\)\s\)\@!'.s:ns_directive_name)
                            
   10              0.000062 syn region yamlFlowString matchgroup=yamlFlowStringDelimiter start='"' skip='\\"' end='"'
                                        \ contains=yamlEscape contained nextgroup=yamlFlowMappingDelimiter,yamlComment skipwhite
   10              0.000055 syn region yamlFlowString matchgroup=yamlFlowStringDelimiter start="'" skip="''"  end="'"
                                        \ contains=yamlSingleEscape contained nextgroup=yamlFlowMappingDelimiter,yamlComment skipwhite
   10              0.000054 syn match  yamlEscape contained '\\\%([\\"abefnrtv\^0_ NLP\n]\|x\x\x\|u\x\{4}\|U\x\{8}\)'
   10              0.000017 syn match  yamlSingleEscape contained "''"
                            
   10              0.000023 syn cluster yamlConstant contains=yamlBool,yamlNull
                            
   10              0.000023 syn cluster yamlFlowNode contains=yamlFlowString,yamlFlowMapping,yamlFlowCollection
   10              0.000025 syn cluster yamlFlowNode      add=yamlFlowMappingKey,yamlFlowMappingKeyStart,yamlFlowMappingMerge
   10              0.000029 syn cluster yamlFlowNode      add=@yamlConstant,yamlPlainScalar,yamlFloat,yamlComment
   10              0.000026 syn cluster yamlFlowNode      add=yamlTimestamp,yamlInteger,yamlAlias,yamlFlowNodeProperties
   10              0.000049 syn region yamlFlowMapping    matchgroup=yamlFlowIndicator start='{\@<!{{\@!' end='}' contains=@yamlFlowNode
   10              0.000036 syn region yamlFlowCollection matchgroup=yamlFlowIndicator start='\[' end='\]' contains=@yamlFlowNode
                            
   10              0.000101 execute 'syn match yamlPlainScalar /'.s:ns_plain_out.'/'
   10              0.000097 execute 'syn match yamlPlainScalar contained /'.s:ns_plain_in.'/'
                            
   10              0.000205 execute 'syn match yamlFlowMappingKey /'.s:ns_plain_in.'\%(\s\+'.s:ns_plain_in.'\)*\ze\s*:\%(\s\|$\)/ contained '.
                                        \'nextgroup=yamlFlowMappingDelimiter skipwhite'
   10              0.000025 syn match yamlFlowMappingKeyStart      /?/ contained nextgroup=@yamlFlowNode skipwhite
   10              0.000026 syn match yamlFlowMappingMerge /<<\ze\s*:/ contained nextgroup=yamlFlowMappingDelimiter skipwhite
   10              0.000022 syn match yamlFlowMappingDelimiter     /:/ contained nextgroup=@yamlFlowNode skipwhite
   10              0.000265 execute 'syn match yamlFlowNodeProperties' string(s:c_ns_properties)
                                        \ 'contained contains=yamlNodeTag,yamlAnchor nextgroup=@yamlFlowNode skipwhite'
                            
   10              0.000181 execute 'syn match yamlBlockMappingKey /^\s*\zs'.s:ns_plain_out.'\%(\s\+'.s:ns_plain_out.'\)*\ze\s*:\%(\s\|$\)/ '.
                                        \'nextgroup=yamlBlockMappingDelimiter skipwhite'
   10              0.000162 execute 'syn match yamlBlockMappingKey        /'.s:ns_plain_out.'\%(\s\+'.s:ns_plain_out.'\)*\ze\s*:\%(\s\|$\)/ contained '.
                                        \'nextgroup=yamlBlockMappingDelimiter skipwhite'
   10              0.000066 syn match yamlBlockMappingKeyString /^\s*\zs\%("\%([^"]\|\\"\)*"\|'\%([^']\|''\)*'\)\ze\s*:\%(\s\|$\)/
                                        \ contains=yamlFlowString nextgroup=yamlBlockMappingDelimiter skipwhite
   10              0.000055 syn match yamlBlockMappingKeyString        /\%("\%([^"]\|\\"\)*"\|'\%([^']\|''\)*'\)\ze\s*:\%(\s\|$\)/ contained
                                        \ contains=yamlFlowString nextgroup=yamlBlockMappingDelimiter skipwhite
   10              0.000038 syn match yamlBlockMappingMerge   /^\s*\zs<<\ze\s*:\%(\s\|$\)/           nextgroup=yamlBlockMappingDelimiter skipwhite
   10              0.000029 syn match yamlBlockMappingMerge          /<<\ze\s*:\%(\s\|$\)/ contained nextgroup=yamlBlockMappingDelimiter skipwhite
                            
   10              0.000041 syn match yamlBlockMappingDelimiter    /^\s*\zs:\ze\%(\s\|$\)/           nextgroup=@yamlBlockNode skipwhite
   10              0.000051 syn match yamlBlockMappingDelimiter           /:\ze\%(\s\|$\)/ contained nextgroup=@yamlBlockNode skipwhite
   10              0.000032 syn match yamlBlockMappingKeyStart     /^\s*\zs?\ze\%(\s\|$\)/           nextgroup=@yamlBlockNode skipwhite
   10              0.000025 syn match yamlBlockMappingKeyStart            /?\ze\%(\s\|$\)/ contained nextgroup=@yamlBlockNode skipwhite
                            
   10              0.000032 syn match yamlBlockCollectionItemStart /^\s*\zs-\ze\%(\s\|$\)/           nextgroup=@yamlBlockNode skipwhite
   10              0.000024 syn match yamlBlockCollectionItemStart        /-\ze\%(\s\|$\)/ contained nextgroup=@yamlBlockNode skipwhite
                            
   10              0.000264 execute 'syn match yamlBlockNodeProperties' string(s:c_ns_properties)
                                        \ 'contained contains=yamlNodeTag,yamlAnchor nextgroup=@yamlFlowNode,yamlBlockScalarHeader skipwhite'
   10              0.000057 syn match yamlBlockScalarHeader '[|>]\%([1-9][+-]\|[+-]\?[1-9]\?\)\%(\s\+#.*\)\?$' contained
                                        \ contains=yamlComment nextgroup=yamlBlockString skipnl
   10              0.000055 syn region yamlBlockString start=/^\z(\s\+\)/ skip=/^$/ end=/^\%(\z1\)\@!/ contained
                            
   10              0.000042 syn cluster yamlBlockNode contains=@yamlFlowNode,yamlBlockMappingKey,yamlBlockMappingKeyString,
                                        \yamlBlockMappingMerge,yamlBlockMappingKeyStart,yamlBlockCollectionItemStart,
                                        \yamlBlockNodeProperties,yamlBlockScalarHeader
                            
   10              0.000027 syn cluster yamlScalarWithSpecials contains=yamlPlainScalar,yamlBlockMappingKey,yamlFlowMappingKey
                            
   10   0.000216   0.000085 let s:_bounder = s:SimplifyToAssumeAllPrintable('\%([[\]{}, \t]\@!\p\)')
   10              0.000028 if b:yaml_schema is# 'json'
                                syn keyword yamlNull null contained containedin=@yamlScalarWithSpecials
                                syn keyword yamlBool true false
                                exe 'syn match   yamlInteger /'.s:_bounder.'\@1<!\%(0\|-\=[1-9][0-9]*\)'.s:_bounder.'\@!/ contained containedin=@yamlScalarWithSpecials'
                                exe 'syn match   yamlFloat   /'.s:_bounder.'\@1<!\%(-\=[1-9][0-9]*\%(\.[0-9]*\)\=\(e[-+]\=[0-9]\+\)\=\|0\|-\=\.inf\|\.nan\)'.s:_bounder.'\@!/ contained containedin=@yamlScalarWithSpecials'
   10              0.000015 elseif b:yaml_schema is# 'core'
   10              0.000030     syn keyword yamlNull null Null NULL contained containedin=@yamlScalarWithSpecials
   10              0.000034     syn keyword yamlBool true True TRUE false False FALSE contained containedin=@yamlScalarWithSpecials
   10              0.000076     exe 'syn match   yamlNull /'.s:_bounder.'\@1<!\~'.s:_bounder.'\@!/ contained containedin=@yamlScalarWithSpecials'
   10              0.000157     exe 'syn match   yamlInteger /'.s:_bounder.'\@1<!\%([-+]\=\%(\%(0\%(b[0-1_]\+\|o\?[0-7_]\+\|x[0-9a-fA-F_]\+\)\=\|\%([1-9][0-9_]*\%(:[0-5]\=\d\)\+\)\)\|[1-9][0-9_]*\)\)'.s:_bounder.'\@!/ contained containedin=@yamlScalarWithSpecials'
   10              0.000172     exe 'syn match   yamlFloat /'.s:_bounder.'\@1<!\%([-+]\=\%(\%(\d[0-9_]*\)\.[0-9_]*\%([eE][-+]\=\d\+\)\=\|\.[0-9_]\+\%([eE][-+]\=[0-9]\+\)\=\|\d[0-9_]*\%(:[0-5]\=\d\)\+\.[0-9_]*\|\.\%(inf\|Inf\|INF\)\)\|\%(\.\%(nan\|NaN\|NAN\)\)\)'.s:_bounder.'\@!/ contained containedin=@yamlScalarWithSpecials'
                            elseif b:yaml_schema is# 'pyyaml'
                                syn keyword yamlNull null Null NULL contained containedin=@yamlScalarWithSpecials
                                syn keyword yamlBool true True TRUE false False FALSE yes Yes YES no No NO on On ON off Off OFF contained containedin=@yamlScalarWithSpecials
                                exe 'syn match   yamlNull /'.s:_bounder.'\@1<!\~'.s:_bounder.'\@!/ contained containedin=@yamlScalarWithSpecials'
                                exe 'syn match  yamlFloat /'.s:_bounder.'\@1<!\%(\v[-+]?%(\d[0-9_]*)\.[0-9_]*%([eE][-+]\d+)?|\.[0-9_]+%([eE][-+]\d+)?|[-+]?\d[0-9_]*%(\:[0-5]?\d)+\.[0-9_]*|[-+]?\.%(inf|Inf|INF)|\.%(nan|NaN|NAN)\m\)'.s:_bounder.'\@!/ contained containedin=@yamlScalarWithSpecials'
                                exe 'syn match  yamlInteger /'.s:_bounder.'\@1<!\%(\v[-+]?0b[0-1_]+|[-+]?0[0-7_]+|[-+]?%(0|[1-9][0-9_]*)|[-+]?0x[0-9a-fA-F_]+|[-+]?[1-9][0-9_]*%(:[0-5]?\d)+\m\)'.s:_bounder.'\@!/ contained containedin=@yamlScalarWithSpecials'
                                exe 'syn match  yamlTimestamp /'.s:_bounder.'\@1<!\%(\v\d\d\d\d\-\d\d\-\d\d|\d\d\d\d \-\d\d? \-\d\d?%([Tt]|[ \t]+)\d\d?\:\d\d \:\d\d %(\.\d*)?%([ \t]*%(Z|[-+]\d\d?%(\:\d\d)?))?\m\)'.s:_bounder.'\@!/ contained containedin=@yamlScalarWithSpecials'
                            elseif b:yaml_schema is# 'failsafe'
                                " Nothing
   10              0.000006 endif
   10              0.000013 unlet s:_bounder
                            
                            
   10              0.000145 execute 'syn match yamlNodeTag '.string(s:c_ns_tag_property)
   10              0.000063 execute 'syn match yamlAnchor  '.string(s:c_ns_anchor_property)
   10              0.000058 execute 'syn match yamlAlias   '.string(s:c_ns_alias_node)
                            
   10              0.000053 syn match yamlDocumentStart '^---\ze\%(\s\|$\)'
   10              0.000032 syn match yamlDocumentEnd   '^\.\.\.\ze\%(\s\|$\)'
                            
   10              0.000015 hi def link yamlTodo                     Todo
   10              0.000010 hi def link yamlComment                  Comment
                            
   10              0.000009 hi def link yamlDocumentStart            PreProc
   10              0.000009 hi def link yamlDocumentEnd              PreProc
                            
   10              0.000010 hi def link yamlDirectiveName            Keyword
                            
   10              0.000011 hi def link yamlTAGDirective             yamlDirectiveName
   10              0.000011 hi def link yamlTagHandle                String
   10              0.000010 hi def link yamlTagPrefix                String
                            
   10              0.000010 hi def link yamlYAMLDirective            yamlDirectiveName
   10              0.000010 hi def link yamlReservedDirective        Error
   10              0.000009 hi def link yamlYAMLVersion              Number
                            
   10              0.000009 hi def link yamlString                   String
   10              0.000010 hi def link yamlFlowString               yamlString
   10              0.000010 hi def link yamlFlowStringDelimiter      yamlString
   10              0.000010 hi def link yamlEscape                   SpecialChar
   10              0.000010 hi def link yamlSingleEscape             SpecialChar
                            
   10              0.000010 hi def link yamlMappingKey               Identifier
   10              0.000010 hi def link yamlMappingKeyStart          Special
   10              0.000009 hi def link yamlMappingMerge             Special
   10              0.000009 hi def link yamlKeyValueDelimiter        Special
                            
   10              0.000009 hi def link yamlFlowIndicator            Special
   10              0.000010 hi def link yamlFlowMappingKey           yamlMappingKey
   10              0.000011 hi def link yamlFlowMappingKeyStart      yamlMappingKeyStart
   10              0.000010 hi def link yamlFlowMappingMerge         yamlMappingMerge
   10              0.000010 hi def link yamlFlowMappingDelimiter     yamlKeyValueDelimiter
                            
   10              0.000010 hi def link yamlBlockMappingKey          yamlMappingKey
   10              0.000010 hi def link yamlBlockMappingKeyStart     yamlMappingKeyStart
   10              0.000010 hi def link yamlBlockMappingMerge        yamlMappingMerge
   10              0.000012 hi def link yamlBlockMappingDelimiter    yamlKeyValueDelimiter
   10              0.000010 hi def link yamlBlockCollectionItemStart Label
   10              0.000009 hi def link yamlBlockScalarHeader        Special
                            " We do not link yamlBlockString to yamlString, because yamlPlainScalar is
                            " not highlighted as string neighter, and also due to historical reasons.
                            " hi def link yamlBlockString              yamlString
                            
   10              0.000009 hi def link yamlConstant                 Constant
                            
   10              0.000010 hi def link yamlNull                     yamlConstant
   10              0.000010 hi def link yamlBool                     yamlConstant
                            
   10              0.000010 hi def link yamlAnchor                   Type
   10              0.000009 hi def link yamlAlias                    Type
   10              0.000009 hi def link yamlNodeTag                  Type
                            
   10              0.000008 hi def link yamlInteger                  Number
   10              0.000009 hi def link yamlFloat                    Float
   10              0.000009 hi def link yamlTimestamp                Number
                            
   10              0.000019 let b:current_syntax = "yaml"
                            
   10              0.000128 unlet s:ns_char s:ns_word_char s:ns_uri_char s:ns_tag_char s:c_indicator s:c_flow_indicator
                                        \ s:ns_anchor_char s:ns_char_without_c_indicator s:_collection s:_neg_collection
                                        \ s:c_verbatim_tag s:c_named_tag_handle s:c_secondary_tag_handle s:c_primary_tag_handle
                                        \ s:c_tag_handle s:c_ns_shorthand_tag s:c_non_specific_tag s:c_ns_tag_property
                                        \ s:c_ns_anchor_name s:c_ns_anchor_property s:c_ns_alias_node s:c_ns_properties
                                        \ s:ns_directive_name s:ns_local_tag_prefix s:ns_global_tag_prefix s:ns_tag_prefix
                                        \ s:ns_plain_safe_out s:ns_plain_safe_in s:ns_plain_safe_in_without_colhash s:ns_plain_safe_out_without_colhash
                                        \ s:ns_plain_first_in s:ns_plain_first_out s:ns_plain_char_in s:ns_plain_char_out s:ns_plain_out s:ns_plain_in
   10              0.000025 delfunction s:SimplifyAdjacentCollections
   10              0.000016 delfunction s:SimplifyToAssumeAllPrintable
                            
   10   0.000058   0.000048 let &cpo = s:cpo_save
   10              0.000010 unlet s:cpo_save
                            
                            " vim: set et sw=4 sts=4 ts=8:

SCRIPT  /home/michaelroddy/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/indent.vim
Sourced 1 time
Total time:   0.000146
 Self time:   0.000146

count  total (s)   self (s)
                            "
                            " vsnip#indent#get_one_indent
                            "
    1              0.000009 function! vsnip#indent#get_one_indent() abort
                              return !&expandtab ? "\t" : repeat(' ', &shiftwidth ? &shiftwidth : &tabstop)
                            endfunction
                            
                            "
                            " vsnip#indent#get_base_indent
                            "
    1              0.000006 function! vsnip#indent#get_base_indent(text) abort
                              return matchstr(a:text, '^\s*')
                            endfunction
                            
                            "
                            " vsnip#indent#adjust_snippet_body
                            "
    1              0.000005 function! vsnip#indent#adjust_snippet_body(line, text) abort
                              let l:one_indent = vsnip#indent#get_one_indent()
                              let l:base_indent = vsnip#indent#get_base_indent(a:line)
                              let l:text = a:text
                              if l:one_indent !=# "\t"
                                while match(l:text, "\\%(^\\|\n\\)\\s*\\zs\\t") != -1
                                  let l:text = substitute(l:text, "\\%(^\\|\n\\)\\s*\\zs\\t", l:one_indent, 'g') " convert \t as one indent
                                endwhile
                              endif
                              let l:text = substitute(l:text, "\n\\zs", l:base_indent, 'g') " add base_indent for all lines
                              let l:text = substitute(l:text, "\n\\s*\\ze\n", "\n", 'g') " remove empty line's indent
                              return l:text
                            endfunction
                            
                            "
                            " vsnip#indent#trim_base_indent
                            "
    1              0.000004 function! vsnip#indent#trim_base_indent(text) abort
                              let l:is_char_wise = match(a:text, "\n$") == -1
                              let l:text = substitute(a:text, "\n$", '', 'g')
                            
                              let l:is_first_line = v:true
                              let l:base_indent = ''
                              for l:line in split(l:text, "\n", v:true)
                                " Ignore the first line when the text created as char-wise.
                                if l:is_char_wise && l:is_first_line
                                  let l:is_first_line = v:false
                                  continue
                                endif
                            
                                " Ignore empty line.
                                if l:line ==# ''
                                  continue
                                endif
                            
                                " Detect most minimum base indent.
                                let l:indent = matchstr(l:line, '^\s*')
                                if l:base_indent ==# '' || strlen(l:indent) < strlen(l:base_indent)
                                  let l:base_indent = l:indent
                                endif
                              endfor
                              return substitute(l:text, "\\%(^\\|\n\\)\\zs\\V" . l:base_indent, '', 'g')
                            endfunction

SCRIPT  /home/michaelroddy/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/parser.vim
Sourced 1 time
Total time:   0.004237
 Self time:   0.001674

count  total (s)   self (s)
    1   0.000768   0.000389 let s:Combinator = vsnip#parser#combinator#import()
                            
                            "
                            " vsnip#snippet#parser#parse.
                            " @see https://github.com/Microsoft/language-server-protocol/blob/master/snippetSyntax.md
                            "
    1              0.000004 function! vsnip#snippet#parser#parse(text) abort
                              if strlen(a:text) == 0
                                return []
                              endif
                            
                              let l:parsed = s:parser.parse(a:text, 0)
                              if !l:parsed[0]
                                throw json_encode({ 'text': a:text, 'result': l:parsed })
                              endif
                              return l:parsed[1]
                            endfunction
                            
    1              0.000009 let s:skip = s:Combinator.skip
    1              0.000007 let s:token = s:Combinator.token
    1              0.000007 let s:many = s:Combinator.many
    1              0.000007 let s:or = s:Combinator.or
    1              0.000006 let s:seq = s:Combinator.seq
    1              0.000006 let s:lazy = s:Combinator.lazy
    1              0.000007 let s:option = s:Combinator.option
    1              0.000007 let s:pattern = s:Combinator.pattern
    1              0.000006 let s:map = s:Combinator.map
                            
                            "
                            " primitives.
                            "
    1   0.000045   0.000016 let s:dollar = s:token('$')
    1   0.000042   0.000018 let s:open = s:token('{')
    1   0.000036   0.000014 let s:close = s:token('}')
    1   0.000035   0.000014 let s:colon = s:token(':')
    1   0.000035   0.000014 let s:slash = s:token('/')
    1   0.000036   0.000014 let s:comma = s:token(',')
    1   0.000035   0.000013 let s:pipe = s:token('|')
    1   0.000043   0.000015 let s:varname = s:pattern('[_[:alpha:]]\w*')
    1   0.000113   0.000032 let s:int = s:map(s:pattern('\d\+'), { value -> str2nr(value) })
    1              0.000024 let s:text = { stop, escape -> s:map(
                            \   s:skip(stop, escape),
                            \   { value -> {
                            \     'type': 'text',
                            \     'raw': value[0],
                            \     'escaped': value[1]
                            \   }
                            \ }) }
    1   0.000159   0.000033 let s:regex = s:map(s:text(['/'], []), { value -> {
                            \   'type': 'regex',
                            \   'pattern': value.raw
                            \ } })
                            
                            "
                            " any (without text).
                            "
    1   0.000168   0.000065 let s:any = s:or(
                            \   s:lazy({ -> s:choice }),
                            \   s:lazy({ -> s:variable }),
                            \   s:lazy({ -> s:tabstop }),
                            \   s:lazy({ -> s:placeholder }),
                            \ )
                            
                            "
                            " format.
                            "
    1   0.000079   0.000031 let s:format1 = s:map(s:seq(s:dollar, s:int), { value -> {
                            \   'type': 'format',
                            \   'id': value[1]
                            \ } })
    1   0.000078   0.000032 let s:format2 = s:map(s:seq(s:dollar, s:open, s:int, s:close), { value -> {
                            \   'type': 'format',
                            \   'id': value[2]
                            \ } })
    1   0.000382   0.000139 let s:format3 = s:map(
                            \ s:seq(
                            \   s:dollar,
                            \   s:open,
                            \   s:int,
                            \   s:colon,
                            \   s:or(
                            \     s:token('/upcase'),
                            \     s:token('/downcase'),
                            \     s:token('/capitalize'),
                            \     s:token('/camelcase'),
                            \     s:token('/pascalcase'),
                            \     s:token('+if'),
                            \     s:token('?if:else'),
                            \     s:token('-else'),
                            \     s:token('else')
                            \   ),
                            \   s:close
                            \ ), { value -> {
                            \   'type': 'format',
                            \   'id': value[2],
                            \   'modifier': value[4]
                            \ } })
    1   0.000036   0.000016 let s:format = s:or(s:format1, s:format2, s:format3)
                            
                            "
                            " transform
                            "
    1   0.000399   0.000125 let s:transform = s:map(s:seq(
                            \   s:slash,
                            \   s:regex,
                            \   s:slash,
                            \   s:many(s:or(s:format, s:text(['/', '$'], []))),
                            \   s:slash,
                            \   s:option(s:many(s:or(s:token('i'), s:token('g'))))
                            \ ), { value -> {
                            \   'type': 'transform',
                            \   'regex': value[1],
                            \   'format': value[3],
                            \   'option': value[5]
                            \ } })
                            
                            "
                            " variable
                            "
    1   0.000066   0.000026 let s:variable1 = s:map(s:seq(s:dollar, s:varname), { value -> {
                            \   'type': 'variable',
                            \   'name': value[1],
                            \   'children': [],
                            \ } })
    1   0.000071   0.000030 let s:variable2 = s:map(s:seq(s:dollar, s:open, s:varname, s:close), { value -> {
                            \   'type': 'variable',
                            \   'name': value[2],
                            \   'children': [],
                            \ } })
    1   0.000227   0.000058 let s:variable3 = s:map(s:seq(
                            \   s:dollar,
                            \   s:open,
                            \   s:varname,
                            \   s:colon,
                            \   s:many(s:or(s:any, s:text(['$', '}'], []))),
                            \   s:close
                            \ ), { value -> {
                            \   'type': 'variable',
                            \   'name': value[2],
                            \   'children': value[4]
                            \ } })
    1   0.000070   0.000029 let s:variable4 = s:map(s:seq(s:dollar, s:open, s:varname, s:transform, s:close), { value -> {
                            \   'type': 'variable',
                            \   'name': value[2],
                            \   'transform': value[3],
                            \   'children': [],
                            \ } })
                            
    1   0.000032   0.000015 let s:variable = s:or(s:variable1, s:variable2, s:variable3, s:variable4)
                            
                            "
                            " placeholder.
                            "
    1   0.000265   0.000083 let s:placeholder = s:map(s:seq(
                            \   s:dollar,
                            \   s:open,
                            \   s:int,
                            \   s:colon,
                            \   s:many(s:or(s:any, s:text(['$', '}'], []))),
                            \   s:close
                            \ ), { value -> {
                            \   'type': 'placeholder',
                            \   'id': value[2],
                            \   'children': value[4]
                            \ } })
                            
                            "
                            " tabstop
                            "
    1   0.000077   0.000030 let s:tabstop1 = s:map(s:seq(s:dollar, s:int), { value -> {
                            \   'type': 'placeholder',
                            \   'id': value[1],
                            \   'children': [],
                            \ } })
    1   0.000110   0.000043 let s:tabstop2 = s:map(s:seq(s:dollar, s:open, s:int, s:option(s:colon), s:close), { value -> {
                            \   'type': 'placeholder',
                            \   'id': value[2],
                            \   'children': [],
                            \ } })
    1   0.000095   0.000047 let s:tabstop3 = s:map(s:seq(s:dollar, s:open, s:int, s:transform, s:close), { value -> {
                            \   'type': 'placeholder',
                            \   'id': value[2],
                            \   'children': [],
                            \   'transform': value[3]
                            \ } })
    1   0.000040   0.000019 let s:tabstop = s:or(s:tabstop1, s:tabstop2, s:tabstop3)
                            
                            "
                            " choice
                            "
    1   0.000337   0.000102 let s:choice = s:map(s:seq(
                            \   s:dollar,
                            \   s:open,
                            \   s:int,
                            \   s:pipe,
                            \   s:many(
                            \     s:map(s:seq(s:text([',', '|'], []), s:option(s:comma)), { value -> value[0] }),
                            \   ),
                            \   s:pipe,
                            \   s:close
                            \ ), { value -> {
                            \   'type': 'placeholder',
                            \   'id': value[2],
                            \   'choice': value[4],
                            \   'children': [copy(value[4][0])],
                            \ } })
                            
                            "
                            " parser.
                            "
    1   0.000186   0.000040 let s:parser = s:many(s:or(s:any, s:text(['$'], ['}'])))

SCRIPT  /home/michaelroddy/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim
Sourced 1 time
Total time:   0.000302
 Self time:   0.000302

count  total (s)   self (s)
    1              0.000008 function! vsnip#parser#combinator#import() abort
                              return {
                              \   'skip': function('s:skip'),
                              \   'token': function('s:token'),
                              \   'many': function('s:many'),
                              \   'or': function('s:or'),
                              \   'seq': function('s:seq'),
                              \   'pattern': function('s:pattern'),
                              \   'lazy': function('s:lazy'),
                              \   'option': function('s:option'),
                              \   'map': function('s:map')
                              \ }
                            endfunction
                            
                            "
                            " string.
                            "
    1              0.000007 function! s:skip(stop, escape) abort
                              let l:fn = {}
                              let l:fn.stop = a:stop
                              let l:fn.escape = a:escape
                              function! l:fn.parse(text, pos) abort
                                let l:pos = a:pos
                                let l:value = ''
                            
                                let l:len = strchars(a:text)
                                while l:pos < l:len
                                  let l:char = s:getchar(a:text, l:pos)
                            
                                  " check escaped stop chars.
                                  if l:char ==# '\'
                                    let l:pos += 1
                                    let l:char = s:getchar(a:text, l:pos)
                                    if index(self.stop + self.escape + ['\'], l:char) == -1
                                      let l:value .= '\'
                                      continue " ignore invalid escape char.
                                    endif
                                    let l:pos += 1
                                    let l:value .= l:char
                                    continue
                                  endif
                            
                                  " check stop char.
                                  if index(self.stop, l:char) >= 0
                                    if a:pos != l:pos
                                      return [v:true, [strcharpart(a:text, a:pos, l:pos - a:pos), l:value], l:pos]
                                    else
                                      return [v:false, v:null, l:pos]
                                    endif
                                  endif
                            
                                  let l:value .= l:char
                                  let l:pos += 1
                                endwhile
                            
                                " everything was string.
                                return [v:true, [strcharpart(a:text, a:pos), l:value], l:len]
                              endfunction
                              return l:fn
                            endfunction
                            
                            "
                            " token.
                            "
    1              0.000004 function! s:token(token) abort
                              let l:fn = {}
                              let l:fn.token = a:token
                              function! l:fn.parse(text, pos) abort
                                let l:token_len = strchars(self.token)
                                let l:value = strcharpart(a:text, a:pos, l:token_len)
                                if l:value ==# self.token
                                  return [v:true, self.token, a:pos + l:token_len]
                                endif
                                return [v:false, v:null, a:pos]
                              endfunction
                              return l:fn
                            endfunction
                            
                            "
                            " many.
                            "
    1              0.000004 function! s:many(parser) abort
                              let l:fn = {}
                              let l:fn.parser = a:parser
                              function! l:fn.parse(text, pos) abort
                                let l:pos = a:pos
                                let l:values = []
                            
                                let l:len = strchars(a:text)
                                while l:pos < l:len
                                  let l:parsed = self.parser.parse(a:text, l:pos)
                                  if l:parsed[0]
                                    call add(l:values, l:parsed[1])
                                    let l:pos = l:parsed[2]
                                  else
                                    break
                                  endif
                                endwhile
                                if len(l:values) > 0
                                  return [v:true, l:values, l:pos]
                                else
                                  return [v:false, v:null, l:pos]
                                endif
                              endfunction
                              return l:fn
                            endfunction
                            
                            "
                            " or.
                            "
    1              0.000003 function! s:or(...) abort
                              let l:fn = {}
                              let l:fn.parsers = a:000
                              function! l:fn.parse(text, pos) abort
                                for l:parser in self.parsers
                                  let l:parsed = l:parser.parse(a:text, a:pos)
                                  if l:parsed[0]
                                    return l:parsed
                                  endif
                                endfor
                                return [v:false, v:null, a:pos]
                              endfunction
                              return l:fn
                            endfunction
                            
                            "
                            " seq.
                            "
    1              0.000003 function! s:seq(...) abort
                              let l:fn = {}
                              let l:fn.parsers = a:000
                              function! l:fn.parse(text, pos) abort
                                let l:pos = a:pos
                                let l:values = []
                                for l:parser in self.parsers
                                  let l:parsed = l:parser.parse(a:text, l:pos)
                                  if !l:parsed[0]
                                    return [v:false, v:null, a:pos]
                                  endif
                                  call add(l:values, l:parsed[1])
                                  let l:pos = l:parsed[2]
                                endfor
                                return [v:true, l:values, l:pos]
                              endfunction
                              return l:fn
                            endfunction
                            
                            "
                            " lazy.
                            "
    1              0.000004 function! s:lazy(callback) abort
                              let l:fn = {}
                              let l:fn.callback = a:callback
                              function! l:fn.parse(text, pos) abort
                                if !has_key(self, 'parser')
                                  let self.parser = self.callback()
                                endif
                                return self.parser.parse(a:text, a:pos)
                              endfunction
                              return l:fn
                            endfunction
                            
                            "
                            " pattern.
                            "
    1              0.000004 function! s:pattern(pattern) abort
                              let l:fn = {}
                              let l:fn.pattern = a:pattern[0] ==# '^' ? a:pattern : '^' . a:pattern
                              function! l:fn.parse(text, pos) abort
                                let l:text = strcharpart(a:text, a:pos)
                                let l:matches = matchstrpos(l:text, self.pattern, 0, 1)
                                if l:matches[0] !=# ''
                                  return [v:true, l:matches[0], a:pos + l:matches[2]]
                                endif
                                return [v:false, v:null, a:pos]
                              endfunction
                              return l:fn
                            endfunction
                            
                            "
                            " map.
                            "
    1              0.000004 function! s:map(parser, callback) abort
                              let l:fn = {}
                              let l:fn.callback = a:callback
                              let l:fn.parser = a:parser
                              function! l:fn.parse(text, pos) abort
                                let l:parsed = self.parser.parse(a:text, a:pos)
                                if l:parsed[0]
                                  return [v:true, self.callback(l:parsed[1]), l:parsed[2]]
                                endif
                                return l:parsed
                              endfunction
                              return l:fn
                            endfunction
                            
                            "
                            " option.
                            "
    1              0.000003 function! s:option(parser) abort
                              let l:fn = {}
                              let l:fn.parser = a:parser
                              function! l:fn.parse(text, pos) abort
                                let l:parsed = self.parser.parse(a:text, a:pos)
                                if l:parsed[0]
                                  return l:parsed
                                endif
                                return [v:true, v:null, a:pos]
                              endfunction
                              return l:fn
                            endfunction
                            
                            "
                            " getchar.
                            "
    1              0.000004 function! s:getchar(text, pos) abort
                              let l:nr = strgetchar(a:text, a:pos)
                              if l:nr != -1
                                return nr2char(l:nr)
                              endif
                              return ''
                            endfunction

SCRIPT  /home/michaelroddy/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/node.vim
Sourced 1 time
Total time:   0.001704
 Self time:   0.001260

count  total (s)   self (s)
    1   0.000411   0.000307 let s:Placeholder = vsnip#snippet#node#placeholder#import()
    1   0.000394   0.000292 let s:Variable = vsnip#snippet#node#variable#import()
    1   0.000389   0.000305 let s:Text = vsnip#snippet#node#text#import()
    1   0.000446   0.000293 let s:Transform = vsnip#snippet#node#transform#import()
                            
                            "
                            " vsnip#snippet#node#create_from_ast
                            "
    1              0.000004 function! vsnip#snippet#node#create_from_ast(ast) abort
                              if type(a:ast) == type([])
                                return map(a:ast, 'vsnip#snippet#node#create_from_ast(v:val)')
                              endif
                            
                              if a:ast.type ==# 'placeholder'
                                return s:Placeholder.new(a:ast)
                              endif
                              if a:ast.type ==# 'variable'
                                return s:Variable.new(a:ast)
                              endif
                              if a:ast.type ==# 'text'
                                return s:Text.new(a:ast)
                              endif
                            
                              throw 'vsnip: invalid node type'
                            endfunction
                            
                            "
                            " vsnip#snippet#node#create_text
                            "
    1              0.000003 function! vsnip#snippet#node#create_text(text) abort
                              return s:Text.new({
                              \   'type': 'text',
                              \   'raw': a:text,
                              \   'escaped': a:text
                              \ })
                            endfunction
                            
                            "
                            " vsnip#snippet#node#create_transform
                            "
    1              0.000004 function! vsnip#snippet#node#create_transform(transform) abort
                              return s:Transform.new(a:transform)
                            endfunction

SCRIPT  /home/michaelroddy/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/node/placeholder.vim
Sourced 1 time
Total time:   0.000080
 Self time:   0.000080

count  total (s)   self (s)
    1              0.000007 let s:max_tabstop = 1000000
    1              0.000003 let s:uid = 0
                            
    1              0.000005 function! vsnip#snippet#node#placeholder#import() abort
                              return s:Placeholder
                            endfunction
                            
    1              0.000004 let s:Placeholder = {}
                            
                            "
                            " new.
                            "
    1              0.000004 function! s:Placeholder.new(ast) abort
                              let s:uid += 1
                            
                              let l:node = extend(deepcopy(s:Placeholder), {
                              \   'uid': s:uid,
                              \   'type': 'placeholder',
                              \   'id': a:ast.id,
                              \   'is_final': a:ast.id == 0,
                              \   'follower': v:false,
                              \   'choice': get(a:ast, 'choice', []),
                              \   'children': vsnip#snippet#node#create_from_ast(get(a:ast, 'children', [])),
                              \   'transform': vsnip#snippet#node#create_transform(get(a:ast, 'transform')),
                              \ })
                            
                              if l:node.is_final
                                let l:node.id = s:max_tabstop
                              endif
                            
                              if len(l:node.children) == 0
                                let l:node.children = [vsnip#snippet#node#create_text('')]
                              endif
                            
                              return l:node
                            endfunction
                            
                            "
                            " text.
                            "
    1              0.000003 function! s:Placeholder.text() abort
                              return join(map(copy(self.children), 'v:val.text()'), '')
                            endfunction
                            
                            "
                            " to_string
                            "
    1              0.000003 function! s:Placeholder.to_string() abort
                              return printf('%s(id=%s, follower=%s, choise=%s)',
                              \   self.type,
                              \   self.id,
                              \   self.follower ? 'true' : 'false',
                              \   self.choice
                              \ )
                            endfunction

SCRIPT  /home/michaelroddy/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/node/variable.vim
Sourced 1 time
Total time:   0.000079
 Self time:   0.000079

count  total (s)   self (s)
    1              0.000005 let s:uid = 0
                            
                            "
                            " vsnip#snippet#node#variable#import
                            "
    1              0.000004 function! vsnip#snippet#node#variable#import() abort
                              return s:Variable
                            endfunction
                            
    1              0.000004 let s:Variable = {}
                            
                            "
                            " new.
                            "
    1              0.000003 function! s:Variable.new(ast) abort
                              let s:uid += 1
                            
                              let l:resolver = vsnip#variable#get(a:ast.name)
                              return extend(deepcopy(s:Variable), {
                              \   'uid': s:uid,
                              \   'type': 'variable',
                              \   'name': a:ast.name,
                              \   'unknown': empty(l:resolver),
                              \   'resolver': l:resolver,
                              \   'children': vsnip#snippet#node#create_from_ast(get(a:ast, 'children', [])),
                              \   'transform': vsnip#snippet#node#create_transform(get(a:ast, 'transform')),
                              \ })
                            endfunction
                            
                            "
                            " text.
                            "
    1              0.000002 function! s:Variable.text() abort
                              return self.transform.text(join(map(copy(self.children), 'v:val.text()'), ''))
                            endfunction
                            
                            "
                            " resolve.
                            "
    1              0.000003 function! s:Variable.resolve(context) abort
                              if !self.unknown
                                let l:resolved = self.transform.text(self.resolver.func({ 'node': self }))
                                if l:resolved isnot v:null
                                  " Fix indent when one variable returns multiple lines
                                  let l:base_indent = vsnip#indent#get_base_indent(split(a:context.before_text, "\n", v:true)[-1])
                                  return substitute(l:resolved, "\n\\zs", l:base_indent, 'g')
                                endif
                              endif
                              return v:null
                            endfunction
                            
                            "
                            " to_string
                            "
    1              0.000003 function! s:Variable.to_string() abort
                              return printf('%s(name=%s, unknown=%s, text=%s)',
                              \   self.type,
                              \   self.name,
                              \   self.unknown ? 'true' : 'false',
                              \   self.text()
                              \ )
                            endfunction

SCRIPT  /home/michaelroddy/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/node/text.vim
Sourced 1 time
Total time:   0.000063
 Self time:   0.000063

count  total (s)   self (s)
    1              0.000007 let s:uid = 0
                            
    1              0.000004 function! vsnip#snippet#node#text#import() abort
                              return s:Text
                            endfunction
                            
    1              0.000004 let s:Text = {}
                            
                            "
                            " new.
                            "
    1              0.000003 function! s:Text.new(ast) abort
                              let s:uid += 1
                            
                              return extend(deepcopy(s:Text), {
                              \   'uid': s:uid,
                              \   'type': 'text',
                              \   'value': a:ast.escaped,
                              \   'children': [],
                              \ })
                            endfunction
                            
                            "
                            " text.
                            "
    1              0.000002 function! s:Text.text() abort
                              return self.value
                            endfunction
                            
                            "
                            " to_string
                            "
    1              0.000002 function! s:Text.to_string() abort
                              return printf('%s(%s)',
                              \   self.type,
                              \   self.value
                              \ )
                            endfunction

SCRIPT  /home/michaelroddy/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/node/transform.vim
Sourced 1 time
Total time:   0.000129
 Self time:   0.000129

count  total (s)   self (s)
    1              0.000005 function! vsnip#snippet#node#transform#import() abort
                              return s:Transform
                            endfunction
                            
    1              0.000005 let s:Transform = {}
                            
                            "
                            " new.
                            "
    1              0.000003 function! s:Transform.new(ast) abort
                              let l:transform = empty(a:ast) ? {} : a:ast
                            
                              let l:node = extend(deepcopy(s:Transform), {
                              \   'type': 'transform',
                              \   'regex': get(l:transform, 'regex', v:null),
                              \   'replacements': get(l:transform, 'format', []),
                              \   'options': get(l:transform, 'option', []),
                              \ })
                            
                              let l:node.is_noop = l:node.regex is v:null
                            
                              return l:node
                            endfunction
                            
                            "
                            " text.
                            "
    1              0.000003 function! s:Transform.text(input_text) abort
                              if empty(a:input_text) || self.is_noop
                                return a:input_text
                              endif
                            
                              if self.regex.pattern !=# '(.*)'
                                " TODO: fully support regex
                                return a:input_text
                              endif
                            
                              let l:text = ''
                            
                              for l:replacement in self.replacements
                                if l:replacement.type ==# 'format'
                                  if l:replacement.modifier ==# '/capitalize'
                                    let l:text .= s:capitalize(a:input_text)
                                  elseif l:replacement.modifier ==# '/downcase'
                                    let l:text .= s:downcase(a:input_text)
                                  elseif l:replacement.modifier ==# '/upcase'
                                    let l:text .= s:upcase(a:input_text)
                                  elseif l:replacement.modifier ==# '/camelcase'
                                    let l:text .= s:camelcase(a:input_text)
                                  elseif l:replacement.modifier ==# '/pascalcase'
                                    let l:text .= s:capitalize(s:camelcase(a:input_text))
                                  endif
                                elseif l:replacement.type ==# 'text'
                                  let l:text .= l:replacement.escaped
                                endif
                              endfor
                            
                              return l:text
                            endfunction
                            
                            "
                            " to_string
                            "
    1              0.000002 function! s:Transform.to_string() abort
                              if self.is_noop
                                return
                              end
                            
                              return printf('%s(regex=%s, total_replacements=%s, options=%s)',
                              \   self.type,
                              \   get(self.regex, 'pattern', ''),
                              \   len(self.replacements),
                              \   join(self.options, ''),
                              \ )
                            endfunction
                            
                            "
                            " upcase
                            "
    1              0.000003 function! s:upcase(word) abort
                              let word = toupper(a:word)
                              return word
                            endfunction
                            
                            "
                            " downcase
                            "
    1              0.000003 function! s:downcase(word) abort
                              let word = tolower(a:word)
                              return word
                            endfunction
                            
                            "
                            " capitalize
                            "
    1              0.000003 function! s:capitalize(word) abort
                              let word = s:upcase(strpart(a:word, 0, 1)) . strpart(a:word, 1)
                              return word
                            endfunction
                            
                            "
                            " camelcase
                            " @see https://github.com/tpope/vim-abolish/blob/3f0c8faa/plugin/abolish.vim#L111-L118
                            "
    1              0.000003 function! s:camelcase(word) abort
                              let word = substitute(a:word, '-', '_', 'g')
                              if word !~# '_' && word =~# '\l'
                                return substitute(word,'^.','\l&','')
                              else
                                return substitute(word,'\C\(_\)\=\(.\)','\=submatch(1)==""?tolower(submatch(2)) : toupper(submatch(2))','g')
                              endif
                            endfunction

SCRIPT  /home/michaelroddy/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/range.vim
Sourced 1 time
Total time:   0.000020
 Self time:   0.000020

count  total (s)   self (s)
                            "
                            " vsnip#range#cover
                            "
    1              0.000003 function! vsnip#range#cover(whole_range, target_range) abort
                              let l:cover = v:true
                              let l:cover = l:cover && (a:whole_range.start.line < a:target_range.start.line || a:whole_range.start.line == a:target_range.start.line && a:whole_range.start.character <= a:target_range.start.character)
                              let l:cover = l:cover && (a:target_range.end.line < a:whole_range.end.line || a:target_range.end.line == a:whole_range.end.line && a:target_range.end.character <= a:whole_range.end.character)
                              return l:cover
                            endfunction

FUNCTION  vsnip#indent#adjust_snippet_body()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/indent.vim:18
Called 1 time
Total time:   0.000136
 Self time:   0.000102

count  total (s)   self (s)
    1   0.000035   0.000021   let l:one_indent = vsnip#indent#get_one_indent()
    1   0.000041   0.000020   let l:base_indent = vsnip#indent#get_base_indent(a:line)
    1              0.000004   let l:text = a:text
    1              0.000004   if l:one_indent !=# "\t"
                                while match(l:text, "\\%(^\\|\n\\)\\s*\\zs\\t") != -1
                                  let l:text = substitute(l:text, "\\%(^\\|\n\\)\\s*\\zs\\t", l:one_indent, 'g') " convert \t as one indent
                                endwhile
    1              0.000002   endif
    1              0.000015   let l:text = substitute(l:text, "\n\\zs", l:base_indent, 'g') " add base_indent for all lines
    1              0.000012   let l:text = substitute(l:text, "\n\\s*\\ze\n", "\n", 'g') " remove empty line's indent
    1              0.000003   return l:text

FUNCTION  <SNR>77_token()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:65
Called 18 times
Total time:   0.000371
 Self time:   0.000371

count  total (s)   self (s)
   18              0.000063   let l:fn = {}
   18              0.000070   let l:fn.token = a:token
   18              0.000056   function! l:fn.parse(text, pos) abort
                                let l:token_len = strchars(self.token)
                                let l:value = strcharpart(a:text, a:pos, l:token_len)
                                if l:value ==# self.token
                                  return [v:true, self.token, a:pos + l:token_len]
                                endif
                                return [v:false, v:null, a:pos]
                              endfunction
   18              0.000049   return l:fn

FUNCTION  vsnip#source#user_snippet#find()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/source/user_snippet.vim:6
Called 78 times
Total time:   0.042303
 Self time:   0.003655

count  total (s)   self (s)
   78              0.000298   let l:sources = []
   78   0.040443   0.001795   for l:path in s:get_source_paths(a:bufnr)
                                if !has_key(s:cache, l:path)
                                  let s:cache[l:path] = vsnip#source#create(l:path)
                                endif
                                call add(l:sources, s:cache[l:path])
   78              0.000126   endfor
   78              0.000210   return l:sources

FUNCTION  116()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:22
Called 2 times
Total time:   0.000952
 Self time:   0.000819

count  total (s)   self (s)
    2              0.000006     let l:pos = a:pos
    2              0.000005     let l:value = ''
                            
    2              0.000010     let l:len = strchars(a:text)
   11              0.000030     while l:pos < l:len
   10   0.000261   0.000129       let l:char = s:getchar(a:text, l:pos)
                            
                                  " check escaped stop chars.
   10              0.000027       if l:char ==# '\'
                                    let l:pos += 1
                                    let l:char = s:getchar(a:text, l:pos)
                                    if index(self.stop + self.escape + ['\'], l:char) == -1
                                      let l:value .= '\'
                                      continue " ignore invalid escape char.
                                    endif
                                    let l:pos += 1
                                    let l:value .= l:char
                                    continue
   10              0.000010       endif
                            
                                  " check stop char.
   10              0.000050       if index(self.stop, l:char) >= 0
    1              0.000002         if a:pos != l:pos
    1              0.000011           return [v:true, [strcharpart(a:text, a:pos, l:pos - a:pos), l:value], l:pos]
                                    else
                                      return [v:false, v:null, l:pos]
                                    endif
    9              0.000009       endif
                            
    9              0.000077       let l:value .= l:char
    9              0.000025       let l:pos += 1
   10              0.000015     endwhile
                            
                                " everything was string.
    1              0.000008     return [v:true, [strcharpart(a:text, a:pos), l:value], l:len]

FUNCTION  117()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:187
Called 2 times
Total time:   0.001028
 Self time:   0.000061

count  total (s)   self (s)
    2   0.000974   0.000022     let l:parsed = self.parser.parse(a:text, a:pos)
    2              0.000006     if l:parsed[0]
    2   0.000045   0.000030       return [v:true, self.callback(l:parsed[1]), l:parsed[2]]
                                endif
                                return l:parsed

FUNCTION  <SNR>53_HighlightStringSpellcheck()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim:76
Called 1 time
Total time:   0.000007
 Self time:   0.000007

count  total (s)   self (s)
    1              0.000006   return get(g:, 'go_highlight_string_spellcheck', 1)

FUNCTION  <SNR>22__fix_cursor_position()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vital/_vsnip/VS/LSP/TextEdit.vim:87
Called 1 time
Total time:   0.000055
 Self time:   0.000055

count  total (s)   self (s)
    1              0.000006   let l:lines_len = len(a:lines)
    1              0.000007   let l:range_len = (a:text_edit.range.end.line - a:text_edit.range.start.line) + 1
                            
    1              0.000004   if a:text_edit.range.end.line < a:position.line
                                let a:position.line += l:lines_len - l:range_len
    1              0.000007   elseif a:text_edit.range.end.line == a:position.line && a:text_edit.range.end.character <= a:position.character
    1              0.000005     let a:position.line += l:lines_len - l:range_len
    1              0.000010     let a:position.character = strchars(a:lines[-1]) + (a:position.character - a:text_edit.range.end.character)
    1              0.000003     if l:lines_len == 1
    1              0.000004       let a:position.character += a:text_edit.range.start.character
    1              0.000001     endif
    1              0.000001   endif

FUNCTION  120()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/node/placeholder.vim:13
Called 2 times
Total time:   0.000414
 Self time:   0.000184

count  total (s)   self (s)
    2              0.000007   let s:uid += 1
                            
    2   0.000261   0.000108   let l:node = extend(deepcopy(s:Placeholder), {   'uid': s:uid,   'type': 'placeholder',   'id': a:ast.id,   'is_final': a:ast.id == 0,   'follower': v:false,   'choice': get(a:ast, 'choice', []),   'children': vsnip#snippet#node#create_from_ast(get(a:ast, 'children', [])),   'transform': vsnip#snippet#node#create_transform(get(a:ast, 'transform')), })
                            
    2              0.000005   if l:node.is_final
    1              0.000003     let l:node.id = s:max_tabstop
    2              0.000002   endif
                            
    2              0.000008   if len(l:node.children) == 0
    2   0.000111   0.000032     let l:node.children = [vsnip#snippet#node#create_text('')]
    2              0.000003   endif
                            
    2              0.000004   return l:node

FUNCTION  <SNR>53_FoldEnable()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim:21
Called 14 times
Total time:   0.000339
 Self time:   0.000219

count  total (s)   self (s)
   14              0.000037   if a:0 > 0
    7              0.000035     return index(s:FoldEnable(), a:1) > -1
    7              0.000008   endif
    7              0.000052   return get(g:, 'go_fold_enable', ['block', 'import', 'varconst', 'package_comment'])

FUNCTION  1()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet.vim:16
Called 1 time
Total time:   0.015441
 Self time:   0.000870

count  total (s)   self (s)
    1   0.000105   0.000020   let l:pos = s:Position.lsp_to_vim('%', a:position)
    1   0.012890   0.000815   let l:snippet = extend(deepcopy(s:Snippet), {   'type': 'snippet',   'position': a:position,   'before_text': getline(l:pos[0])[0 : l:pos[1] - 2],   'children': vsnip#snippet#node#create_from_ast(     vsnip#snippet#parser#parse(a:text)   ) })
    1   0.001347   0.000015   call l:snippet.init()
    1   0.001094   0.000015   call l:snippet.sync()
    1              0.000002   return l:snippet

FUNCTION  2()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet.vim:36
Called 1 time
Total time:   0.001332
 Self time:   0.000102

count  total (s)   self (s)
    1              0.000003   let l:fn = {}
    1              0.000003   let l:fn.self = self
    1              0.000003   let l:fn.group = {}
    1              0.000004   let l:fn.variable_placeholder = {}
    1              0.000004   let l:fn.has_final_tabstop = v:false
    1              0.000003   function! l:fn.traverse(context) abort
                                if a:context.node.type ==# 'placeholder'
                                  " Mark as follower placeholder.
                                  if !has_key(self.group, a:context.node.id)
                                    let self.group[a:context.node.id] = a:context.node
                                  else
                                    let a:context.node.follower = v:true
                                  endif
                            
                                  " Mark as having final tabstop
                                  if a:context.node.is_final
                                    let self.has_final_tabstop = v:true
                                  endif
                                elseif a:context.node.type ==# 'variable'
                                  " TODO refactor
                                  " variable placeholder
                                  if a:context.node.unknown
                                    let a:context.node.type = 'placeholder'
                                    let a:context.node.choice = []
                            
                                    if !has_key(self.variable_placeholder, a:context.node.name)
                                      let self.variable_placeholder[a:context.node.name] = s:max_tabstop - (len(self.variable_placeholder) + 1)
                                      let a:context.node.id = self.variable_placeholder[a:context.node.name]
                                      let a:context.node.follower = v:false
                                      let a:context.node.children = empty(a:context.node.children) ? [vsnip#snippet#node#create_text(a:context.node.name)] : a:context.node.children
                                      let self.group[a:context.node.id] =  a:context.node
                                    else
                                      let a:context.node.id = self.variable_placeholder[a:context.node.name]
                                      let a:context.node.follower = v:true
                                      let a:context.node.children = [vsnip#snippet#node#create_text(self.group[a:context.node.id].text())]
                                    endif
                                  else
                                    let l:text = a:context.node.resolve(a:context)
                                    let l:text = l:text is# v:null ? a:context.text : l:text
                                    let l:index = index(a:context.parent.children, a:context.node)
                                    call remove(a:context.parent.children, l:index)
                                    call insert(a:context.parent.children, vsnip#snippet#node#create_text(l:text), l:index)
                                  endif
                                endif
                              endfunction
    1   0.001027   0.000013   call self.traverse(self, l:fn.traverse)
                            
                              " Append ${MAX_TABSTOP} for the end of snippet.
    1              0.000005   if !l:fn.has_final_tabstop && g:vsnip_append_final_tabstop
    1   0.000241   0.000024     let self.children += [vsnip#snippet#node#create_from_ast({   'type': 'placeholder',   'id': 0,   'choice': [], })]
    1              0.000001   endif

FUNCTION  3()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet.vim:97
Called 5 times
Total time:   0.010917
 Self time:   0.002748

count  total (s)   self (s)
    5   0.003223   0.000051   if !self.is_followable(a:current_tabstop, a:diff)
                                return v:false
    5              0.000005   endif
                            
    5   0.001047   0.000097   let a:diff.range = [   self.position_to_offset(a:diff.range.start),   self.position_to_offset(a:diff.range.end), ]
                            
    5              0.000012   let l:fn = {}
    5              0.000016   let l:fn.current_tabstop = a:current_tabstop
    5              0.000012   let l:fn.diff = a:diff
    5              0.000015   let l:fn.is_target_context_fixed = v:false
    5              0.000012   let l:fn.target_context = v:null
    5              0.000011   let l:fn.contexts = []
    5              0.000015   function! l:fn.traverse(context) abort
                                if self.diff.range[1] < a:context.range[0]
                                  return v:true
                                endif
                                if a:context.node.type !=# 'text'
                                  return
                                endif
                            
                                let l:included = v:false
                                let l:included = l:included || a:context.range[0] <= self.diff.range[0] && self.diff.range[0] < a:context.range[1] " right
                                let l:included = l:included || a:context.range[0] < self.diff.range[1] && self.diff.range[1] <= a:context.range[1] " left
                                let l:included = l:included || self.diff.range[0] <= a:context.range[0] && a:context.range[1] <= self.diff.range[1] " middle
                                if l:included
                                  if !self.is_target_context_fixed && (empty(self.target_context) && a:context.parent.type ==# 'placeholder' || get(a:context.parent, 'id', -1) == self.current_tabstop)
                                    let self.is_target_context_fixed = get(a:context.parent, 'id', -1) == self.current_tabstop
                                    let self.target_context = a:context
                                  endif
                                  call add(self.contexts, a:context)
                                endif
                              endfunction
    5   0.003846   0.000052   call self.traverse(self, l:fn.traverse)
                            
    5              0.000014   if empty(l:fn.contexts)
                                return v:false
    5              0.000005   endif
                            
    5              0.000028   let l:fn.target_context = empty(l:fn.target_context) ? l:fn.contexts[-1] : l:fn.target_context
                            
    5              0.000014   let l:diff_text = a:diff.text
   16              0.000029   for l:context in l:fn.contexts
   11              0.000096     let l:diff_range = [max([a:diff.range[0], l:context.range[0]]), min([a:diff.range[1], l:context.range[1]])]
   11              0.000040     let l:start = l:diff_range[0] - l:context.range[0]
   11              0.000038     let l:end = l:diff_range[1] - l:context.range[0]
                            
                                " Create patched new text.
   11              0.000050     let l:new_text = strcharpart(l:context.text, 0, l:start)
   11              0.000026     if l:fn.target_context is# l:context
    5              0.000016       let l:new_text .= l:diff_text
    5              0.000011       let l:followed = v:true
   11              0.000013     endif
   11              0.000060     let l:new_text .= strcharpart(l:context.text, l:end, l:context.length - l:end)
                            
                                " Apply patched new text.
   11              0.000029     let l:context.node.value = l:new_text
   16              0.000018   endfor
                            
                              " Squash nodes when the edit was unexpected
    5              0.000012   let l:squashed = []
   16              0.000029   for l:context in l:fn.contexts
   11              0.000053     let l:squash_targets = l:context.parents + [l:context.node]
   27              0.000082     for l:i in range(len(l:squash_targets) - 1, 1, -1)
   16              0.000052       let l:node = l:squash_targets[l:i]
   16              0.000052       let l:parent = l:squash_targets[l:i - 1]
                            
   16              0.000045       let l:should_squash = v:false
   16              0.000082       let l:should_squash = l:should_squash || get(l:node, 'follower', v:false)
   16              0.000086       let l:should_squash = l:should_squash || get(l:parent, 'id', v:null) is# a:current_tabstop
   16   0.000152   0.000132       let l:should_squash = l:should_squash || l:context isnot# l:fn.target_context && strlen(l:node.text()) == 0
   16              0.000060       if l:should_squash && index(l:squashed, l:node) == -1
    5              0.000021         let l:index = index(l:parent.children, l:node)
    5              0.000026         call remove(l:parent.children, l:index)
    5   0.000327   0.000093         call insert(l:parent.children, vsnip#snippet#node#create_text(l:node.text()), l:index)
    5              0.000018         call add(l:squashed, l:node)
   16              0.000014       endif
   27              0.000026     endfor
   16              0.000018   endfor
                            
    5              0.000011   return v:true

FUNCTION  4()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet.vim:186
Called 6 times
Total time:   0.005809
 Self time:   0.000410

count  total (s)   self (s)
    6              0.000020   let l:fn = {}
    6              0.000020   let l:fn.new_texts = {}
    6              0.000017   let l:fn.targets = []
    6              0.000021   function! l:fn.traverse(context) abort
                                if a:context.node.type ==# 'placeholder'
                                  if !has_key(self.new_texts, a:context.node.id)
                                    let self.new_texts[a:context.node.id] = a:context.text
                                  else
                                    if self.new_texts[a:context.node.id] !=# a:context.text
                                      call add(self.targets, {   'range': a:context.range,   'node': a:context.node,   'new_text': a:context.node.transform.text(self.new_texts[a:context.node.id]), })
                                    endif
                                  endif
                                endif
                              endfunction
    6   0.005468   0.000069   call self.traverse(self, l:fn.traverse)
                            
                              " Create text_edits.
    6              0.000018   let l:text_edits = []
    6              0.000018   for l:target in l:fn.targets
                                call add(l:text_edits, {   'node': l:target.node,   'range': {     'start': self.offset_to_position(l:target.range[0]),     'end': self.offset_to_position(l:target.range[1]),   },   'newText': l:target.new_text })
    6              0.000007   endfor
                            
                              " Sync placeholder text after created text_edits (the reason is to avoid using a modified range).
    6              0.000016   for l:text_edit in l:text_edits
                                let l:text_edit.node.children = [vsnip#snippet#node#create_text(l:text_edit.newText)]
    6              0.000007   endfor
                            
    6              0.000013   return l:text_edits

FUNCTION  6()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet.vim:241
Called 23 times
Total time:   0.001522
 Self time:   0.000668

count  total (s)   self (s)
   23   0.001507   0.000653   return join(map(copy(self.children), 'v:val.text()'), '')

FUNCTION  9()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet.vim:282
Called 5 times
Total time:   0.001454
 Self time:   0.000160

count  total (s)   self (s)
    5              0.000014   let l:fn =  {}
    5              0.000014   let l:fn.current_tabstop = a:current_tabstop
    5              0.000011   let l:fn.context = v:null
    5              0.000015   function! l:fn.traverse(context) abort
                                if a:context.node.type ==# 'placeholder' && a:context.node.id == self.current_tabstop
                                  let self.context = a:context
                                  return v:true
                                endif
                              endfunction
    5   0.001352   0.000059   call self.traverse(self, l:fn.traverse)
    5              0.000012   return l:fn.context

FUNCTION  118()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:114
Called 3 times
Total time:   0.005468
 Self time:   0.000117

count  total (s)   self (s)
    5              0.000020     for l:parser in self.parsers
    5   0.005413   0.000062       let l:parsed = l:parser.parse(a:text, a:pos)
    5              0.000013       if l:parsed[0]
    3              0.000007         return l:parsed
    2              0.000002       endif
    2              0.000002     endfor
                                return [v:false, v:null, a:pos]

FUNCTION  98()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:132
Called 2 times
Total time:   0.000108
 Self time:   0.000058

count  total (s)   self (s)
    2              0.000007     let l:pos = a:pos
    2              0.000006     let l:values = []
    2              0.000008     for l:parser in self.parsers
    2   0.000071   0.000020       let l:parsed = l:parser.parse(a:text, l:pos)
    2              0.000006       if !l:parsed[0]
    2              0.000008         return [v:false, v:null, a:pos]
                                  endif
                                  call add(l:values, l:parsed[1])
                                  let l:pos = l:parsed[2]
                                endfor
                                return [v:true, l:values, l:pos]

FUNCTION  vsnip#range#cover()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/range.vim:4
Called 5 times
Total time:   0.000135
 Self time:   0.000135

count  total (s)   self (s)
    5              0.000019   let l:cover = v:true
    5              0.000053   let l:cover = l:cover && (a:whole_range.start.line < a:target_range.start.line || a:whole_range.start.line == a:target_range.start.line && a:whole_range.start.character <= a:target_range.start.character)
    5              0.000043   let l:cover = l:cover && (a:target_range.end.line < a:whole_range.end.line || a:target_range.end.line == a:whole_range.end.line && a:target_range.end.character <= a:whole_range.end.character)
    5              0.000010   return l:cover

FUNCTION  vsnip#source#find()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/source.vim:13
Called 78 times
Total time:   0.148273
 Self time:   0.006200

count  total (s)   self (s)
   78              0.000317   let l:sources = []
   78   0.044002   0.001699   let l:sources += vsnip#source#user_snippet#find(a:bufnr)
   78   0.063622   0.001694   let l:sources += vsnip#source#vscode#find(a:bufnr)
   78   0.039852   0.002009   let l:sources += vsnip#source#snipmate#find(a:bufnr)
   78              0.000209   return l:sources

FUNCTION  42()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:169
Called 4 times
Total time:   0.000146
 Self time:   0.000146

count  total (s)   self (s)
    4              0.000023     let l:text = strcharpart(a:text, a:pos)
    4              0.000064     let l:matches = matchstrpos(l:text, self.pattern, 0, 1)
    4              0.000014     if l:matches[0] !=# ''
                                  return [v:true, l:matches[0], a:pos + l:matches[2]]
    4              0.000005     endif
    4              0.000017     return [v:false, v:null, a:pos]

FUNCTION  <SNR>22__range()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vital/_vsnip/VS/LSP/TextEdit.vim:116
Called 1 time
Total time:   0.000073
 Self time:   0.000073

count  total (s)   self (s)
    1              0.000003   let l:text_edits = []
    2              0.000006   for l:text_edit in a:text_edits
    1              0.000006     if type(l:text_edit) != type({})
                                  continue
    1              0.000001     endif
    1              0.000011     if l:text_edit.range.start.line > l:text_edit.range.end.line || (   l:text_edit.range.start.line == l:text_edit.range.end.line &&   l:text_edit.range.start.character > l:text_edit.range.end.character )
                                  let l:text_edit.range = { 'start': l:text_edit.range.end, 'end': l:text_edit.range.start }
    1              0.000001     endif
    1              0.000006     let l:text_edits += [l:text_edit]
    2              0.000003   endfor
    1              0.000003   return l:text_edits

FUNCTION  30()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/session.vim:218
Called 9 times
Total time:   0.018124
 Self time:   0.000744

count  total (s)   self (s)
    9              0.000063   let l:changedtick = getbufvar(self.bufnr, 'changedtick', 0)
    9              0.000027   if self.changedtick == l:changedtick
    4              0.000007     return
    5              0.000003   endif
    5              0.000011   let self.changedtick = l:changedtick
                            
                              " compute diff.
    5              0.000041   let l:buffer = getbufline(self.bufnr, '^', '$')
    5   0.001749   0.000099   let l:diff = s:Diff.compute(self.buffer, l:buffer)
    5              0.000018   let self.buffer = l:buffer
    5              0.000017   if l:diff.rangeLength == 0 && l:diff.text ==# ''
                                return
    5              0.000003   endif
                            
                              " if follow succeeded, sync placeholders and write back to the buffer.
    5   0.011045   0.000128   if self.snippet.follow(self.tabstop, l:diff)
    5              0.000010     try
    5   0.004834   0.000103       let l:text_edits = self.snippet.sync()
    5              0.000016       if len(l:text_edits) > 0
                                    undojoin | call s:TextEdit.apply(self.bufnr, l:text_edits)
    5              0.000005       endif
    5   0.000133   0.000051       call self.refresh()
                                catch /.*/
                                  " TODO: More strict changenrs mangement.
                                  call vsnip#deactivate()
    5              0.000009     endtry
                              else
                                call vsnip#deactivate()
    5              0.000005   endif

FUNCTION  31()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/session.vim:253
Called 2 times
Total time:   0.000171
 Self time:   0.000171

count  total (s)   self (s)
    2              0.000160   let self.changenrs[a:changenr] = {   'tabstop': self.tabstop,   'snippet': deepcopy(self.snippet) }
    2              0.000007   let self.changenr = a:changenr

FUNCTION  36()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:68
Called 5 times
Total time:   0.000109
 Self time:   0.000109

count  total (s)   self (s)
    5              0.000029     let l:token_len = strchars(self.token)
    5              0.000030     let l:value = strcharpart(a:text, a:pos, l:token_len)
    5              0.000016     if l:value ==# self.token
    5              0.000026       return [v:true, self.token, a:pos + l:token_len]
                                endif
                                return [v:false, v:null, a:pos]

FUNCTION  38()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:68
Called 1 time
Total time:   0.000022
 Self time:   0.000022

count  total (s)   self (s)
    1              0.000005     let l:token_len = strchars(self.token)
    1              0.000006     let l:value = strcharpart(a:text, a:pos, l:token_len)
    1              0.000003     if l:value ==# self.token
    1              0.000005       return [v:true, self.token, a:pos + l:token_len]
                                endif
                                return [v:false, v:null, a:pos]

FUNCTION  <SNR>22_apply()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vital/_vsnip/VS/LSP/TextEdit.vim:30
Called 1 time
Total time:   0.001716
 Self time:   0.000102

count  total (s)   self (s)
    1              0.000007   let l:current_bufname = bufname('%')
    1   0.000094   0.000012   let l:current_position = s:Position.cursor()
                            
    1   0.000077   0.000013   let l:target_bufnr = s:_switch(a:path)
    1   0.001376   0.000027   call s:_substitute(l:target_bufnr, a:text_edits, l:current_position)
    1   0.000078   0.000016   let l:current_bufnr = s:_switch(l:current_bufname)
                            
    1              0.000003   if l:current_bufnr == l:target_bufnr
    1   0.000075   0.000019     call cursor(s:Position.lsp_to_vim('%', l:current_position))
    1              0.000001   endif

FUNCTION  <SNR>56_get_source_dirs()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/source/user_snippet.vim:26
Called 78 times
Total time:   0.003643
 Self time:   0.003643

count  total (s)   self (s)
   78              0.000272   let l:dirs = []
   78              0.000677   let l:buf_dir = getbufvar(a:bufnr, 'vsnip_snippet_dir', v:null)
   78              0.000368   if l:buf_dir isnot v:null
                                  let l:dirs += [l:buf_dir]
   78              0.000121   endif
   78              0.000699   let l:dirs += getbufvar(a:bufnr, 'vsnip_snippet_dirs', [])
   78              0.000465   let l:dirs += [g:vsnip_snippet_dir]
   78              0.000325   let l:dirs += g:vsnip_snippet_dirs
   78              0.000214   return l:dirs

FUNCTION  49()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:154
Called 3 times
Total time:   0.001845
 Self time:   0.000071

count  total (s)   self (s)
    3              0.000014     if !has_key(self, 'parser')
    1   0.000013   0.000011       let self.parser = self.callback()
    3              0.000004     endif
    3   0.001804   0.000031     return self.parser.parse(a:text, a:pos)

FUNCTION  115()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:187
Called 3 times
Total time:   0.000516
 Self time:   0.000081

count  total (s)   self (s)
    3   0.000475   0.000040     let l:parsed = self.parser.parse(a:text, a:pos)
    3              0.000009     if l:parsed[0]
                                  return [v:true, self.callback(l:parsed[1]), l:parsed[2]]
    3              0.000004     endif
    3              0.000007     return l:parsed

FUNCTION  121()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/node/placeholder.vim:41
Called 76 times
Total time:   0.001366
 Self time:   0.001128

count  total (s)   self (s)
   76   0.001323   0.001086   return join(map(copy(self.children), 'v:val.text()'), '')

FUNCTION  <SNR>22__fix_text_edits()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vital/_vsnip/VS/LSP/TextEdit.vim:147
Called 1 time
Total time:   0.000117
 Self time:   0.000109

count  total (s)   self (s)
    1   0.000022   0.000014   let l:max = s:Buffer.get_line_count(a:bufnr)
                            
    1              0.000003   let l:fixeol = v:false
    1              0.000003   let l:text_edits = []
    2              0.000006   for l:text_edit in a:text_edits
    1              0.000004     if l:max <= l:text_edit.range.start.line
                                  let l:text_edit.range.start.line = l:max - 1
                                  let l:text_edit.range.start.character = strchars(get(getbufline(a:bufnr, '$'), 0, ''))
                                  let l:text_edit.newText = "\n" . l:text_edit.newText
                                  let l:fixeol = &fixendofline && !&binary
    1              0.000001     endif
    1              0.000003     if l:max <= l:text_edit.range.end.line
                                  let l:text_edit.range.end.line = l:max - 1
                                  let l:text_edit.range.end.character = strchars(get(getbufline(a:bufnr, '$'), 0, ''))
                                  let l:fixeol = &fixendofline && !&binary
    1              0.000001     endif
    1              0.000005     call add(l:text_edits, l:text_edit)
    2              0.000003   endfor
                            
    1              0.000004   return [l:fixeol, l:text_edits]

FUNCTION  128()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/node/text.vim:26
Called 184 times
Total time:   0.000584
 Self time:   0.000584

count  total (s)   self (s)
  184              0.000442   return self.value

FUNCTION  <SNR>20_lsp_to_vim()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Position.vim:38
Called 5 times
Total time:   0.000307
 Self time:   0.000177

count  total (s)   self (s)
    5   0.000217   0.000087   let l:line = s:_get_buffer_line(a:expr, a:position.line + 1)
    5              0.000015   if l:line is v:null
                                return [a:position.line + 1, a:position.character + 1]
    5              0.000006   endif
    5              0.000039   return [a:position.line + 1, byteidx(l:line, a:position.character) + 1]

FUNCTION  vsnip#get_session()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip.vim:109
Called 81 times
Total time:   0.000604
 Self time:   0.000604

count  total (s)   self (s)
   81              0.000453   return s:session

FUNCTION  <SNR>53_HighlightFunctions()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim:52
Called 1 time
Total time:   0.000006
 Self time:   0.000006

count  total (s)   self (s)
    1              0.000005   return get(g:, 'go_highlight_functions', 0)

FUNCTION  <SNR>33_Highlight_Matching_Pair()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/plugin/matchparen.vim:45
Called 184 times
Total time:   0.047454
 Self time:   0.041314

count  total (s)   self (s)
  184              0.001862   if !exists("w:matchparen_ids")
                                let w:matchparen_ids = []
  184              0.000298   endif
                              " Remove any previous match.
  184   0.009789   0.004521   call s:Remove_Matches()
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
  184              0.001779   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
  184              0.000213   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
  184              0.001253   let c_lnum = line('.')
  184              0.000941   let c_col = col('.')
  184              0.000521   let before = 0
                            
  184              0.001136   let text = getline(c_lnum)
  184              0.002287   let c_before = text->strpart(0, c_col - 1)->slice(-1)
  184              0.001470   let c = text->strpart(c_col - 1)->slice(0, 1)
  184              0.006038   let plist = split(&matchpairs, '.\zs[:,]')
  184              0.001162   let i = index(plist, c)
  184              0.000479   if i < 0
                                " not found, in Insert mode try character before the cursor
  171              0.001242     if c_col > 1 && (mode() == 'i' || mode() == 'R')
  168              0.000989       let before = strlen(c_before)
  168              0.000544       let c = c_before
  168              0.000872       let i = index(plist, c)
  171              0.000253     endif
  171              0.000395     if i < 0
                                  " not found, nothing to do
  169              0.000368       return
    2              0.000003     endif
   15              0.000016   endif
                            
                              " Figure out the arguments for searchpairpos().
   15              0.000039   if i % 2 == 0
    2              0.000007     let s_flags = 'nW'
    2              0.000014     let c2 = plist[i + 1]
   13              0.000017   else
   13              0.000035     let s_flags = 'nbW'
   13              0.000037     let c2 = c
   13              0.000055     let c = plist[i - 1]
   15              0.000018   endif
   15              0.000043   if c == '['
                                let c = '\['
                                let c2 = '\]'
   15              0.000016   endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
   15              0.000036   if before > 0
    2              0.000018     let save_cursor = getcurpos()
    2              0.000019     call cursor(c_lnum, c_col - before)
    2              0.000014     defer setpos('.', save_cursor)
   15              0.000016   endif
                            
   15              0.000171   if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
   15              0.000094   elseif exists("b:ts_highlight") && &syntax != 'on'
                                let s_skip = "match(v:lua.vim.treesitter.get_captures_at_cursor(), '" .. 'string\|character\|singlequote\|escape\|symbol\|comment' .. "') != -1"
   15              0.000018   else
                                " do not attempt to match when the syntax item where the cursor is
                                " indicates there does not exist a matching parenthesis, e.g. for shells
                                " case statement: "case $var in foobar)"
                                "
                                " add the check behind a filetype check, so it only needs to be
                                " evaluated for certain filetypes
   15              0.000208     if ['sh']->index(&filetype) >= 0 && synstack(".", col("."))->indexof({_, id -> synIDattr(id, "name") =~? "shSnglCase"}) >= 0
                                  return
   15              0.000016     endif
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial, and
                                " match "symbol" for lispBarSymbol.
   15              0.000118     let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
   15              0.000027     try
   15   0.003963   0.003238       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
   15              0.000024     endtry
   15              0.000017   endif
                            
                              " Limit the search to lines visible in the window.
   15              0.000082   let stoplinebottom = line('w$')
   15              0.000064   let stoplinetop = line('w0')
   15              0.000040   if i % 2 == 0
    2              0.000010     let stopline = stoplinebottom
   13              0.000015   else
   13              0.000041     let stopline = stoplinetop
   15              0.000016   endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
   15              0.000075   if mode() == 'i' || mode() == 'R'
   15              0.000154     let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
                              else
                                let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
   15              0.000016   endif
   15              0.000021   try
   15   0.001160   0.001013     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
   15              0.000021   endtry
                            
                              " If a match is found setup match highlighting.
   15              0.000111   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom
   13              0.000045     if !g:matchparen_disable_cursor_hl
   13              0.000254       call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
                                else
                                  call add(w:matchparen_ids, matchaddpos('MatchParen', [[m_lnum, m_col]], 10))
   13              0.000015     endif
   13              0.000042     let w:paren_hl_on = 1
   15              0.000017   endif

FUNCTION  41()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:68
Called 1 time
Total time:   0.000025
 Self time:   0.000025

count  total (s)   self (s)
    1              0.000005     let l:token_len = strchars(self.token)
    1              0.000006     let l:value = strcharpart(a:text, a:pos, l:token_len)
    1              0.000003     if l:value ==# self.token
                                  return [v:true, self.token, a:pos + l:token_len]
    1              0.000001     endif
    1              0.000004     return [v:false, v:null, a:pos]

FUNCTION  43()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:169
Called 3 times
Total time:   0.000130
 Self time:   0.000130

count  total (s)   self (s)
    3              0.000018     let l:text = strcharpart(a:text, a:pos)
    3              0.000052     let l:matches = matchstrpos(l:text, self.pattern, 0, 1)
    3              0.000011     if l:matches[0] !=# ''
    2              0.000034       return [v:true, l:matches[0], a:pos + l:matches[2]]
    1              0.000001     endif
    1              0.000004     return [v:false, v:null, a:pos]

FUNCTION  48()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:154
Called 3 times
Total time:   0.000594
 Self time:   0.000076

count  total (s)   self (s)
    3              0.000016     if !has_key(self, 'parser')
    1   0.000015   0.000014       let self.parser = self.callback()
    3              0.000004     endif
    3   0.000548   0.000032     return self.parser.parse(a:text, a:pos)

FUNCTION  <SNR>26_compute()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Diff.vim:13
Called 5 times
Total time:   0.001650
 Self time:   0.001650

count  total (s)   self (s)
    5              0.000011   let l:old = a:old
    5              0.000009   let l:new = a:new
                            
    5              0.000040   let l:old_len = len(l:old)
    5              0.000013   let l:new_len = len(l:new)
    5              0.000022   let l:min_len = min([l:old_len, l:new_len])
                            
                              " empty -> empty
    5              0.000012   if l:old_len == 0 && l:new_len == 0
                                return {   'range': {     'start': {       'line': 0,       'character': 0,     },     'end': {       'line': 0,       'character': 0,     }   },   'text': '',   'rangeLength': 0 }
                              " not empty -> empty
    5              0.000014   elseif l:old_len != 0 && l:new_len == 0
                                return {   'range': {     'start': {       'line': 0,       'character': 0,     },     'end': {       'line': l:old_len - 1,       'character': strchars(l:old[-1]),     }   },   'text': '',   'rangeLength': strchars(join(l:old, "\n")) }
                              " empty -> not empty
    5              0.000010   elseif l:old_len == 0 && l:new_len != 0
                                return {   'range': {     'start': {       'line': 0,       'character': 0,     },     'end': {       'line': 0,       'character': 0,     }   },   'text': join(l:new, "\n"),   'rangeLength': 0 }
    5              0.000004   endif
                            
    5              0.000009   if s:is_lua_enabled
    5              0.000159     let [l:first_line, l:last_line] = luaeval('vital_vs_lsp_diff_search_line_region(_A[1], _A[2])', [l:old, l:new])
                              else
                                let l:first_line = 0
                                while l:first_line < l:min_len - 1
                                  if l:old[l:first_line] !=# l:new[l:first_line]
                                    break
                                  endif
                                  let l:first_line += 1
                                endwhile
                            
                                let l:last_line = -1
                                while l:last_line > -l:min_len + l:first_line
                                  if l:old[l:last_line] !=# l:new[l:last_line]
                                    break
                                  endif
                                  let l:last_line -= 1
                                endwhile
    5              0.000004   endif
                            
    5              0.000036   let l:old_lines = l:old[l:first_line : l:last_line]
    5              0.000018   let l:new_lines = l:new[l:first_line : l:last_line]
    5              0.000031   let l:old_text = join(l:old_lines, "\n") . "\n"
    5              0.000019   let l:new_text = join(l:new_lines, "\n") . "\n"
    5              0.000022   let l:old_text_len = strchars(l:old_text)
    5              0.000017   let l:new_text_len = strchars(l:new_text)
    5              0.000022   let l:min_text_len = min([l:old_text_len, l:new_text_len])
                            
    5              0.000015   let l:first_char = 0
   80              0.000121   for l:first_char in range(0, l:min_text_len - 1)
   80              0.000337     if strgetchar(l:old_text, l:first_char) != strgetchar(l:new_text, l:first_char)
    5              0.000005       break
   75              0.000043     endif
   80              0.000061   endfor
                            
    5              0.000011   let l:last_char = 0
   16              0.000038   for l:last_char in range(0, -l:min_text_len + l:first_char, -1)
   15              0.000089     if strgetchar(l:old_text, l:old_text_len + l:last_char - 1) != strgetchar(l:new_text, l:new_text_len + l:last_char - 1)
    4              0.000003       break
   11              0.000007     endif
   16              0.000013   endfor
                            
    5              0.000094   return {   'range': {     'start': {       'line': l:first_line,       'character': l:first_char,     },     'end': {       'line': l:old_len + l:last_line,       'character': strchars(l:old_lines[-1]) + l:last_char + 1,     }   },   'text': strcharpart(l:new_text, l:first_char, l:new_text_len + l:last_char - l:first_char),   'rangeLength': l:old_text_len + l:last_char - l:first_char }

FUNCTION  130()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/node/transform.vim:10
Called 2 times
Total time:   0.000108
 Self time:   0.000108

count  total (s)   self (s)
    2              0.000013   let l:transform = empty(a:ast) ? {} : a:ast
                            
    2              0.000072   let l:node = extend(deepcopy(s:Transform), {   'type': 'transform',   'regex': get(l:transform, 'regex', v:null),   'replacements': get(l:transform, 'format', []),   'options': get(l:transform, 'option', []), })
                            
    2              0.000012   let l:node.is_noop = l:node.regex is v:null
                            
    2              0.000005   return l:node

FUNCTION  <SNR>57_find()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/source/vscode.vim:29
Called 78 times
Total time:   0.039782
 Self time:   0.039782

count  total (s)   self (s)
                              " Load `package.json#contributes.snippets` if does not exists it's cache.
   78              0.002902   let l:rtp_list = exists('*nvim_list_runtime_paths') ? nvim_list_runtime_paths() : split(&runtimepath, ',')
 2340              0.004953   for l:rtp in l:rtp_list
 2262              0.009940     if has_key(s:runtimepaths, l:rtp)
 2262              0.003580       continue
                                endif
                                let s:runtimepaths[l:rtp] = v:true
                            
                                try
                                  let l:package_json = resolve(expand(l:rtp . '/package.json'))
                                  if !filereadable(l:package_json)
                                    continue
                                  endif
                                  let l:package_json = readfile(l:package_json)
                                  let l:package_json = type(l:package_json) == type([]) ? join(l:package_json, "\n") : l:package_json
                                  let l:package_json = iconv(l:package_json, 'utf-8', &encoding)
                                  let l:package_json = json_decode(l:package_json)
                            
                                  " if package.json has not `contributes.snippets` fields, skip it.
                                  if !has_key(l:package_json, 'contributes') || !has_key(l:package_json.contributes, 'snippets')
                                    continue
                                  endif
                            
                                  " Create source if does not exists it's cache.
                                  for l:snippet in l:package_json.contributes.snippets
                                    let l:path = resolve(expand(l:rtp . '/' . l:snippet.path))
                                    let l:languages = type(l:snippet.language) == type([]) ? l:snippet.language : [l:snippet.language]
                            
                                    " if already cached `snippets.json`, add new language.
                                    if has_key(s:snippets, l:path)
                                      for l:language in l:languages
                                        if index(s:snippets[l:path].languages, l:language) == -1
                                          call add(s:snippets[l:path].languages, l:language)
                                        endif
                                      endfor
                                      continue
                                    endif
                            
                                    " register new snippet.
                                    let s:snippets[l:path] = {   'languages': l:languages, }
                                  endfor
                                catch /.*/
                                endtry
   78              0.000272   endfor
                            
                              " filter by language.
   78              0.000362   let l:sources = []
  234              0.000720   for l:language in a:languages
  156              0.000898     for [l:path, l:snippet] in items(s:snippets)
                                  if index(l:snippet.languages, l:language) >= 0
                                    if !has_key(l:snippet, 'source')
                                      let l:snippet.source = vsnip#source#create(l:path)
                                    end
                                    call add(l:sources, l:snippet.source)
                                  endif
  156              0.000242     endfor
  234              0.000331   endfor
   78              0.000258   return l:sources

FUNCTION  <SNR>58_find()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/source/snipmate.vim:14
Called 78 times
Total time:   0.024205
 Self time:   0.003399

count  total (s)   self (s)
   78              0.000298   let sources = []
   78   0.022326   0.001520   for path in s:get_source_paths(a:filetypes, a:bufnr)
                                if !has_key(s:cache, path)
                                  let s:cache[path] = s:create(path, a:bufnr)
                                endif
                                call add(sources, s:cache[path])
   78              0.000127   endfor
   78              0.000208   return sources

FUNCTION  <SNR>22__switch()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vital/_vsnip/VS/LSP/TextEdit.vim:173
Called 2 times
Total time:   0.000126
 Self time:   0.000126

count  total (s)   self (s)
    2              0.000009   let l:curr = bufnr('%')
    2              0.000056   let l:next = filereadable(a:path) ? bufnr(fnameescape(a:path)) : bufnr(a:path)
    2              0.000006   if l:next >= 0
    2              0.000005     if l:curr != l:next
                                  execute printf('noautocmd keepalt keepjumps %sbuffer!', l:next)
    2              0.000002     endif
                              else
                                execute printf('noautocmd keepalt keepjumps edit! %s', fnameescape(a:path))
    2              0.000002   endif
    2              0.000007   return bufnr('%')

FUNCTION  vsnip#snippet#node#create_from_ast()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/node.vim:9
Called 7 times
Total time:   0.001049
 Self time:   0.000492

count  total (s)   self (s)
    7              0.000039   if type(a:ast) == type([])
    3              0.000022     return map(a:ast, 'vsnip#snippet#node#create_from_ast(v:val)')
    4              0.000005   endif
                            
    4              0.000013   if a:ast.type ==# 'placeholder'
    2              0.000076     return s:Placeholder.new(a:ast)
    2              0.000002   endif
    2              0.000006   if a:ast.type ==# 'variable'
                                return s:Variable.new(a:ast)
    2              0.000002   endif
    2              0.000005   if a:ast.type ==# 'text'
    2   0.000079   0.000020     return s:Text.new(a:ast)
                              endif
                            
                              throw 'vsnip: invalid node type'

FUNCTION  50()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:154
Called 3 times
Total time:   0.001401
 Self time:   0.000073

count  total (s)   self (s)
    3              0.000014     if !has_key(self, 'parser')
    1   0.000012   0.000011       let self.parser = self.callback()
    3              0.000004     endif
    3   0.001361   0.000034     return self.parser.parse(a:text, a:pos)

FUNCTION  51()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:154
Called 2 times
Total time:   0.000201
 Self time:   0.000045

count  total (s)   self (s)
    2              0.000009     if !has_key(self, 'parser')
    1   0.000011   0.000010       let self.parser = self.callback()
    2              0.000003     endif
    2   0.000173   0.000018     return self.parser.parse(a:text, a:pos)

FUNCTION  52()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:114
Called 3 times
Total time:   0.004323
 Self time:   0.000282

count  total (s)   self (s)
   13              0.000033     for l:parser in self.parsers
   11   0.004175   0.000134       let l:parsed = l:parser.parse(a:text, a:pos)
   11              0.000030       if l:parsed[0]
    1              0.000002         return l:parsed
   10              0.000011       endif
   12              0.000016     endfor
    2              0.000007     return [v:false, v:null, a:pos]

FUNCTION  <SNR>58_get_source_paths()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/source/snipmate.vim:25
Called 78 times
Total time:   0.020806
 Self time:   0.017404

count  total (s)   self (s)
   78              0.000297   let paths = []
  156   0.005141   0.001739   for dir in s:get_source_dirs(a:bufnr)
  234              0.000694     for filetype in a:filetypes
  156              0.007284       let path = resolve(expand(printf('%s/%s.snippets', dir, filetype)))
  156              0.002627       if has_key(s:cache, path) || filereadable(path)
                                    call add(paths, path)
  156              0.000208       endif
  234              0.000587     endfor
  156              0.000228   endfor
   78              0.000227   return paths

FUNCTION  7()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet.vim:248
Called 5 times
Total time:   0.003172
 Self time:   0.000527

count  total (s)   self (s)
    5              0.000019   if g:vsnip#DeactivateOn.OutsideOfSnippet == g:vsnip_deactivate_on
                                return vsnip#range#cover(self.range(), a:diff.range)
    5              0.000015   elseif g:vsnip#DeactivateOn.OutsideOfCurrentTabstop == g:vsnip_deactivate_on
    5   0.001506   0.000053     let l:context = self.get_placeholder_context_by_tabstop(a:current_tabstop)
    5              0.000015     if empty(l:context)
                                  return v:false
    5              0.000005     endif
    5   0.001571   0.000380     return vsnip#range#cover({   'start': self.offset_to_position(l:context.range[0]),   'end': self.offset_to_position(l:context.range[1]), }, a:diff.range)
                              endif

FUNCTION  19()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/session.vim:18
Called 1 time
Total time:   0.016234
 Self time:   0.000488

count  total (s)   self (s)
    1   0.016231   0.000485   return extend(deepcopy(s:Session), {   'bufnr': a:bufnr,   'buffer': getbufline(a:bufnr, '^', '$'),   'timer_id': -1,   'changedtick': getbufvar(a:bufnr, 'changedtick', 0),   'snippet': s:Snippet.new(a:position, vsnip#indent#adjust_snippet_body(getline('.'), a:text)),   'tabstop': -1,   'changenr': changenr(),   'changenrs': {}, })

FUNCTION  <SNR>53_HighlightChanWhitespaceError()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim:32
Called 1 time
Total time:   0.000006
 Self time:   0.000006

count  total (s)   self (s)
    1              0.000005   return get(g:, 'go_highlight_chan_whitespace_error', 0)

FUNCTION  vsnip#anonymous()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip.vim:66
Called 1 time
Total time:   0.020015
 Self time:   0.000201

count  total (s)   self (s)
    1              0.000023   let l:option = get(a:000, 0, {})
    1              0.000009   let l:prefix = get(l:option, 'prefix', v:null)
    1   0.000174   0.000036   let l:position = get(l:option, 'position', s:Position.cursor())
                            
    1              0.000005   if l:prefix isnot# v:null
                                let l:position.character -= strchars(l:prefix)
                                call s:TextEdit.apply(bufnr('%'), [{   'range': {     'start': l:position,     'end': {       'line': l:position.line,       'character': l:position.character + strchars(l:prefix),     },   },   'newText': '' }])
    1              0.000002   endif
                            
    1   0.016255   0.000021   let l:session = s:Session.new(bufnr('%'), l:position, a:text)
                            
    1   0.000030   0.000015   call vsnip#selected_text('')
                            
    1              0.000004   if !empty(s:session)
                                call s:session.flush_changes() " try to sync buffer content because vsnip#expand maybe remove prefix
    1              0.000001   endif
                            
    1              0.000003   if empty(s:session)
    1              0.000003     let s:session = l:session
    1   0.001900   0.000008     call s:session.expand()
                              else
                                call s:session.merge(l:session)
    1              0.000001   endif
                            
    1   0.000037   0.000007   doautocmd <nomodeline> User vsnip#expand
                            
    1   0.000030   0.000009   call s:session.refresh()
    1   0.001496   0.000013   call s:session.jump(1)

FUNCTION  <SNR>20__get_buffer_line()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Position.vim:49
Called 7 times
Total time:   0.000198
 Self time:   0.000198

count  total (s)   self (s)
    7              0.000014   try
    7              0.000040     let l:expr = bufnr(a:expr)
                              catch /.*/
                                let l:expr = a:expr
    7              0.000012   endtry
    7              0.000027   if bufloaded(l:expr)
    7              0.000060     return get(getbufline(l:expr, a:lnum), 0, v:null)
                              elseif filereadable(a:expr)
                                return get(readfile(a:expr, '', a:lnum), 0, v:null)
                              endif
                              return v:null

FUNCTION  <SNR>53_HighlightBuildConstraints()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim:72
Called 2 times
Total time:   0.000012
 Self time:   0.000012

count  total (s)   self (s)
    2              0.000010   return get(g:, 'go_highlight_build_constraints', 0)

FUNCTION  <SNR>25_define()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vital/_vsnip/VS/Vim/Option.vim:13
Called 2 times
Total time:   0.000164
 Self time:   0.000131

count  total (s)   self (s)
    2              0.000007   let l:old = {}
    4              0.000022   for [l:key, l:value] in items(a:map)
    2              0.000025     let l:old[l:key] = eval(printf('&%s', l:key))
    2   0.000069   0.000036     execute printf('let &%s = "%s"', l:key, l:value)
    4              0.000006   endfor
    2              0.000015   return { -> s:define(l:old) }

FUNCTION  <lambda>11()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/parser.vim:39
Called 2 times
Total time:   0.000007
 Self time:   0.000007

count  total (s)   self (s)
                            return str2nr(value) 

FUNCTION  <lambda>12()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/parser.vim:40
Called 6 times
Total time:   0.000563
 Self time:   0.000170

count  total (s)   self (s)
                            return s:map(   s:skip(stop, escape),   { value -> {     'type': 'text',     'raw': value[0],     'escaped': value[1]   } }) 

FUNCTION  <lambda>15()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/parser.vim:56
Called 1 time
Total time:   0.000001
 Self time:   0.000001

count  total (s)   self (s)
                            return s:choice 

FUNCTION  <lambda>18()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/parser.vim:56
Called 1 time
Total time:   0.000001
 Self time:   0.000001

count  total (s)   self (s)
                            return s:placeholder 

FUNCTION  <SNR>23_normalize_eol()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Text.vim:13
Called 1 time
Total time:   0.000012
 Self time:   0.000012

count  total (s)   self (s)
    1              0.000011   return substitute(a:text, "\r\n\\|\r", "\n", 'g')

FUNCTION  <lambda>16()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/parser.vim:56
Called 1 time
Total time:   0.000001
 Self time:   0.000001

count  total (s)   self (s)
                            return s:variable 

FUNCTION  81()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:132
Called 3 times
Total time:   0.000260
 Self time:   0.000135

count  total (s)   self (s)
    3              0.000010     let l:pos = a:pos
    3              0.000009     let l:values = []
    4              0.000015     for l:parser in self.parsers
    4   0.000177   0.000052       let l:parsed = l:parser.parse(a:text, l:pos)
    4              0.000012       if !l:parsed[0]
    3              0.000013         return [v:false, v:null, a:pos]
    1              0.000001       endif
    1              0.000006       call add(l:values, l:parsed[1])
    1              0.000003       let l:pos = l:parsed[2]
    1              0.000001     endfor
                                return [v:true, l:values, l:pos]

FUNCTION  <lambda>17()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/parser.vim:56
Called 1 time
Total time:   0.000001
 Self time:   0.000001

count  total (s)   self (s)
                            return s:tabstop 

FUNCTION  84()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:187
Called 3 times
Total time:   0.000384
 Self time:   0.000074

count  total (s)   self (s)
    3   0.000344   0.000034     let l:parsed = self.parser.parse(a:text, a:pos)
    3              0.000008     if l:parsed[0]
                                  return [v:true, self.callback(l:parsed[1]), l:parsed[2]]
    3              0.000004     endif
    3              0.000007     return l:parsed

FUNCTION  <SNR>77_pattern()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:166
Called 2 times
Total time:   0.000053
 Self time:   0.000053

count  total (s)   self (s)
    2              0.000007   let l:fn = {}
    2              0.000019   let l:fn.pattern = a:pattern[0] ==# '^' ? a:pattern : '^' . a:pattern
    2              0.000006   function! l:fn.parse(text, pos) abort
                                let l:text = strcharpart(a:text, a:pos)
                                let l:matches = matchstrpos(l:text, self.pattern, 0, 1)
                                if l:matches[0] !=# ''
                                  return [v:true, l:matches[0], a:pos + l:matches[2]]
                                endif
                                return [v:false, v:null, a:pos]
                              endfunction
    2              0.000006   return l:fn

FUNCTION  <SNR>15_on_text_changed()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/plugin/vsnip.vim:212
Called 79 times
Total time:   0.022377
 Self time:   0.003236

count  total (s)   self (s)
   79   0.002622   0.002036   let l:session = vsnip#get_session()
   79              0.000475   if !empty(l:session)
    6   0.018608   0.000053     call l:session.on_text_changed()
   79              0.000151   endif

FUNCTION  <SNR>53_HighlightFunctionParameters()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim:56
Called 1 time
Total time:   0.000005
 Self time:   0.000005

count  total (s)   self (s)
    1              0.000005   return get(g:, 'go_highlight_function_parameters', 0)

FUNCTION  35()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:68
Called 25 times
Total time:   0.000685
 Self time:   0.000685

count  total (s)   self (s)
   25              0.000154     let l:token_len = strchars(self.token)
   25              0.000162     let l:value = strcharpart(a:text, a:pos, l:token_len)
   25              0.000087     if l:value ==# self.token
    7              0.000036       return [v:true, self.token, a:pos + l:token_len]
   18              0.000022     endif
   18              0.000103     return [v:false, v:null, a:pos]

FUNCTION  vsnip#snippet#node#text#import()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/node/text.vim:3
Called 1 time
Total time:   0.000004
 Self time:   0.000004

count  total (s)   self (s)
    1              0.000003   return s:Text

FUNCTION  103()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:132
Called 3 times
Total time:   0.000488
 Self time:   0.000246

count  total (s)   self (s)
    3              0.000010     let l:pos = a:pos
    3              0.000009     let l:values = []
    8              0.000022     for l:parser in self.parsers
    7   0.000319   0.000078       let l:parsed = l:parser.parse(a:text, l:pos)
    7              0.000020       if !l:parsed[0]
    2              0.000008         return [v:false, v:null, a:pos]
    5              0.000006       endif
    5              0.000025       call add(l:values, l:parsed[1])
    5              0.000017       let l:pos = l:parsed[2]
    6              0.000009     endfor
    1              0.000004     return [v:true, l:values, l:pos]

FUNCTION  20()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/session.vim:34
Called 1 time
Total time:   0.001892
 Self time:   0.000043

count  total (s)   self (s)
                              " insert snippet.
    1   0.001821   0.000029   call s:TextEdit.apply(self.bufnr, [{   'range': {     'start': self.snippet.position,     'end': self.snippet.position   },   'newText': self.snippet.text() }])
    1   0.000068   0.000012   call self.store(changenr())

FUNCTION  105()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:132
Called 2 times
Total time:   0.000107
 Self time:   0.000057

count  total (s)   self (s)
    2              0.000006     let l:pos = a:pos
    2              0.000005     let l:values = []
    2              0.000007     for l:parser in self.parsers
    2   0.000070   0.000020       let l:parsed = l:parser.parse(a:text, l:pos)
    2              0.000006       if !l:parsed[0]
    2              0.000008         return [v:false, v:null, a:pos]
                                  endif
                                  call add(l:values, l:parsed[1])
                                  let l:pos = l:parsed[2]
                                endfor
                                return [v:true, l:values, l:pos]

FUNCTION  <SNR>53_HighlightVariableDeclarations()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim:92
Called 1 time
Total time:   0.000006
 Self time:   0.000006

count  total (s)   self (s)
    1              0.000005   return get(g:, 'go_highlight_variable_declarations', 0)

FUNCTION  <SNR>77_map()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:183
Called 22 times
Total time:   0.000529
 Self time:   0.000529

count  total (s)   self (s)
   22              0.000080   let l:fn = {}
   22              0.000083   let l:fn.callback = a:callback
   22              0.000106   let l:fn.parser = a:parser
   22              0.000064   function! l:fn.parse(text, pos) abort
                                let l:parsed = self.parser.parse(a:text, a:pos)
                                if l:parsed[0]
                                  return [v:true, self.callback(l:parsed[1]), l:parsed[2]]
                                endif
                                return l:parsed
                              endfunction
   22              0.000058   return l:fn

FUNCTION  <SNR>53_HighlightExtraTypes()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim:36
Called 1 time
Total time:   0.000006
 Self time:   0.000006

count  total (s)   self (s)
    1              0.000006   return get(g:, 'go_highlight_extra_types', 0)

FUNCTION  <SNR>77_getchar()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:216
Called 10 times
Total time:   0.000133
 Self time:   0.000133

count  total (s)   self (s)
   10              0.000056   let l:nr = strgetchar(a:text, a:pos)
   10              0.000026   if l:nr != -1
   10              0.000038     return nr2char(l:nr)
                              endif
                              return ''

FUNCTION  89()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:132
Called 3 times
Total time:   0.000290
 Self time:   0.000158

count  total (s)   self (s)
    3              0.000011     let l:pos = a:pos
    3              0.000008     let l:values = []
    5              0.000016     for l:parser in self.parsers
    5   0.000191   0.000059       let l:parsed = l:parser.parse(a:text, l:pos)
    5              0.000015       if !l:parsed[0]
    3              0.000013         return [v:false, v:null, a:pos]
    2              0.000002       endif
    2              0.000010       call add(l:values, l:parsed[1])
    2              0.000007       let l:pos = l:parsed[2]
    2              0.000003     endfor
                                return [v:true, l:values, l:pos]

FUNCTION  <SNR>53_HighlightFunctionCalls()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim:60
Called 1 time
Total time:   0.000007
 Self time:   0.000007

count  total (s)   self (s)
    1              0.000006   return get(g:, 'go_highlight_function_calls', 0)

FUNCTION  82()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:187
Called 3 times
Total time:   0.000340
 Self time:   0.000080

count  total (s)   self (s)
    3   0.000301   0.000041     let l:parsed = self.parser.parse(a:text, a:pos)
    3              0.000008     if l:parsed[0]
                                  return [v:true, self.callback(l:parsed[1]), l:parsed[2]]
    3              0.000004     endif
    3              0.000007     return l:parsed

FUNCTION  83()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:132
Called 3 times
Total time:   0.000310
 Self time:   0.000174

count  total (s)   self (s)
    3              0.000010     let l:pos = a:pos
    3              0.000009     let l:values = []
    5              0.000036     for l:parser in self.parsers
    5   0.000192   0.000056       let l:parsed = l:parser.parse(a:text, l:pos)
    5              0.000015       if !l:parsed[0]
    3              0.000012         return [v:false, v:null, a:pos]
    2              0.000002       endif
    2              0.000011       call add(l:values, l:parsed[1])
    2              0.000007       let l:pos = l:parsed[2]
    2              0.000003     endfor
                                return [v:true, l:values, l:pos]

FUNCTION  <SNR>53_HighlightArrayWhitespaceError()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim:28
Called 1 time
Total time:   0.000009
 Self time:   0.000009

count  total (s)   self (s)
    1              0.000008   return get(g:, 'go_highlight_array_whitespace_error', 0)

FUNCTION  <lambda>32()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/parser.vim:174
Called 1 time
Total time:   0.000006
 Self time:   0.000006

count  total (s)   self (s)
                            return {   'type': 'placeholder',   'id': value[2],   'children': [], } 

FUNCTION  <lambda>37()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/parser.vim:40
Called 2 times
Total time:   0.000015
 Self time:   0.000015

count  total (s)   self (s)
                            return {     'type': 'text',     'raw': value[0],     'escaped': value[1]   } 

FUNCTION  vsnip#parser#combinator#import()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:1
Called 1 time
Total time:   0.000054
 Self time:   0.000054

count  total (s)   self (s)
    1              0.000052   return {   'skip': function('s:skip'),   'token': function('s:token'),   'many': function('s:many'),   'or': function('s:or'),   'seq': function('s:seq'),   'pattern': function('s:pattern'),   'lazy': function('s:lazy'),   'option': function('s:option'),   'map': function('s:map') }

FUNCTION  <SNR>53_HighlightFields()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim:64
Called 1 time
Total time:   0.000005
 Self time:   0.000005

count  total (s)   self (s)
    1              0.000005   return get(g:, 'go_highlight_fields', 0)

FUNCTION  <SNR>53_HighlightTrailingWhitespaceError()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim:44
Called 1 time
Total time:   0.000006
 Self time:   0.000006

count  total (s)   self (s)
    1              0.000005   return get(g:, 'go_highlight_trailing_whitespace_error', 0)

FUNCTION  <SNR>20_vim_to_lsp()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Position.vim:20
Called 2 times
Total time:   0.000165
 Self time:   0.000097

count  total (s)   self (s)
    2   0.000106   0.000038   let l:line = s:_get_buffer_line(a:expr, a:pos[0])
    2              0.000007   if l:line is v:null
                                return {   'line': a:pos[0] - 1,   'character': a:pos[1] - 1 }
    2              0.000003   endif
                            
    2              0.000031   return {   'line': a:pos[0] - 1,   'character': strchars(strpart(l:line, 0, a:pos[1] - 1)) }

FUNCTION  <SNR>57_get_language()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/source/vscode.vim:96
Called 156 times
Total time:   0.002776
 Self time:   0.002776

count  total (s)   self (s)
  156              0.002603   return get({   'javascript.jsx': 'javascriptreact',   'typescript.tsx': 'typescriptreact',   'sh': 'shellscript',   'cs': 'csharp', }, a:filetype, a:filetype)

FUNCTION  <SNR>22__substitute()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vital/_vsnip/VS/LSP/TextEdit.vim:46
Called 1 time
Total time:   0.001350
 Self time:   0.000736

count  total (s)   self (s)
    1              0.000002   try
                                " Save state.
    1   0.000103   0.000018     let l:Restore = s:Option.define({   'foldenable': '0', })
    1              0.000008     let l:view = winsaveview()
                            
                                " Apply substitute.
    1   0.000261   0.000017     let [l:fixeol, l:text_edits] = s:_normalize(a:bufnr, a:text_edits)
    2              0.000006     for l:text_edit in l:text_edits
    1   0.000072   0.000015       let l:start = s:Position.lsp_to_vim(a:bufnr, l:text_edit.range.start)
    1   0.000066   0.000014       let l:end = s:Position.lsp_to_vim(a:bufnr, l:text_edit.range.end)
    1   0.000026   0.000014       let l:text = s:Text.normalize_eol(l:text_edit.newText)
    1              0.000513       execute printf('noautocmd keeppatterns keepjumps silent %ssubstitute/\%%%sl\%%%sc\_.\{-}\%%%sl\%%%sc/\=l:text/%se',   l:start[0],   l:start[0],   l:start[1],   l:end[0],   l:end[1],   &gdefault ? 'g' : '' )
    1   0.000116   0.000042       call s:_fix_cursor_position(a:current_position, l:text_edit, s:Text.split_by_eol(l:text))
    2              0.000003     endfor
                            
                                " Remove last empty line if fixeol enabled.
    1              0.000004     if l:fixeol && getline('$') ==# ''
                                  noautocmd keeppatterns keepjumps silent $delete _
    1              0.000001     endif
                              catch /.*/
                                echomsg string({ 'exception': v:exception, 'throwpoint': v:throwpoint })
    1              0.000002   finally
                                " Restore state.
    1   0.000101   0.000012     call l:Restore()
    1              0.000008     call winrestview(l:view)
    1              0.000002   endtry

FUNCTION  <SNR>53_HighlightFormatStrings()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim:80
Called 1 time
Total time:   0.000007
 Self time:   0.000007

count  total (s)   self (s)
    1              0.000006   return get(g:, 'go_highlight_format_strings', 1)

FUNCTION  vsnip#source#snipmate#find()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/source/snipmate.vim:9
Called 78 times
Total time:   0.037842
 Self time:   0.003419

count  total (s)   self (s)
   78   0.011573   0.001355   let filetypes = vsnip#source#filetypes(a:bufnr)
   78   0.026138   0.001933   return s:find(filetypes, a:bufnr)

FUNCTION  vsnip#snippet#node#create_transform()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/node.vim:41
Called 2 times
Total time:   0.000130
 Self time:   0.000022

count  total (s)   self (s)
    2   0.000128   0.000020   return s:Transform.new(a:transform)

FUNCTION  90()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:187
Called 3 times
Total time:   0.000372
 Self time:   0.000082

count  total (s)   self (s)
    3   0.000332   0.000042     let l:parsed = self.parser.parse(a:text, a:pos)
    3              0.000008     if l:parsed[0]
                                  return [v:true, self.callback(l:parsed[1]), l:parsed[2]]
    3              0.000004     endif
    3              0.000007     return l:parsed

FUNCTION  91()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:132
Called 3 times
Total time:   0.000280
 Self time:   0.000150

count  total (s)   self (s)
    3              0.000010     let l:pos = a:pos
    3              0.000009     let l:values = []
    5              0.000016     for l:parser in self.parsers
    5   0.000183   0.000053       let l:parsed = l:parser.parse(a:text, l:pos)
    5              0.000014       if !l:parsed[0]
    3              0.000012         return [v:false, v:null, a:pos]
    2              0.000002       endif
    2              0.000010       call add(l:values, l:parsed[1])
    2              0.000007       let l:pos = l:parsed[2]
    2              0.000003     endfor
                                return [v:true, l:values, l:pos]

FUNCTION  92()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:187
Called 3 times
Total time:   0.000353
 Self time:   0.000073

count  total (s)   self (s)
    3   0.000314   0.000033     let l:parsed = self.parser.parse(a:text, a:pos)
    3              0.000008     if l:parsed[0]
                                  return [v:true, self.callback(l:parsed[1]), l:parsed[2]]
    3              0.000004     endif
    3              0.000007     return l:parsed

FUNCTION  93()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:114
Called 3 times
Total time:   0.001773
 Self time:   0.000325

count  total (s)   self (s)
   15              0.000037     for l:parser in self.parsers
   12   0.001592   0.000144       let l:parsed = l:parser.parse(a:text, a:pos)
   12              0.000032       if l:parsed[0]
                                    return l:parsed
   12              0.000013       endif
   15              0.000020     endfor
    3              0.000012     return [v:false, v:null, a:pos]

FUNCTION  99()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:187
Called 2 times
Total time:   0.000155
 Self time:   0.000046

count  total (s)   self (s)
    2   0.000130   0.000022     let l:parsed = self.parser.parse(a:text, a:pos)
    2              0.000005     if l:parsed[0]
                                  return [v:true, self.callback(l:parsed[1]), l:parsed[2]]
    2              0.000002     endif
    2              0.000004     return l:parsed

FUNCTION  37()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:68
Called 1 time
Total time:   0.000022
 Self time:   0.000022

count  total (s)   self (s)
    1              0.000005     let l:token_len = strchars(self.token)
    1              0.000006     let l:value = strcharpart(a:text, a:pos, l:token_len)
    1              0.000003     if l:value ==# self.token
    1              0.000005       return [v:true, self.token, a:pos + l:token_len]
                                endif
                                return [v:false, v:null, a:pos]

FUNCTION  <SNR>77_seq()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:129
Called 14 times
Total time:   0.000311
 Self time:   0.000311

count  total (s)   self (s)
   14              0.000046   let l:fn = {}
   14              0.000050   let l:fn.parsers = a:000
   14              0.000039   function! l:fn.parse(text, pos) abort
                                let l:pos = a:pos
                                let l:values = []
                                for l:parser in self.parsers
                                  let l:parsed = l:parser.parse(a:text, l:pos)
                                  if !l:parsed[0]
                                    return [v:false, v:null, a:pos]
                                  endif
                                  call add(l:values, l:parsed[1])
                                  let l:pos = l:parsed[2]
                                endfor
                                return [v:true, l:values, l:pos]
                              endfunction
   14              0.000036   return l:fn

FUNCTION  <SNR>20_cursor()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Position.vim:13
Called 2 times
Total time:   0.000220
 Self time:   0.000056

count  total (s)   self (s)
    2   0.000218   0.000054   return s:vim_to_lsp('%', getpos('.')[1 : 3])

FUNCTION  <SNR>24_get_line_count()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vital/_vsnip/VS/Vim/Buffer.vim:18
Called 1 time
Total time:   0.000008
 Self time:   0.000008

count  total (s)   self (s)
    1              0.000007     return nvim_buf_line_count(a:bufnr)

FUNCTION  <SNR>77_option()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:200
Called 3 times
Total time:   0.000056
 Self time:   0.000056

count  total (s)   self (s)
    3              0.000010   let l:fn = {}
    3              0.000011   let l:fn.parser = a:parser
    3              0.000008   function! l:fn.parse(text, pos) abort
                                let l:parsed = self.parser.parse(a:text, a:pos)
                                if l:parsed[0]
                                  return l:parsed
                                endif
                                return [v:true, v:null, a:pos]
                              endfunction
    3              0.000008   return l:fn

FUNCTION  vsnip#selected_text()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip.vim:16
Called 1 time
Total time:   0.000016
 Self time:   0.000016

count  total (s)   self (s)
    1              0.000004   if len(a:000) == 1
    1              0.000005     let s:selected_text = a:000[0]
                              else
                                return s:selected_text
    1              0.000001   endif

FUNCTION  <SNR>56_get_source_paths()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/source/user_snippet.vim:41
Called 78 times
Total time:   0.038648
 Self time:   0.020593

count  total (s)   self (s)
   78   0.016110   0.001698   let l:filetypes = vsnip#source#filetypes(a:bufnr)
                            
   78              0.000292   let l:paths = []
  156   0.005535   0.001893   for l:dir in s:get_source_dirs(a:bufnr)
  234              0.000703     for l:filetype in l:filetypes
  156              0.008041       let l:path = resolve(expand(printf('%s/%s.json', l:dir, l:filetype)))
  156              0.002792       if has_key(s:cache, l:path) || filereadable(l:path)
                                    call add(l:paths, l:path)
  156              0.000237       endif
  234              0.000667     endfor
  156              0.000237   endfor
   78              0.000236   return l:paths

FUNCTION  vsnip#snippet#parser#parse()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/parser.vim:7
Called 1 time
Total time:   0.005669
 Self time:   0.000045

count  total (s)   self (s)
    1              0.000008   if strlen(a:text) == 0
                                return []
    1              0.000002   endif
                            
    1   0.005640   0.000016   let l:parsed = s:parser.parse(a:text, 0)
    1              0.000003   if !l:parsed[0]
                                throw json_encode({ 'text': a:text, 'result': l:parsed })
    1              0.000001   endif
    1              0.000003   return l:parsed[1]

FUNCTION  GoIndent()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/indent/go.vim:29
Called 2 times
Total time:   0.000309
 Self time:   0.000309

count  total (s)   self (s)
    2              0.000040   let l:prevlnum = prevnonblank(a:lnum-1)
    2              0.000009   if l:prevlnum == 0
                                " top of file
                                return 0
    2              0.000003   endif
                            
                              " grab the previous and current line, stripping comments.
    2              0.000046   let l:prevl = substitute(getline(l:prevlnum), '//.*$', '', '')
    2              0.000023   let l:thisl = substitute(getline(a:lnum), '//.*$', '', '')
    2              0.000011   let l:previ = indent(l:prevlnum)
                            
    2              0.000006   let l:ind = l:previ
                            
    2              0.000024   if l:prevl =~ '[({]\s*$'
                                " previous line opened a block
                                let l:ind += shiftwidth()
    2              0.000002   endif
    2              0.000028   if l:prevl =~# '^\s*\(case .*\|default\):$'
                                " previous line is part of a switch statement
                                let l:ind += shiftwidth()
    2              0.000002   endif
                              " TODO: handle if the previous line is a label.
                            
    2              0.000015   if l:thisl =~ '^\s*[)}]'
                                " this line closed a block
                                let l:ind -= shiftwidth()
    2              0.000002   endif
                            
                              " Colons are tricky.
                              " We want to outdent if it's part of a switch ("case foo:" or "default:").
                              " We ignore trying to deal with jump labels because (a) they're rare, and
                              " (b) they're hard to disambiguate from a composite literal key.
    2              0.000020   if l:thisl =~# '^\s*\(case .*\|default\):$'
                                let l:ind -= shiftwidth()
    2              0.000002   endif
                            
    2              0.000006   return l:ind

FUNCTION  <SNR>1_LoadFTPlugin()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/ftplugin.vim:15
Called 1 time
Total time:   0.003336
 Self time:   0.003336

count  total (s)   self (s)
    1              0.000012     if exists("b:undo_ftplugin")
                                  exe b:undo_ftplugin
                                  unlet! b:undo_ftplugin b:did_ftplugin
    1              0.000002     endif
                            
    1              0.000010     let s = expand("<amatch>")
    1              0.000004     if s != ""
    1              0.000010       if &cpo =~# "S" && exists("b:did_ftplugin")
                            	" In compatible mode options are reset to the global values, need to
                            	" set the local values also when a plugin was already used.
                            	unlet b:did_ftplugin
    1              0.000001       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "aaa" and then "bbb".
    2              0.000015       for name in split(s, '\.')
                                    " Load Lua ftplugins after Vim ftplugins _per directory_
                                    " TODO(clason): use nvim__get_runtime when supports globs and modeline
                                    " XXX: "[.]" in the first pattern makes it a wildcard on Windows
    1              0.003245         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
    2              0.000006       endfor
    1              0.000002     endif

FUNCTION  <SNR>15_on_insert_leave()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/plugin/vsnip.vim:202
Called 2 times
Total time:   0.000158
 Self time:   0.000077

count  total (s)   self (s)
    2   0.000055   0.000037   let l:session = vsnip#get_session()
    2              0.000012   if !empty(l:session)
    2   0.000082   0.000019     call l:session.on_insert_leave()
    2              0.000004   endif

FUNCTION  vsnip#snippet#node#placeholder#import()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/node/placeholder.vim:4
Called 1 time
Total time:   0.000005
 Self time:   0.000005

count  total (s)   self (s)
    1              0.000004   return s:Placeholder

FUNCTION  <SNR>77_many()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:82
Called 6 times
Total time:   0.000152
 Self time:   0.000152

count  total (s)   self (s)
    6              0.000021   let l:fn = {}
    6              0.000021   let l:fn.parser = a:parser
    6              0.000016   function! l:fn.parse(text, pos) abort
                                let l:pos = a:pos
                                let l:values = []
                            
                                let l:len = strchars(a:text)
                                while l:pos < l:len
                                  let l:parsed = self.parser.parse(a:text, l:pos)
                                  if l:parsed[0]
                                    call add(l:values, l:parsed[1])
                                    let l:pos = l:parsed[2]
                                  else
                                    break
                                  endif
                                endwhile
                                if len(l:values) > 0
                                  return [v:true, l:values, l:pos]
                                else
                                  return [v:false, v:null, l:pos]
                                endif
                              endfunction
    6              0.000015   return l:fn

FUNCTION  44()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:187
Called 3 times
Total time:   0.000225
 Self time:   0.000088

count  total (s)   self (s)
    3   0.000170   0.000040     let l:parsed = self.parser.parse(a:text, a:pos)
    3              0.000008     if l:parsed[0]
    2   0.000034   0.000027       return [v:true, self.callback(l:parsed[1]), l:parsed[2]]
    1              0.000001     endif
    1              0.000002     return l:parsed

FUNCTION  <SNR>23_split_by_eol()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vital/_vsnip/VS/LSP/Text.vim:20
Called 1 time
Total time:   0.000019
 Self time:   0.000019

count  total (s)   self (s)
    1              0.000018   return split(a:text, "\r\n\\|\r\\|\n", v:true)

FUNCTION  <SNR>77_lazy()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:151
Called 4 times
Total time:   0.000079
 Self time:   0.000079

count  total (s)   self (s)
    4              0.000015   let l:fn = {}
    4              0.000016   let l:fn.callback = a:callback
    4              0.000012   function! l:fn.parse(text, pos) abort
                                if !has_key(self, 'parser')
                                  let self.parser = self.callback()
                                endif
                                return self.parser.parse(a:text, a:pos)
                              endfunction
    4              0.000011   return l:fn

FUNCTION  <SNR>7_SynSet()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/synload.vim:27
Called 1 time
Total time:   0.002747
 Self time:   0.002747

count  total (s)   self (s)
                              " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
    1              0.000008   syn clear
    1              0.000005   if exists("b:current_syntax")
                                unlet b:current_syntax
    1              0.000001   endif
                            
    1              0.000007   0verbose let s = expand("<amatch>")
    1              0.000003   if s == "ON"
                                " :set syntax=ON
                                if &filetype == ""
                                  echohl ErrorMsg
                                  echo "filetype unknown"
                                  echohl None
                                endif
                                let s = &filetype
    1              0.000003   elseif s == "OFF"
                                let s = ""
    1              0.000001   endif
                            
    1              0.000002   if s != ""
                                " Load the syntax file(s).  When there are several, separated by dots,
                                " load each in sequence.  Skip empty entries.
    2              0.000013     for name in split(s, '\.')
    1              0.000004       if !empty(name)
                                    " XXX: "[.]" in the first pattern makes it a wildcard on Windows
    1              0.002655         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
    1              0.000003       endif
    2              0.000003     endfor
    1              0.000001   endif

FUNCTION  <SNR>77_skip()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:18
Called 6 times
Total time:   0.000256
 Self time:   0.000256

count  total (s)   self (s)
    6              0.000023   let l:fn = {}
    6              0.000022   let l:fn.stop = a:stop
    6              0.000021   let l:fn.escape = a:escape
    6              0.000019   function! l:fn.parse(text, pos) abort
                                let l:pos = a:pos
                                let l:value = ''
                            
                                let l:len = strchars(a:text)
                                while l:pos < l:len
                                  let l:char = s:getchar(a:text, l:pos)
                            
                                  " check escaped stop chars.
                                  if l:char ==# '\'
                                    let l:pos += 1
                                    let l:char = s:getchar(a:text, l:pos)
                                    if index(self.stop + self.escape + ['\'], l:char) == -1
                                      let l:value .= '\'
                                      continue " ignore invalid escape char.
                                    endif
                                    let l:pos += 1
                                    let l:value .= l:char
                                    continue
                                  endif
                            
                                  " check stop char.
                                  if index(self.stop, l:char) >= 0
                                    if a:pos != l:pos
                                      return [v:true, [strcharpart(a:text, a:pos, l:pos - a:pos), l:value], l:pos]
                                    else
                                      return [v:false, v:null, l:pos]
                                    endif
                                  endif
                            
                                  let l:value .= l:char
                                  let l:pos += 1
                                endwhile
                            
                                " everything was string.
                                return [v:true, [strcharpart(a:text, a:pos), l:value], l:len]
                              endfunction
    6              0.000016   return l:fn

FUNCTION  <SNR>53_HighlightSpaceTabError()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim:40
Called 1 time
Total time:   0.000006
 Self time:   0.000006

count  total (s)   self (s)
    1              0.000005   return get(g:, 'go_highlight_space_tab_error', 0)

FUNCTION  vsnip#indent#get_one_indent()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/indent.vim:4
Called 1 time
Total time:   0.000014
 Self time:   0.000014

count  total (s)   self (s)
    1              0.000012   return !&expandtab ? "\t" : repeat(' ', &shiftwidth ? &shiftwidth : &tabstop)

FUNCTION  vsnip#get_complete_items()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip.vim:172
Called 78 times
Total time:   0.156756
 Self time:   0.008483

count  total (s)   self (s)
   78              0.001689   let l:uniq = {}
   78              0.000358   let l:candidates = []
                            
   78   0.149991   0.001718   for l:source in vsnip#source#find(a:bufnr)
                                for l:snippet in l:source
                                  for l:prefix in l:snippet.prefix
                                    if has_key(l:uniq, l:prefix)
                                      continue
                                    endif
                                    let l:uniq[l:prefix] = v:true
                            
                                    let l:menu = ''
                                    let l:menu .= '[v]'
                                    let l:menu .= ' '
                                    let l:menu .= (strlen(l:snippet.description) > 0 ? l:snippet.description : l:snippet.label)
                            
                                    call add(l:candidates, {   'word': l:prefix,   'abbr': l:prefix,   'kind': 'Snippet',   'menu': l:menu,   'dup': 1,   'user_data': json_encode({     'vsnip': {       'snippet': l:snippet.body     }   }) })
                                  endfor
                                endfor
   78              0.000187   endfor
                            
   78              0.000239   return l:candidates

FUNCTION  <SNR>53_HighlightOperators()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim:48
Called 1 time
Total time:   0.000007
 Self time:   0.000007

count  total (s)   self (s)
    1              0.000006   return get(g:, 'go_highlight_operators', 0)

FUNCTION  10()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet.vim:299
Called 1 time
Total time:   0.001264
 Self time:   0.000079

count  total (s)   self (s)
    1              0.000003   let l:fn = {}
    1              0.000004   let l:fn.current_tabstop = a:current_tabstop
    1              0.000003   let l:fn.context = v:null
    1              0.000004   function! l:fn.traverse(context) abort
                                if a:context.node.type ==# 'placeholder' && self.current_tabstop < a:context.node.id
                                  if !empty(self.context) && self.context.node.id <= a:context.node.id
                                    return v:false
                                  endif
                            
                                  let self.context = copy(a:context)
                                endif
                              endfunction
    1   0.000968   0.000013   call self.traverse(self, l:fn.traverse)
                            
    1              0.000004   let l:context = l:fn.context
    1              0.000003   if empty(l:context)
                                return {}
    1              0.000001   endif
                            
    1   0.000259   0.000030   return {   'placeholder': l:context.node,   'range': {     'start': self.offset_to_position(l:context.range[0]),     'end': self.offset_to_position(l:context.range[1])   } }

FUNCTION  15()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet.vim:466
Called 12 times
Total time:   0.001256
 Self time:   0.000418

count  total (s)   self (s)
   12   0.001057   0.000219   let l:lines = split(strcharpart(self.text(), 0, a:offset), "\n", v:true)
   12              0.000185   return {   'line': self.position.line + len(l:lines) - 1,   'character': strchars(l:lines[-1]) + (len(l:lines) == 1 ? self.position.character : 0), }

FUNCTION  16()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet.vim:480
Called 10 times
Total time:   0.000950
 Self time:   0.000342

count  total (s)   self (s)
   10              0.000040   let l:line = a:position.line - self.position.line
   10              0.000050   let l:char = a:position.character - (l:line == 0 ? self.position.character : 0)
   10   0.000740   0.000132   let l:lines = split(self.text(), "\n", v:true)[0 : l:line]
   10              0.000064   let l:lines[-1] = strcharpart(l:lines[-1], 0, l:char)
   10              0.000044   return strchars(join(l:lines, "\n"))

FUNCTION  17()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet.vim:491
Called 18 times
Total time:   0.012456
 Self time:   0.000523

count  total (s)   self (s)
   18              0.000116   let l:state = {   'offset': 0,   'before_text': self.before_text, }
   18              0.000099   let l:context = {   'depth': 0,   'parent': v:null,   'parents': [], }
   18   0.012221   0.000288   call s:traverse(a:node, a:callback, l:state, l:context)

FUNCTION  <SNR>22__normalize()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vital/_vsnip/VS/LSP/TextEdit.vim:105
Called 1 time
Total time:   0.000244
 Self time:   0.000054

count  total (s)   self (s)
    1              0.000009   let l:text_edits = type(a:text_edits) == type([]) ? a:text_edits : [a:text_edits]
    1   0.000086   0.000013   let l:text_edits = s:_range(l:text_edits)
    1              0.000010   let l:text_edits = sort(l:text_edits, function('s:_compare'))
    1              0.000004   let l:text_edits = reverse(l:text_edits)
    1   0.000132   0.000015   return s:_fix_text_edits(a:bufnr, l:text_edits)

FUNCTION  <SNR>58_get_source_dirs()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/source/snipmate.vim:38
Called 78 times
Total time:   0.003402
 Self time:   0.003402

count  total (s)   self (s)
   78              0.000278   let dirs = []
   78              0.000639   let buf_dir = getbufvar(a:bufnr, 'vsnip_snippet_dir', '')
   78              0.000260   if buf_dir !=# ''
                                let dirs += [buf_dir]
   78              0.000113   endif
   78              0.000635   let dirs += getbufvar(a:bufnr, 'vsnip_snippet_dirs', [])
   78              0.000469   let dirs += [g:vsnip_snippet_dir]
   78              0.000320   let dirs += g:vsnip_snippet_dirs
   78              0.000204   return dirs

FUNCTION  vsnip#snippet#node#variable#import()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/node/variable.vim:6
Called 1 time
Total time:   0.000004
 Self time:   0.000004

count  total (s)   self (s)
    1              0.000003   return s:Variable

FUNCTION  <SNR>53_HighlightGenerateTags()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim:84
Called 1 time
Total time:   0.000007
 Self time:   0.000007

count  total (s)   self (s)
    1              0.000006   return get(g:, 'go_highlight_generate_tags', 0)

FUNCTION  vsnip#snippet#node#transform#import()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/node/transform.vim:1
Called 1 time
Total time:   0.000004
 Self time:   0.000004

count  total (s)   self (s)
    1              0.000003   return s:Transform

FUNCTION  <SNR>77_or()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:111
Called 10 times
Total time:   0.000204
 Self time:   0.000204

count  total (s)   self (s)
   10              0.000033   let l:fn = {}
   10              0.000036   let l:fn.parsers = a:000
   10              0.000028   function! l:fn.parse(text, pos) abort
                                for l:parser in self.parsers
                                  let l:parsed = l:parser.parse(a:text, a:pos)
                                  if l:parsed[0]
                                    return l:parsed
                                  endif
                                endfor
                                return [v:false, v:null, a:pos]
                              endfunction
   10              0.000027   return l:fn

FUNCTION  119()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:85
Called 1 time
Total time:   0.005624
 Self time:   0.000156

count  total (s)   self (s)
    1              0.000004     let l:pos = a:pos
    1              0.000004     let l:values = []
                            
    1              0.000007     let l:len = strchars(a:text)
    4              0.000013     while l:pos < l:len
    3   0.005512   0.000044       let l:parsed = self.parser.parse(a:text, l:pos)
    3              0.000008       if l:parsed[0]
    3              0.000019         call add(l:values, l:parsed[1])
    3              0.000011         let l:pos = l:parsed[2]
                                  else
                                    break
    3              0.000003       endif
    4              0.000006     endwhile
    1              0.000004     if len(l:values) > 0
    1              0.000004       return [v:true, l:values, l:pos]
                                else
                                  return [v:false, v:null, l:pos]
                                endif

FUNCTION  100()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:132
Called 3 times
Total time:   0.000287
 Self time:   0.000124

count  total (s)   self (s)
    3              0.000010     let l:pos = a:pos
    3              0.000009     let l:values = []
    4              0.000014     for l:parser in self.parsers
    4   0.000206   0.000043       let l:parsed = l:parser.parse(a:text, l:pos)
    4              0.000012       if !l:parsed[0]
    3              0.000013         return [v:false, v:null, a:pos]
    1              0.000002       endif
    1              0.000005       call add(l:values, l:parsed[1])
    1              0.000003       let l:pos = l:parsed[2]
    1              0.000001     endfor
                                return [v:true, l:values, l:pos]

FUNCTION  101()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:187
Called 3 times
Total time:   0.000385
 Self time:   0.000098

count  total (s)   self (s)
    3   0.000321   0.000034     let l:parsed = self.parser.parse(a:text, a:pos)
    3              0.000008     if l:parsed[0]
                                  return [v:true, self.callback(l:parsed[1]), l:parsed[2]]
    3              0.000004     endif
    3              0.000007     return l:parsed

FUNCTION  102()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:203
Called 1 time
Total time:   0.000039
 Self time:   0.000017

count  total (s)   self (s)
    1   0.000033   0.000011     let l:parsed = self.parser.parse(a:text, a:pos)
    1              0.000003     if l:parsed[0]
    1              0.000002       return l:parsed
                                endif
                                return [v:true, v:null, a:pos]

FUNCTION  104()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:187
Called 3 times
Total time:   0.000573
 Self time:   0.000079

count  total (s)   self (s)
    3   0.000524   0.000036     let l:parsed = self.parser.parse(a:text, a:pos)
    3              0.000008     if l:parsed[0]
    1   0.000019   0.000013       return [v:true, self.callback(l:parsed[1]), l:parsed[2]]
    2              0.000003     endif
    2              0.000004     return l:parsed

FUNCTION  106()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:187
Called 2 times
Total time:   0.000154
 Self time:   0.000047

count  total (s)   self (s)
    2   0.000129   0.000022     let l:parsed = self.parser.parse(a:text, a:pos)
    2              0.000005     if l:parsed[0]
                                  return [v:true, self.callback(l:parsed[1]), l:parsed[2]]
    2              0.000002     endif
    2              0.000004     return l:parsed

FUNCTION  107()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:114
Called 3 times
Total time:   0.001327
 Self time:   0.000215

count  total (s)   self (s)
   10              0.000027     for l:parser in self.parsers
    8   0.001209   0.000097       let l:parsed = l:parser.parse(a:text, a:pos)
    8              0.000021       if l:parsed[0]
    1              0.000002         return l:parsed
    7              0.000008       endif
    9              0.000012     endfor
    2              0.000008     return [v:false, v:null, a:pos]

FUNCTION  vsnip#source#vscode#find()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/source/vscode.vim:22
Called 78 times
Total time:   0.061928
 Self time:   0.009507

count  total (s)   self (s)
   78   0.061819   0.009398   return s:find(map(vsnip#source#filetypes(a:bufnr), 's:get_language(v:val)'))

FUNCTION  <SNR>2_LoadIndent()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/indent.vim:14
Called 1 time
Total time:   0.000942
 Self time:   0.000942

count  total (s)   self (s)
    1              0.000006     if exists("b:undo_indent")
                                  exe b:undo_indent
                                  unlet! b:undo_indent b:did_indent
    1              0.000001     endif
    1              0.000006     let s = expand("<amatch>")
    1              0.000003     if s != ""
    1              0.000004       if exists("b:did_indent")
                            	unlet b:did_indent
    1              0.000001       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
    2              0.000011       for name in split(s, '\.')
                                    " XXX: "[.]" in the pattern makes it a wildcard on Windows
    1              0.000885         exe $'runtime! indent/{name}[.]{{vim,lua}}'
    2              0.000005       endfor
    1              0.000001     endif

FUNCTION  vsnip#source#filetypes()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/source.vim:24
Called 234 times
Total time:   0.034493
 Self time:   0.034493

count  total (s)   self (s)
  234              0.002583   if has( "nvim" )
  234              0.023187     let l:filetypes = v:lua.require'vsnip.treesitter'.get_ft_at_cursor( a:bufnr )
                            
                                " buffer has no filetype defined
  234              0.001550     if l:filetypes.filetype == ""
                                  return [ "global" ]
                            
                                " buffer has filetype
  234              0.000404     else
  234              0.004190       return get( g:vsnip_filetypes, l:filetypes.injected_filetype, get( g:vsnip_filetypes, l:filetypes.filetype, [ l:filetypes.filetype ] ) ) + [ "global" ]
                                endif
                              else
                                let l:filetype = getbufvar( a:bufnr, "&filetype", "" )
                            
                                return split( l:filetype, '\.' ) + get( g:vsnip_filetypes, l:filetype, [] ) + [ "global" ]
                              endif

FUNCTION  vsnip#snippet#node#create_text()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/node.vim:30
Called 7 times
Total time:   0.000298
 Self time:   0.000101

count  total (s)   self (s)
    7   0.000294   0.000097   return s:Text.new({   'type': 'text',   'raw': a:text,   'escaped': a:text })

FUNCTION  114()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/parser/combinator.vim:132
Called 3 times
Total time:   0.000435
 Self time:   0.000212

count  total (s)   self (s)
    3              0.000011     let l:pos = a:pos
    3              0.000009     let l:values = []
    6              0.000019     for l:parser in self.parsers
    6   0.000306   0.000084       let l:parsed = l:parser.parse(a:text, l:pos)
    6              0.000018       if !l:parsed[0]
    3              0.000013         return [v:false, v:null, a:pos]
    3              0.000003       endif
    3              0.000017       call add(l:values, l:parsed[1])
    3              0.000011       let l:pos = l:parsed[2]
    3              0.000004     endfor
                                return [v:true, l:values, l:pos]

FUNCTION  <SNR>53_HighlightVariableAssignments()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim:88
Called 1 time
Total time:   0.000007
 Self time:   0.000007

count  total (s)   self (s)
    1              0.000006   return get(g:, 'go_highlight_variable_assignments', 0)

FUNCTION  <SNR>53_HighlightTypes()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/syntax/go.vim:68
Called 1 time
Total time:   0.000006
 Self time:   0.000006

count  total (s)   self (s)
    1              0.000005   return get(g:, 'go_highlight_types', 0)

FUNCTION  <SNR>18_traverse()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet.vim:503
Called 99 times
Total time:   0.024721
 Self time:   0.014490

count  total (s)   self (s)
   99              0.000246   let l:text = ''
   99              0.000234   let l:length = 0
   99              0.000283   if a:node.type !=# 'snippet'
   81   0.001430   0.000606     let l:text = a:node.text()
   81              0.000324     let l:length = strchars(l:text)
   81   0.004774   0.002164     if a:callback({   'node': a:node,   'text': l:text,   'length': l:length,   'parent': a:context.parent,   'parents': a:context.parents,   'depth': a:context.depth,   'offset': a:state.offset,   'before_text': a:state.before_text,   'range': [a:state.offset, a:state.offset + l:length], })
   10              0.000018       return v:true
   71              0.000064     endif
   89              0.000078   endif
                            
   89              0.000288   if len(a:node.children) > 0
   38              0.000396     let l:next_context = {   'parent': a:node,   'parents': a:context.parents + [a:node],   'depth': len(a:context.parents) + 1, }
  109              0.000313     for l:child in copy(a:node.children)
   81              0.000538       if s:traverse(l:child, a:callback, a:state, l:next_context)
   10              0.000018         return v:true
   71              0.000060       endif
   99              0.000103     endfor
   51              0.000049   else
   51              0.000209     let a:state.before_text .= l:text
   51              0.000140     let a:state.offset += l:length
   79              0.000076   endif

FUNCTION  vsnip#indent#get_base_indent()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/indent.vim:11
Called 1 time
Total time:   0.000021
 Self time:   0.000021

count  total (s)   self (s)
    1              0.000020   return matchstr(a:text, '^\s*')

FUNCTION  23()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/session.vim:75
Called 1 time
Total time:   0.001483
 Self time:   0.000090

count  total (s)   self (s)
    1   0.000020   0.000007   call self.flush_changes()
                            
    1              0.000002   if a:direction == 1
    1   0.001280   0.000017     let l:jump_point = self.snippet.get_next_jump_point(self.tabstop)
                              else
                                let l:jump_point = self.snippet.get_prev_jump_point(self.tabstop)
    1              0.000001   endif
                            
    1              0.000003   if empty(l:jump_point)
                                return
    1              0.000001   endif
                            
    1              0.000004   let self.tabstop = l:jump_point.placeholder.id
                            
                              " choice.
    1              0.000004   if len(l:jump_point.placeholder.choice) > 0
                                call self.choice(l:jump_point)
                            
                                " select.
    1              0.000005   elseif l:jump_point.range.start.character != l:jump_point.range.end.character
                                call self.select(l:jump_point)
                            
                                " move.
    1              0.000001   else
    1   0.000107   0.000012     call self.move(l:jump_point)
    1              0.000001   endif
                            
    1   0.000027   0.000006   doautocmd <nomodeline> User vsnip#jump

FUNCTION  26()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/session.vim:156
Called 1 time
Total time:   0.000095
 Self time:   0.000039

count  total (s)   self (s)
    1   0.000070   0.000014   let l:pos = s:Position.lsp_to_vim('%', a:jump_point.range.end)
                            
    1              0.000005   call cursor(l:pos)
                            
    1              0.000005   if mode()[0] ==# 'n'
                                if l:pos[1] != getcurpos()[2]
                                  call feedkeys('a', 'ni')
                                else
                                  call feedkeys('i', 'ni')
                                endif
    1              0.000001   endif

FUNCTION  27()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/session.vim:173
Called 6 times
Total time:   0.000103
 Self time:   0.000103

count  total (s)   self (s)
    6              0.000062   let self.buffer = getbufline(self.bufnr, '^', '$')
    6              0.000034   let self.changedtick = getbufvar(self.bufnr, 'changedtick', 0)

FUNCTION  28()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/session.vim:181
Called 2 times
Total time:   0.000063
 Self time:   0.000021

count  total (s)   self (s)
    2   0.000059   0.000017   call self.flush_changes()

FUNCTION  29()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/session.vim:188
Called 6 times
Total time:   0.018555
 Self time:   0.000372

count  total (s)   self (s)
    6              0.000029   if self.bufnr != bufnr('%')
                                return vsnip#deactivate()
    6              0.000006   endif
                            
    6              0.000019   let l:changenr = changenr()
                            
                              " save state.
    6              0.000013   if self.changenr != l:changenr
    1   0.000127   0.000013     call self.store(self.changenr)
    1              0.000006     if has_key(self.changenrs, l:changenr)
                                  let self.tabstop = self.changenrs[l:changenr].tabstop
                                  let self.snippet = self.changenrs[l:changenr].snippet
                                  let self.changenr = l:changenr
                                  let self.buffer = getbufline(self.bufnr, '^', '$')
                                  return
    1              0.000001     endif
    6              0.000004   endif
                            
    6              0.000014   if g:vsnip_sync_delay == 0
    6   0.018133   0.000064     call self.flush_changes()
                              elseif g:vsnip_sync_delay > 0
                                call timer_stop(self.timer_id)
                                let self.timer_id = timer_start(g:vsnip_sync_delay, { -> self.flush_changes() }, { 'repeat': 1 })
    6              0.000006   endif

FUNCTION  127()
    Defined: ~/.local/share/nvim/plugged/vim-vsnip/autoload/vsnip/snippet/node/text.vim:12
Called 9 times
Total time:   0.000255
 Self time:   0.000255

count  total (s)   self (s)
    9              0.000051   let s:uid += 1
                            
    9              0.000190   return extend(deepcopy(s:Text), {   'uid': s:uid,   'type': 'text',   'value': a:ast.escaped,   'children': [], })

FUNCTION  <SNR>33_Remove_Matches()
    Defined: /opt/nvim-linux-x86_64/share/nvim/runtime/plugin/matchparen.vim:203
Called 184 times
Total time:   0.005269
 Self time:   0.005269

count  total (s)   self (s)
  184              0.001221   if exists('w:paren_hl_on') && w:paren_hl_on
   26              0.000115     while !empty(w:matchparen_ids)
   13              0.000172       silent! call remove(w:matchparen_ids, 0)->matchdelete()
   26              0.000054     endwhile
   13              0.000054     let w:paren_hl_on = 0
  184              0.000233   endif

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
   78   0.156756   0.008483  vsnip#get_complete_items()
   78   0.148273   0.006200  vsnip#source#find()
   78   0.061928   0.009507  vsnip#source#vscode#find()
  184   0.047454   0.041314  <SNR>33_Highlight_Matching_Pair()
   78   0.042303   0.003655  vsnip#source#user_snippet#find()
   78   0.039782             <SNR>57_find()
   78   0.038648   0.020593  <SNR>56_get_source_paths()
   78   0.037842   0.003419  vsnip#source#snipmate#find()
  234   0.034493             vsnip#source#filetypes()
   99   0.024721   0.014490  <SNR>18_traverse()
   78   0.024205   0.003399  <SNR>58_find()
   79   0.022377   0.003236  <SNR>15_on_text_changed()
   78   0.020806   0.017404  <SNR>58_get_source_paths()
    1   0.020015   0.000201  vsnip#anonymous()
    6   0.018555   0.000372  29()
    9   0.018124   0.000744  30()
    1   0.016234   0.000488  19()
    1   0.015441   0.000870  1()
   18   0.012456   0.000523  17()
    5   0.010917   0.002748  3()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
  184   0.047454   0.041314  <SNR>33_Highlight_Matching_Pair()
   78              0.039782  <SNR>57_find()
  234              0.034493  vsnip#source#filetypes()
   78   0.038648   0.020593  <SNR>56_get_source_paths()
   78   0.020806   0.017404  <SNR>58_get_source_paths()
   99   0.024721   0.014490  <SNR>18_traverse()
   78   0.061928   0.009507  vsnip#source#vscode#find()
   78   0.156756   0.008483  vsnip#get_complete_items()
   78   0.148273   0.006200  vsnip#source#find()
  184              0.005269  <SNR>33_Remove_Matches()
   78   0.042303   0.003655  vsnip#source#user_snippet#find()
   78              0.003643  <SNR>56_get_source_dirs()
   78   0.037842   0.003419  vsnip#source#snipmate#find()
   78              0.003402  <SNR>58_get_source_dirs()
   78   0.024205   0.003399  <SNR>58_find()
    1              0.003336  <SNR>1_LoadFTPlugin()
   79   0.022377   0.003236  <SNR>15_on_text_changed()
  156              0.002776  <SNR>57_get_language()
    5   0.010917   0.002748  3()
    1              0.002747  <SNR>7_SynSet()

